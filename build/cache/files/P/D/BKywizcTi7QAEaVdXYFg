1665722086
waR3U4bTeM%3Aa2236d6e9a5de1753bd7c74ea86a4afe-f9e671dbcd1bacde7beb23fa02c6ef6f
s:22164:"O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"f9e671dbcd1bacde7beb23fa02c6ef6f";s:39:" phpDocumentor\Reflection\Php\File name";s:25:"VideoReviewController.php";s:39:" phpDocumentor\Reflection\Php\File path";s:46:"app/Http/Controllers/VideoReviewController.php";s:41:" phpDocumentor\Reflection\Php\File source";s:9650:"<?php

namespace App\Http\Controllers;

use App\Models\PerformanceLevel;
use App\Models\ReviewQuestion;
use App\Models\TemporaryReview;
use Illuminate\Http\Request;
use Illuminate\Routing\Redirector;
use App\Http\Requests;
use App\Models\Video;
use App\Models\User;
use App\Models\Review;
use App\Models\Notification;
use App\Models\Transaction;
use File;
use Storage;
use Carbon\Carbon;
use App\Http\Helpers\Mailer;
use Illuminate\Support\Facades\DB;
use App\Jobs\ConcatReviewVideoAudio;
use Illuminate\Support\Facades\Log;

class VideoReviewController extends Controller
{
    private $_user = null;

    public function __construct(Request $request, Redirector $redirect)
    {

        $this->_user = $request->user();

        if (empty($this->_user)) {
            $redirect->to('login')->send();
        }
    }

    public function getAllReviewedVideo(){
    	$result = Review::getByUserIdList($this->_user->id);
        $allresult = Review::getByUserIdListAll($this->_user->id);
    	$model = Review::find(2);
    	foreach ($result as &$review){
                if (!empty($review)) {
                    $review->package_id = Video::getVideoPackage($review->video_id);
                    if($review->package_id == 1){
                        $review->overall_rating = round((
                            $review->performance_quality_rating +
                            $review->technical_ability_rating +
                            $review->energy_style_rating +
                            $review->storytelling_rating +
                            $review->look_appearance_rating
                            
                            ) / 5, 1);
                    }else{
                        $review->overall_rating = round((
                            $review->artisty +
                            $review->formation +
                            $review->interpretation +
                            $review->creativity +
                            $review->style +
                            $review->energy +
                            $review->precision +
                            $review->timing +
                            $review->footwork +
                            $review->alingment +
                            $review->balance +
                            $review->focus
                        ) / 12, 1);
                    }
                    $review->overall_rating_backup = $review->overall_rating;
                    $review->days_ago = floor((time() - strtotime($review->created_at)) / 3600 / 24);
                }
            }
        foreach ($allresult as &$reviewtemp){
                if (!empty($reviewtemp)) {
                    $reviewtemp->package_id = Video::getVideoPackage($reviewtemp->video_id);
                    if($reviewtemp->package_id == 1){
                        $reviewtemp->overall_rating = round((
                            $reviewtemp->performance_quality_rating +
                            $reviewtemp->technical_ability_rating +
                            $reviewtemp->energy_style_rating +
                            $reviewtemp->storytelling_rating +
                            $reviewtemp->look_appearance_rating
                            
                            ) / 5, 1);
                    }else{
                        $reviewtemp->overall_rating = round((
                            $reviewtemp->artisty +
                            $reviewtemp->formation +
                            $reviewtemp->interpretation +
                            $reviewtemp->creativity +
                            $reviewtemp->style +
                            $reviewtemp->energy +
                            $reviewtemp->precision +
                            $reviewtemp->timing +
                            $reviewtemp->footwork +
                            $reviewtemp->alingment +
                            $reviewtemp->balance +
                            $reviewtemp->focus
                        ) / 12, 1);
                    }
                    $reviewtemp->overall_rating_backup = $reviewtemp->overall_rating;
                    $reviewtemp->days_ago = floor((time() - strtotime($reviewtemp->created_at)) / 3600 / 24);
                }
            }
         //Beginner level
         $beginners = Review::getAllReviewedByLevel($this->_user->id,1);
    	
    	foreach ($beginners as &$review1){
                if (!empty($review1)) {
                    $review1->package_id = Video::getVideoPackage($review1->video_id);
                    if($review1->package_id == 1){
                        $review1->overall_rating = round((
                            $review1->performance_quality_rating +
                            $review1->technical_ability_rating +
                            $review1->energy_style_rating +
                            $review1->storytelling_rating +
                            $review1->look_appearance_rating
                            
                            ) / 5, 1);
                    }else{
                        $review1->overall_rating = round((
                            $review1->artisty +
                            $review1->formation +
                            $review1->interpretation +
                            $review1->creativity +
                            $review1->style +
                            $review1->energy +
                            $review1->precision +
                            $review1->timing +
                            $review1->footwork +
                            $review1->alingment +
                            $review1->balance +
                            $review1->focus
                        ) / 12, 1);
                    }
                    $review1->overall_rating_backup = $review->overall_rating;
                    $review1->days_ago = floor((time() - strtotime($review1->created_at)) / 3600 / 24);
                }
            }
        //Intermediate level
        $intermediate = Review::getAllReviewedByLevel($this->_user->id,2);
    	
    	foreach ($intermediate as &$review2){
                if (!empty($review2)) {
                    $review2->package_id = Video::getVideoPackage($review2->video_id);
                    if($review2->package_id == 1){
                        $review2->overall_rating = round((
                            $review2->performance_quality_rating +
                            $review2->technical_ability_rating +
                            $review2->energy_style_rating +
                            $review2->storytelling_rating +
                            $review2->look_appearance_rating
                            
                            ) / 5, 1);
                    }else{
                    $review2->overall_rating = round((
                            $review2->artisty +
                            $review2->formation +
                            $review2->interpretation +
                            $review2->creativity +
                            $review2->style +
                            $review2->energy +
                            $review2->precision +
                            $review2->timing +
                            $review2->footwork +
                            $review2->alingment +
                            $review2->balance +
                            $review2->focus
                        ) / 12, 1);
                    }
                    $review2->overall_rating_backup = $review->overall_rating;
                    $review2->days_ago = floor((time() - strtotime($review2->created_at)) / 3600 / 24);
                }
            }
        $advance = Review::getAllReviewedByLevel($this->_user->id,3);
    	
    	foreach ($advance as &$review3){
                if (!empty($review3)) {
                    $review3->package_id = Video::getVideoPackage($review3->video_id);
                    if($review3->package_id == 1){
                        $review3->overall_rating = round((
                            $review3->performance_quality_rating +
                            $review3->technical_ability_rating +
                            $review3->energy_style_rating +
                            $review3->storytelling_rating +
                            $review3->look_appearance_rating
                            
                            ) / 5, 1);
                    }else{
                        $review3->overall_rating = round((
                            $review3->artisty +
                            $review3->formation +
                            $review3->interpretation +
                            $review3->creativity +
                            $review3->style +
                            $review3->energy +
                            $review3->precision +
                            $review3->timing +
                            $review3->footwork +
                            $review3->alingment +
                            $review3->balance +
                            $review3->focus
                        ) / 12, 1);
                    }
                    $review3->overall_rating_backup = $review->overall_rating;
                    $review3->days_ago = floor((time() - strtotime($review3->created_at)) / 3600 / 24);
                } 
            }
        // echo "<pre>";      
        // print_r($result);
        // echo "</pre>";
    	return view('review/my-reviews', ["allreview"=>$allresult,"reviews" => $result,'beginners'=>$beginners,'intermediate'=>$intermediate,'advance'=>$advance])->withModel($model);
    }
}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:1:{s:21:"\App\Http\Controllers";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:21:"\App\Http\Controllers";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"Controllers";}}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:43:"\App\Http\Controllers\VideoReviewController";O:35:"phpDocumentor\Reflection\Php\Class_":11:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:43:"\App\Http\Controllers\VideoReviewController";s:36:" phpDocumentor\Reflection\Fqsen name";s:21:"VideoReviewController";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";N;s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:32:"\App\Http\Controllers\Controller";s:36:" phpDocumentor\Reflection\Fqsen name";s:10:"Controller";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:1:{s:51:"\App\Http\Controllers\VideoReviewController::$_user";O:37:"phpDocumentor\Reflection\Php\Property":8:{s:44:" phpDocumentor\Reflection\Php\Property fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:51:"\App\Http\Controllers\VideoReviewController::$_user";s:36:" phpDocumentor\Reflection\Fqsen name";s:5:"_user";}s:47:" phpDocumentor\Reflection\Php\Property docBlock";N;s:44:" phpDocumentor\Reflection\Php\Property types";a:0:{}s:46:" phpDocumentor\Reflection\Php\Property default";s:4:"null";s:45:" phpDocumentor\Reflection\Php\Property static";b:0;s:49:" phpDocumentor\Reflection\Php\Property visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:47:" phpDocumentor\Reflection\Php\Property location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:26;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:43:" phpDocumentor\Reflection\Php\Property type";N;}}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:2:{s:58:"\App\Http\Controllers\VideoReviewController::__construct()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:58:"\App\Http\Controllers\VideoReviewController::__construct()";s:36:" phpDocumentor\Reflection\Fqsen name";s:11:"__construct";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"request";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:24:"\Illuminate\Http\Request";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"Request";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:8:"redirect";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:30:"\Illuminate\Routing\Redirector";s:36:" phpDocumentor\Reflection\Fqsen name";s:10:"Redirector";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:28;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:66:"\App\Http\Controllers\VideoReviewController::getAllReviewedVideo()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:66:"\App\Http\Controllers\VideoReviewController::getAllReviewedVideo()";s:36:" phpDocumentor\Reflection\Fqsen name";s:19:"getAllReviewedVideo";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:38;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:24;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}";