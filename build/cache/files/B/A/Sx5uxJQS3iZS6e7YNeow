1665722086
waR3U4bTeM%3A409ef5a322abc818715f3a0e119fa0c4-67fc10ecd251da224c6b5f8179cc7ebf
s:38448:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjY3ZmMxMGVjZDI1MWRhMjI0YzZiNWY4MTc5Y2M3ZWJmIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTU6ImluZGV4LmJsYWRlLnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjQxOiJyZXNvdXJjZXMvdmlld3MvYXVkaXRpb25zL2luZGV4LmJsYWRlLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MjgwMjA6IkBleHRlbmRzKCdsYXlvdXRzLnVzZXInKQpAc2VjdGlvbignY29udGVudCcpCjxkaXYgY2xhc3M9Im1haW4tY29udGVudCBhdWRpdGlvbnMtd3JhcCI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgIEBpZighcmVxdWVzdCgpLT5leGlzdHMoJ3NpbmdsZScpKQogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14bC02Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29hY2gtbGlzdCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3AtYm94IG1iLTAiPgogICAgICAgICAgICAgICAgICAgIDxoMyA+TGlzdCBvZiBBdWRpdGlvbnM8L2gzPgogICAgICAgICAgICAgICAgCTxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSJ7e3VybCgnZmlsdGVyLWF1ZGl0aW9ucycpfX0iPgogICAgICAgICAgICAgICAgCQl7ISEgY3NyZl9maWVsZCgpICEhfQoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoJICAgICAgICAgICAgICAgICAgICAJPGRpdiBjbGFzcz0iY29sLWxnLTYiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzZWFyY2giIG5hbWU9ImF1ZGl0aW9uLW5hbWUiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSJTZWFyY2ggYnkgbmFtZeKApiIgdmFsdWU9Int7JGZpbHRlclsnbmFtZSddfX0iPgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ic29ydGJ5IiBjbGFzcz0iZm9ybS1jb250cm9sIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAk8b3B0aW9uIHZhbHVlPSJhc2MiIEBpZigkZmlsdGVyWydzb3J0YnknXSA9PSAnYXNjJykgc2VsZWN0ZWQ9InNlbGVjdGVkIiBAZW5kaWY+QXNjZW5kaW5nPC9vcHRpb24+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJPG9wdGlvbiB2YWx1ZT0iZGVzYyIgQGlmKCRmaWx0ZXJbJ3NvcnRieSddID09ICdkZXNjJykgc2VsZWN0ZWQ9InNlbGVjdGVkIiBAZW5kaWY+RGVzY2VuZGluZzwvb3B0aW9uPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJ0YWxlbnQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCTxvcHRpb24gdmFsdWU9IiI+VGFsZW50PC9vcHRpb24+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJQGZvcmVhY2goJGFjdGl2aXR5X2dlbnJlcyBhcyAkdGFsZW50KQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQk8b3B0aW9uIHZhbHVlPSJ7eyR0YWxlbnQtPmlkfX0iIEBpZigkZmlsdGVyWyd0YWxlbnQnXSA9PSAkdGFsZW50LT5pZCkgc2VsZWN0ZWQ9InNlbGVjdGVkIiBAZW5kaWY+e3skdGFsZW50LT5uYW1lfX08L29wdGlvbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAlAZW5kZm9yZWFjaAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPgoJICAgICAgICAgICAgICAgICAgICAgICAgCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImZpbHRlciIgdmFsdWU9ImZpbHRlciIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJQGlmKGNvdW50KCRhdWRpdGlvbnMpID4gMCkKCQkJCUBmb3JlYWNoKCRhdWRpdGlvbnMgYXMgJGF1ZGl0aW9uKQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEgQGlmKCRhdWRpdGlvbi0+aWQgPT0gJGF1ZGl0aW9uX2RldGFpbC0+aWQpIGFjdGl2ZSBAZW5kaWYgIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlYWRsaW5lIj5EZWFkbGluZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlIj57eyBkYXRlKCdkJywgc3RydG90aW1lKCRhdWRpdGlvbi0+ZGVhZGxpbmUpKSB9fTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb250aCI+e3sgZGF0ZSgnRicsIHN0cnRvdGltZSgkYXVkaXRpb24tPmRlYWRsaW5lKSkgfX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzaWduYXRpb24iPnt7JGF1ZGl0aW9uLT50aXRsZX19PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+PGEgaHJlZj0iL2F1ZGl0aW9ucy97eyRhdWRpdGlvbi0+aWR9fSI+QGlmKCRhdWRpdGlvbil7eyRhdWRpdGlvbi0+YXVkaXRpb25fbmFtZX19QGVuZGlmPC9hPjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FjdGlvbiI+e3skYXVkaXRpb24tPmxvY2F0aW9ufX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJQGlmKGluX2FycmF5KCRhdWRpdGlvbi0+aWQsJHBhcnRpY2lwYXRlZF9hdWRpdGlvbikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQk8YSBocmVmPSIjIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbW9kYWwtcmlnaHQte3skYXVkaXRpb24tPmlkfX0iIGNsYXNzPSJmaXhlZC10ZXh0Ij5TZWUgcGFydGljaXBhdGlvbjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJQGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCTxhIGhyZWY9Int7dXJsKCdhdWRpdGlvbnMnKX19L3t7JGF1ZGl0aW9uLT5pZH19Ij48c3Bhbj4kIHt7JGF1ZGl0aW9uLT5hdWRpdGlvbl9mZWV9fTwvc3Bhbj5FbnRyeSBGZWUgPGRpdiBjbGFzcz0iaG92ZXItdGV4dCI+UmVhZCBNb3JlPC9kaXY+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAlAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICBAZW5kZm9yZWFjaAogICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgQGVuZGlmCiAgICAgICAgPGRpdiBjbGFzcz0iQGlmKCFyZXF1ZXN0KCktPmV4aXN0cygnc2luZ2xlJykpIGNvbC14bC02IEBlbHNlIGNvbC14bC04IEBlbmRpZiAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2FjaC1pbmZvLXNjcm9sbGVhYmxlIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF1ZGl0aW9uLWluZm8iPgogICAgICAgICAgICAgICAgCUBpZigkYXVkaXRpb25fZGV0YWlsKQogICAgCQkJCQkKICAgIAkJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctYm94IiBAaWYoICRhdWRpdGlvbl9kZXRhaWwtPmhlYWRlcl9pbWFnZSAhPSIiKSBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKHt7YXNzZXQoJ3VwbG9hZHMvYXVkaXRpb25zJyl9fS97eyAkYXVkaXRpb25fZGV0YWlsLT5oZWFkZXJfaW1hZ2V9fSk7YmFja2dyb3VuZC1zaXplOiBjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOyIgQGVuZGlmPgogICAgCQkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCQkgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgCQkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZXJpYWwtbG9nbyI+CiAgICAJCSAgICAgICAgICAgICAgICAgICAgICAgIAlAaWYoICRhdWRpdGlvbl9kZXRhaWwtPmxvZ28gIT0iIikKICAgIAkJICAgICAgICAgICAgICAgICAgICAgICAgCQk8aW1nIHNyYz0ie3thc3NldCgndXBsb2Fkcy9hdWRpdGlvbnMnKX19L3t7ICRhdWRpdGlvbl9kZXRhaWwtPmxvZ299fSIgYWx0PSIiIGNsYXNzPSJpbWctZmx1aWQiPgogICAgCQkgICAgICAgICAgICAgICAgICAgICAgICAJQGVuZGlmCiAgICAJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgCQkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1jb250ZW50Ij4KICAgIAkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlc2lnbmF0aW9uIj57eyAkYXVkaXRpb25fZGV0YWlsLT50aXRsZX19PC9kaXY+CiAgICAJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+QGlmKCRhdWRpdGlvbl9kZXRhaWwpe3skYXVkaXRpb25fZGV0YWlsLT5hdWRpdGlvbl9uYW1lfX1AZW5kaWY8L2gzPgogICAgCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmZvLWxpc3QiPgogICAgCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgIAkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0Pnt7IGRhdGUoJ20uZC55Jywgc3RydG90aW1lKCAkYXVkaXRpb25fZGV0YWlsLT5kZWFkbGluZSkpIH19PC9oND4KICAgIAkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5EZWFkbGluZTwvaDU+CiAgICAJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgIAkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+e3sgJGF1ZGl0aW9uX2RldGFpbC0+bG9jYXRpb259fTwvaDQ+CiAgICAJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkxvY2F0aW9uPC9oNT4KICAgIAkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgIAkJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAJCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAJCSAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIAkJICAgIAogICAgCQkgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZW50cnktaW5mbyI+CiAgICAJCSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJpY2UiPjxzdWI+JDwvc3ViPiB7eyAkYXVkaXRpb25fZGV0YWlsLT5hdWRpdGlvbl9mZWV9fTwvZGl2PgogICAgCQkgICAgICAgICAgICAgICAgICAgIDxoND5FbnRyeSBGZWU8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBhY2thZ2UtdGl0bGUiPlRoaXMgcGFja2FnZSBpbmNsdWRlczo8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdWRpdGlvbi1kZXRhaWwiPgogICAgICAgIAkJICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VmVyYmFsICYgd3JpdHRlbiBmZWVkYmFjazwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2NvcmVjYXJkICYgY29tbWVudHM8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBlcmZvcm1hbmNlIGxldmVsIHBsYWNlbWVudCA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgCQkgICAgICAgICAgICAgICAgICAgIEBpZihpbl9hcnJheSgkYXVkaXRpb25fZGV0YWlsLT5pZCwkcGFydGljaXBhdGVkX2F1ZGl0aW9uKSkKICAgIAkJCQkJCQkJPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbW9kYWwtcmlnaHQte3skYXVkaXRpb25fZGV0YWlsLT5pZH19Ij5TZWUgcGFydGljaXBhdGlvbjwvYT4KICAgIAkJICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgCQkgICAgICAgICAgICAgICAgICAgIAk8YSBocmVmPSJ7e3VybCgnYXVkaXRpb25zL3BhcnRpY2lwYXRpb24nKX19L3t7ICRhdWRpdGlvbl9kZXRhaWwtPmlkfX0iIGNsYXNzPSJidG4gYnRuLWRhbmdlciI+UGFydGljaXBhdGU8L2E+CiAgICAJCSAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAJCSAgICAgICAgICAgICAgICAgICAgCiAgICAJCSAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIAkJICAgICAgICAgICAgICAgIAkKICAgIAkJICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNjcm9sbGFibGUgYXVkaXRpb24taW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYgKCRhdWRpdGlvbl9kZXRhaWwpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iYWNjb3JkaW9uIiBjbGFzcz0iYWNjb3JkaW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoICRhdWRpdGlvbl9kZXRhaWwtPmRlc2NyaXB0aW9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIiBpZD0iaGVhZGluZ09uZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tbGluayIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2NvbGxhcHNlT25lIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZU9uZSI+IERlc2NyaXB0aW9uIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlT25lIiBjbGFzcz0iY29sbGFwc2Ugc2hvdyIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nT25lIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+eyEhICAkYXVkaXRpb25fZGV0YWlsLT5kZXNjcmlwdGlvbiAhIX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCAkYXVkaXRpb25fZGV0YWlsLT5yZXF1aXJlbWVudCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIiIGlkPSJoZWFkaW5nVHdvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLWxpbmsgY29sbGFwc2VkIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjY29sbGFwc2VUd28iIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVR3byI+IFJlcXVpcmVtZW50czwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlVHdvIiBjbGFzcz0iY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ1R3byIgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57ISEgJGF1ZGl0aW9uX2RldGFpbC0+cmVxdWlyZW1lbnQhIX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICBAaWYgKGNvdW50KCRhdWRpdGlvbnMpID09IDAgJiYgIXJlcXVlc3QoKS0+ZXhpc3RzKCdzaW5nbGUnKSkKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idGV4dC1jZW50ZXIiIHN0eWxlPSJwYWRkaW5nLXRvcDogMTIwcHg7Ij5PcHBzISBObyBuZXcgYXVkaXRpb25zPC9oMj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgQGVuZGlmCiAgICAgPC9kaXY+CgogICAgPC9kaXY+CjwvZGl2PgpAZW5kc2VjdGlvbgpAc2VjdGlvbignbW9kYWwtcmlnaHQnKQpAaWYoaXNzZXQoJGF1ZGl0aW9uX3Jldmlld3MpKQogICAgQGZvcmVhY2goJGF1ZGl0aW9uX3Jldmlld3MgYXMgJGF1ZGl0aW9uZGF0YSkKICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIGZpcnMtbW9kYWwgYXVkaXRpb25zLW1vZGVsIHJpZ2h0IiBpZD0ibW9kYWwtcmlnaHQte3skYXVkaXRpb25kYXRhLT5hdWRpdGlvbl9pZH19IiB0YWJpbmRleD0iLTEiIHJvbGU9ImRpYWxvZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyIgcm9sZT0iZG9jdW1lbnQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImNsb3NlIiBkYXRhLWRpc21pc3M9Im1vZGFsIiBhcmlhLWxhYmVsPSJDbG9zZSI+PGltZyBzcmM9Ii9wbGF0Zm9ybS9pbWcvY2xvc2UucG5nIiBjbGFzcz0iaW1nLWZsdWlkIHBhdXNlLXZpZGVvIj48L2E+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmlycy1zbm93LWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aWRlb3MtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkYXVkaXRpb25kYXRhLT52aWRlb190eXBlID09ICdmaWxlJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoIWVtcHR5KCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3KSAmJiAkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+cmV2aWV3X3VybCAhPSIiICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZpZGVvIGlkPSJ2aWRlby17eyRhdWRpdGlvbmRhdGEtPmlkfX0iIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjMwMSIgY29udHJvbHMgY2xhc3M9InZpZGVvLXBhdXNlIHJhZGl1cy0yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0ie3tlbnYoJ1VTRVJfUExBVEZPUk1fTElOSycpfX0vcmV2aWV3cy9jb21wbGV0ZWQve3skYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+cmV2aWV3X3VybH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IEhUTUw1IHZpZGVvLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZpZGVvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2aWRlbyBpZD0idmlkZW8te3skYXVkaXRpb25kYXRhLT5pZH19IiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIzMDEiIGNvbnRyb2xzIGNsYXNzPSJ2aWRlby1wYXVzZSByYWRpdXMtMjAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9Int7YXNzZXQoJ3VwbG9hZHMvYXVkaXRpb25zJyl9fS97eyRhdWRpdGlvbmRhdGEtPnZpZGVvX2xpbmt9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBIVE1MNSB2aWRlby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92aWRlbz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoc3RycG9zKCRhdWRpdGlvbmRhdGEtPnZpZGVvX2xpbmssICd5b3V0dWJlJykgIT09IGZhbHNlKQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHBocAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcXVlcnkgPSIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFydHMgPSBwYXJzZV91cmwoJGF1ZGl0aW9uZGF0YS0+dmlkZW9fbGluayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFycmF5X2tleV9leGlzdHMoJ3F1ZXJ5JywkcGFydHMpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlX3N0cigkcGFydHNbJ3F1ZXJ5J10sICRxdWVyeSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdmlkZW9JRCA9ICRxdWVyeVsndiddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHlvdXR1YmV1cmwgPSAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvIi4kdmlkZW9JRDsgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHlvdXR1YmV1cmwgPSAkYXVkaXRpb25kYXRhLT52aWRlb19saW5rOyAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZHBocAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWZyYW1lIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjMwMSIgc3JjPSJ7eyR5b3V0dWJldXJsfX0iIGZyYW1lYm9yZGVyPSIwIiBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRhdWRpdGlvbmRhdGEtPnRodW1ibmFpbCAhPScnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0idmlkZW8tdGh1bWIiIGRhdGEtdmlkZW9pZD0iYWxsLXZpZGVvLXt7JGF1ZGl0aW9uZGF0YS0+aWR9fSIgc3JjPSJ7eyRhdWRpdGlvbmRhdGEtPnRodW1ibmFpbH19IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWZyYW1lIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjMwMSIgc3JjPSJ7eyRhdWRpdGlvbmRhdGEtPnZpZGVvX2xpbmt9fSIgZnJhbWVib3JkZXI9IjAiIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8aDM+QGlmKCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9uKXt7JGF1ZGl0aW9uZGF0YS0+YXVkaXRpb24tPmF1ZGl0aW9uX25hbWV9fUBlbmRpZjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxldmVsIj5MZXZlbDogCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb24gJiYgJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb24tPmxldmVsID09IDMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWR2YW5jZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlaWYoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb24gJiYgJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb24tPmxldmVsID09IDIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW50ZXJtZWRpYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJlZ2lubmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InVwZGF0ZWQiPlVwbG9hZGVkIG9uIAogICAgICAgICAgICAgICAgICAgICAgICBAcGhwCiAgICAgICAgICAgICAgICAgICAgICAgICRkYXRlID0gbmV3IFxDYXJib25cQ2FyYm9uKCRhdWRpdGlvbmRhdGEtPmNyZWF0ZWRfYXQpOwogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICRkYXRlLT5mb3JtYXQoIm0uZC5ZIGc6aSBBIik7CiAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRwaHAKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IiBpZD0ibXlUYWIiIHJvbGU9InRhYmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGFjdGl2ZSIgaWQ9Im92ZXJ2aWV3LXRhYi17eyRhdWRpdGlvbmRhdGEtPmlkfX0iIGRhdGEtdG9nZ2xlPSJ0YWIiIGhyZWY9IiNvdmVydmlldy17eyRhdWRpdGlvbmRhdGEtPmlkfX0iIHJvbGU9InRhYiIgYXJpYS1jb250cm9scz0ib3ZlcnZpZXciIGFyaWEtc2VsZWN0ZWQ9InRydWUiPk92ZXJ2aWV3PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaWQ9InRlY2huaXF1ZS10YWIte3skYXVkaXRpb25kYXRhLT5pZH19IiBkYXRhLXRvZ2dsZT0idGFiIiBocmVmPSIjdGVjaG5pcXVlLXt7JGF1ZGl0aW9uZGF0YS0+aWR9fSIgcm9sZT0idGFiIiBhcmlhLWNvbnRyb2xzPSJ0ZWNobmlxdWUiIGFyaWEtc2VsZWN0ZWQ9ImZhbHNlIj5TY29yZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItY29udGVudCIgaWQ9Im5hdi10YWJDb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgc2hvdyBhY3RpdmUiIGlkPSJvdmVydmlldy17eyRhdWRpdGlvbmRhdGEtPmlkfX0iIHJvbGU9InRhYnBhbmVsIiBhcmlhLWxhYmVsbGVkYnk9Im92ZXJ2aWV3LXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3ICE9JycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBwaHAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvdmVyYWxscmF0aW5nID0gKCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5wZXJmb3JtYW5jZV9xdWFsaXR5X3JhdGluZyArICRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT50ZWNobmljYWxfYWJpbGl0eV9yYXRpbmcgKyAkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+ZW5lcmd5X3N0eWxlX3JhdGluZyArICRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5zdG9yeXRlbGxpbmdfcmF0aW5nICsgJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPmxvb2tfYXBwZWFyYW5jZV9yYXRpbmcpIC8gNTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhdmdSYXRpbmcgPSBudW1iZXJfZm9ybWF0KCRvdmVyYWxscmF0aW5nLDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZHBocAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZyBvdmVyYWwtcmF0aW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC10ZXh0Ij57eyRhdmdSYXRpbmd9fTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1zdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkYXZnUmF0aW5nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IgKCRpID0gMTsgJGkgPD0gJGF2Z1JhdGluZzsgJGkrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IoJGF2Z1JhdGluZzskYXZnUmF0aW5nPDU7JGF2Z1JhdGluZysrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JleS1zdGFyIj48aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvdmVyYWwiPk92ZXJhbCBSYXRpbmc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldyAhPScnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND5Ob3RlczwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+eyEhICRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5mZWVkYmFjayAhIX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIHN0eWxlPSJwYWRkaW5nLWJvdHRvbToyNTBweDsiPldlIGFyZSBzdGlsbCByZXZpZXdpbmcgeW91ciB2aWRlbyBQbGVhc2Ugd2FpdC48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWItcGFuZSBmYWRlIiBpZD0idGVjaG5pcXVlLXt7JGF1ZGl0aW9uZGF0YS0+aWR9fSIgcm9sZT0idGFicGFuZWwiIGFyaWEtbGFiZWxsZWRieT0idGVjaG5pcXVlLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3ICE9JycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWItbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnBlcmZvcm1hbmNlX3F1YWxpdHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+UGVyZm9ybWFuY2UgUXVhbGl0eTwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnshISAkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+cGVyZm9ybWFuY2VfcXVhbGl0eSAhIX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtdGV4dCI+e3tudW1iZXJfZm9ybWF0KCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5wZXJmb3JtYW5jZV9xdWFsaXR5X3JhdGluZywgMSl9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnBlcmZvcm1hbmNlX3F1YWxpdHlfcmF0aW5nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IgKCRpID0gMTsgJGkgPD0gJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnBlcmZvcm1hbmNlX3F1YWxpdHlfcmF0aW5nOyAkaSsrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGZvcigkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+cGVyZm9ybWFuY2VfcXVhbGl0eV9yYXRpbmc7JGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnBlcmZvcm1hbmNlX3F1YWxpdHlfcmF0aW5nPDU7JGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnBlcmZvcm1hbmNlX3F1YWxpdHlfcmF0aW5nKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJncmV5LXN0YXIiPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+dGVjaG5pY2FsX2FiaWxpdHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+VGVjaG5pY2FsIEFiaWxpdHk8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57ISEgJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnRlY2huaWNhbF9hYmlsaXR5ICEhfTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC10ZXh0Ij57e251bWJlcl9mb3JtYXQoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnRlY2huaWNhbF9hYmlsaXR5X3JhdGluZywgMSl9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnRlY2huaWNhbF9hYmlsaXR5X3JhdGluZykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9yICgkaSA9IDE7ICRpIDw9ICRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT50ZWNobmljYWxfYWJpbGl0eV9yYXRpbmc7ICRpKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9yKCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT50ZWNobmljYWxfYWJpbGl0eV9yYXRpbmc7JGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnRlY2huaWNhbF9hYmlsaXR5X3JhdGluZzw1OyRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT50ZWNobmljYWxfYWJpbGl0eV9yYXRpbmcrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdyZXktc3RhciI+PGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5lbmVyZ3lfc3R5bGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+RW5lcmd5L1N0eWxlPC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+eyEhICRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5lbmVyZ3lfc3R5bGUgISF9PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0LXRleHQiPnt7bnVtYmVyX2Zvcm1hdCgkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+ZW5lcmd5X3N0eWxlX3JhdGluZywxKX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+ZW5lcmd5X3N0eWxlX3JhdGluZykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9yICgkaSA9IDE7ICRpIDw9ICRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5lbmVyZ3lfc3R5bGVfcmF0aW5nOyAkaSsrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGZvcigkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+ZW5lcmd5X3N0eWxlX3JhdGluZzskYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+ZW5lcmd5X3N0eWxlX3JhdGluZzw1OyRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5lbmVyZ3lfc3R5bGVfcmF0aW5nKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJncmV5LXN0YXIiPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+c3Rvcnl0ZWxsaW5nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LWxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0PlN0b3J5dGVsbGluZzwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnshISAkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+c3Rvcnl0ZWxsaW5nICEhfTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC10ZXh0Ij57e251bWJlcl9mb3JtYXQoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnN0b3J5dGVsbGluZ19yYXRpbmcsMSl9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnN0b3J5dGVsbGluZ19yYXRpbmcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGZvciAoJGkgPSAxOyAkaSA8PSAkYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+c3Rvcnl0ZWxsaW5nX3JhdGluZzsgJGkrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnN0b3J5dGVsbGluZ19yYXRpbmc7JGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPnN0b3J5dGVsbGluZ19yYXRpbmc8NTskYXVkaXRpb25kYXRhLT5hdWRpdGlvbnJldmlld25ldy0+c3Rvcnl0ZWxsaW5nX3JhdGluZysrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JleS1zdGFyIj48aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPmxvb2tfYXBwZWFyYW5jZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0LWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND5Mb29rL0FwcGVhcmFuY2U8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57ISEgJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPmxvb2tfYXBwZWFyYW5jZSAhIX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtdGV4dCI+e3tudW1iZXJfZm9ybWF0KCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5sb29rX2FwcGVhcmFuY2VfcmF0aW5nLDEpfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5sb29rX2FwcGVhcmFuY2VfcmF0aW5nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IgKCRpID0gMTsgJGkgPD0gJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPmxvb2tfYXBwZWFyYW5jZV9yYXRpbmc7ICRpKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9yKCRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5sb29rX2FwcGVhcmFuY2VfcmF0aW5nOyRhdWRpdGlvbmRhdGEtPmF1ZGl0aW9ucmV2aWV3bmV3LT5sb29rX2FwcGVhcmFuY2VfcmF0aW5nPDU7JGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25yZXZpZXduZXctPmxvb2tfYXBwZWFyYW5jZV9yYXRpbmcrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdyZXktc3RhciI+PGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBzdHlsZT0icGFkZGluZy1ib3R0b206MjUwcHg7Ij5XZSBhcmUgc3RpbGwgcmV2aWV3aW5nIHlvdXIgdmlkZW8gUGxlYXNlIHdhaXQuPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIEBlbmRmb3JlYWNoCkBlbmRpZgpAZW5kc2VjdGlvbiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";