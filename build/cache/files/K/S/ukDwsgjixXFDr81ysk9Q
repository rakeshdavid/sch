1665722086
waR3U4bTeM%3Ae6c6583e10bcc9c6232d75a18c415dca-3c2deda832cb344cc83a544b73f170e3
s:19292:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjNjMmRlZGE4MzJjYjM0NGNjODNhNTQ0YjczZjE3MGUzIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTY6InNlYXJjaC5ibGFkZS5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czozMjoicmVzb3VyY2VzL3ZpZXdzL3NlYXJjaC5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjEzNjYyOiJAZXh0ZW5kcygnbGF5b3V0cy5hcHAnKQpAc2VjdGlvbignY3NzJykKICAgIDxsaW5rIHR5cGU9InRleHQvY3NzIiByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9hc3NldHMvanMvc3dlZXRhbGVydC9zd2VldC1hbGVydC5jc3MiPgogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KICAgICAgICAudmlkZW9XcmFwcGVyIHsKICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNTYuMjUlOyAvKiAxNjo5ICovCiAgICAgICAgICAgIHBhZGRpbmctdG9wOiAyNXB4OwogICAgICAgICAgICBoZWlnaHQ6IDA7CiAgICAgICAgfQoKICAgICAgICAudmlkZW9XcmFwcGVyIGlmcmFtZSB7CiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgdG9wOiAwOwogICAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIH0KCiAgICAgICAgLmNvbG9yLWdyYXkgewogICAgICAgICAgICBjb2xvcjogIzgxODE5MCAhaW1wb3J0YW50OwogICAgICAgIH0KICAgIDwvc3R5bGU+CkBlbmRzZWN0aW9uCgpAc2VjdGlvbignY29udGVudCcpCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdi10YWJzIG5hdi1hbmltYXRlZC1ib3JkZXItZnJvbS1yaWdodCI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIHt7ICRzaG93ID09ICdteXJldmlld3MnID8gJycgOiAnYWN0aXZlJyB9fSIKICAgICAgICAgICAgICAgICAgIGhyZWY9Int7ICRzaG93ID09ICdteXJldmlld3MnID8gdXJsKCcvbXlyZXZpZXdzJykgOiAnamF2YXNjcmlwdDp2b2lkKDApOyd9fSI+CiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWNlbnRlciBmLXctNDAwIj5OZXcgc3VibWlzc2lvbnM8L2gxPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayB7eyAkc2hvdyAhPSAnbXlyZXZpZXdzJyA/ICcnIDogJ2FjdGl2ZScgfX0iCiAgICAgICAgICAgICAgICAgICBocmVmPSJ7eyAkc2hvdyAhPSAnbXlyZXZpZXdzJyA/IHVybCgnL215cmV2aWV3cz9zaG93PW15cmV2aWV3cycpIDogJ2phdmFzY3JpcHQ6dm9pZCgwKTsnfX0iPgogICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1jZW50ZXIgZi13LTQwMCI+TXkgcmV2aWV3czwvaDE+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgPC91bD4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbS10LTIwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgIEBpZighY291bnQoJHZpZGVvcykgJiYgJHNlYXJjaF90ZXh0KQogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idGV4dC1jZW50ZXIgZi13LTQwMCBtLXQtMjAiPlNvcnJ5LCBubyByZXN1bHRzIHdlcmUgZm91bmQuPC9oMj4KICAgICAgICAgICAgICAgIEBlbHNlaWYoIWNvdW50KCR2aWRlb3MpICYmICFjb3VudCgkY2hhbGxlbmdlVmlkZW8pKQogICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idGV4dC1jZW50ZXIgZi13LTQwMCBtLXQtMjAiPkxpc3QgaXMgZW1wdHkuPC9oMj4KICAgICAgICAgICAgICAgIEBlbmRpZgoKICAgICAgICAgICAgICAgIEBmb3JlYWNoKCR2aWRlb3MgYXMgJHZpZGVvKQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLWItMjAgcC10LTE1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC03Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyIgaWQ9InZpZGVvX197eyAkdmlkZW8tPmlkIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ1cHBlcmNhc2UgZi1zLTI4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Int7IHVybCgnL3Byb2ZpbGUvJy4kdmlkZW8tPnVzZXItPmlkKSB9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgJHZpZGVvLT51c2VyLT5maXJzdF9uYW1lIC4gIiAiIC4gJHZpZGVvLT51c2VyLT5sYXN0X25hbWUgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMCBjb2wtbWQtMiI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC0xMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1cHBlcmNhc2UgZi1zLTE2IGNvbG9yLWdyYXkiPlZpZGVvIG5hbWU6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyAkdmlkZW8tPm5hbWUgfX08L3NwYW4+IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVwcGVyY2FzZSBmLXMtMTYgY29sb3ItZ3JheSI+TGV2ZWw6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyAkdmlkZW8tPnBlcmZvcm1hbmNlX2xldmVsLT5uYW1lIH19PC9zcGFuPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7LS08c3BhbiBjbGFzcz0idXBwZXJjYXNlIGYtcy0xNiBjb2xvci1ncmF5Ij5HZW5yZXM6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyBpbXBsb2RlKCcsICcsICR2aWRlby0+YWN0aXZpdHlfZ2VucmVzLT5saXN0cygnbmFtZScpLT5hbGwoKSkgfX08L3NwYW4+IDxicj4tLX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1cHBlcmNhc2UgZi1zLTE2IGNvbG9yLWdyYXkiPkxvY2F0aW9uOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgJHZpZGVvLT51c2VyLT5sb2NhdGlvbiB9fTwvc3Bhbj4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idXBwZXJjYXNlIGYtcy0xNiBjb2xvci1ncmF5Ij5EYXRlIHN1Ym1pdHRlZDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7IFxDYXJib25cQ2FyYm9uOjpwYXJzZSgkdmlkZW8tPmNyZWF0ZWRfYXQpLT5mb3JtYXQoJ20tZC1ZIEg6aTpzJykgfX08L3NwYW4+IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVwcGVyY2FzZSBmLXMtMTYgY29sb3ItZ3JheSI+VmlkZW8gbGVuZ3RoOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9Imxlbmd0aC17eyAkdmlkZW8tPnVybCB9fSIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48L3NwYW4+IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVwcGVyY2FzZSBmLXMtMTYgY29sb3ItZ3JheSI+UmV2aWV3IHBhY2thZ2U6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkdmlkZW8tPnF1ZXN0aW9ucy0+Y291bnQoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21wIFByZXAgcGtnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF1ZGl0aW9uIFByZXAgcGtnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxociBjbGFzcz0ibS1iLTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idXBwZXJjYXNlIGYtcy0xOCBjb2xvci1kYW5nZXIiPlByb2ZpbGUgc3VtbWFyeTwvc3Bhbj4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57ISEgc3RyX2xpbWl0KCR2aWRlby0+dXNlci0+YWJvdXQsIDM1MCwgIi4uLiIpICEhfTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC01Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC0xMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmlkZW8gd2lkdGg9IjEwMCUiIGhlaWdodD0iMzEwIiBjb250cm9scz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJHNob3cgPT0gJ215cmV2aWV3cycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9Int7dXJsKCcvJykgLiBjb25maWcoJ3ZpZGVvLmNvbXBsZXRlZF9yZXZpZXdfcGF0aCcpIC4gJHZpZGVvLT5yZXZpZXctPnJldmlld191cmx9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0ie3t1cmwoJy8nKSAuIGNvbmZpZygndmlkZW8udXNlcl92aWRlb19wYXRoJykgLiAkdmlkZW8tPnVybH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgSFRNTDUgdmlkZW8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZpZGVvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0wIGNvbC1tZC0yIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC0xMCI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkc2hvdyAhPSAnbXlyZXZpZXdzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjaGVjay1zdHJpcGUgYnRuIGJ0bi13YXJuaW5nLTgwMCBidG4tZmxhdCBtLXQtMTAgY2VudGVyLWJsb2NrIHVwcGVyY2FzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrLXVybD0ie3sgdXJsKCcvcmV2aWV3L2NyZWF0ZS8nLiR2aWRlby0+aWQpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJldmlldyBub3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjaGVjay1zdHJpcGUgYnRuIGJ0bi13YXJuaW5nLTgwMCBidG4tZmxhdCBtLXQtMTAgY2VudGVyLWJsb2NrIHVwcGVyY2FzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrLXVybD0ie3sgdXJsKCcvcmV2aWV3L3Nob3ctbXkvJy4kdmlkZW8tPmlkKSB9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWaWV3IHJldmlldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iY2hlY2stc3RyaXBlIGJ0biBidG4tZGFuZ2VyLTgwMCBidG4tZmxhdCBtLXQtMTAgY2VudGVyLWJsb2NrIHVwcGVyY2FzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrLXVybD0ie3sgdXJsKCcvcmV2aWV3L2NyZWF0ZS8nLiR2aWRlby0+aWQpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVkaXQgcmV2aWV3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTAgY29sLW1kLTIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9Im0tYi01Ij4KICAgICAgICAgICAgICAgIEBlbmRmb3JlYWNoCiAgICAgICAgICAgICAgICA8IS0tIENoYWxsZW5nZSB2aWRlbyAtLT4KICAgICAgICAgICAgICAgIEBmb3JlYWNoKCRjaGFsbGVuZ2VWaWRlbyBhcyAkY3ZpZGVvKQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLWItMjAgcC10LTE1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC03Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyIgaWQ9InZpZGVvX197eyAkY3ZpZGVvLT5pZCB9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idXBwZXJjYXNlIGYtcy0yOCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ7eyB1cmwoJy9wcm9maWxlLycuJGN2aWRlby0+dXNlci0+aWQpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkY3ZpZGVvLT51c2VyLT5maXJzdF9uYW1lIC4gIiAiIC4gJGN2aWRlby0+dXNlci0+bGFzdF9uYW1lIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTAgY29sLW1kLTIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtMTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idXBwZXJjYXNlIGYtcy0xNiBjb2xvci1ncmF5Ij5DaGFsbGVuZ2UgbmFtZTo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkBpZigkY3ZpZGVvLT5jaGFsbGVuZ2VzKXt7ICRjdmlkZW8tPmNoYWxsZW5nZXMtPmNoYWxsZW5nZXNfbmFtZSB9fUBlbmRpZjwvc3Bhbj4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idXBwZXJjYXNlIGYtcy0xNiBjb2xvci1ncmF5Ij5Mb2NhdGlvbjo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7ICRjdmlkZW8tPnVzZXItPmxvY2F0aW9uIH19PC9zcGFuPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1cHBlcmNhc2UgZi1zLTE2IGNvbG9yLWdyYXkiPkRhdGUgc3VibWl0dGVkOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgXENhcmJvblxDYXJib246OnBhcnNlKCRjdmlkZW8tPmNyZWF0ZWRfYXQpLT5mb3JtYXQoJ20tZC1ZIEg6aTpzJykgfX08L3NwYW4+IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVwcGVyY2FzZSBmLXMtMTYgY29sb3ItZ3JheSI+VmlkZW8gbGVuZ3RoOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9Imxlbmd0aC17eyAkY3ZpZGVvLT51cmwgfX0iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9zcGFuPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxociBjbGFzcz0ibS1iLTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idXBwZXJjYXNlIGYtcy0xOCBjb2xvci1kYW5nZXIiPlByb2ZpbGUgc3VtbWFyeTwvc3Bhbj4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57ISEgc3RyX2xpbWl0KCRjdmlkZW8tPnVzZXItPmFib3V0LCAzNTAsICIuLi4iKSAhIX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtMTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZpZGVvIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjMxMCIgY29udHJvbHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRzaG93ID09ICdteXJldmlld3MnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3JjPSJ7e3VybCgnLycpIC4gY29uZmlnKCd2aWRlby5jaGFsbGVuZ2VfdmlkZW9fcGF0aCcpIC4gJGN2aWRlby0+cmV2aWV3LT5yZXZpZXdfdXJsfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9Int7dXJsKCcvJykgLiBjb25maWcoJ3ZpZGVvLmNoYWxsZW5nZV92aWRlb19wYXRoJykgLiAkY3ZpZGVvLT52aWRlb19saW5rfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBIVE1MNSB2aWRlby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmlkZW8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTAgY29sLW1kLTIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTEwIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRzaG93ICE9ICdteXJldmlld3MnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNoZWNrLXN0cmlwZSBidG4gYnRuLXdhcm5pbmctODAwIGJ0bi1mbGF0IG0tdC0xMCBjZW50ZXItYmxvY2sgdXBwZXJjYXNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2stdXJsPSJ7eyB1cmwoJy9jaGFsbGVuZ2UtcmV2aWV3LycuJGN2aWRlby0+aWQpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJldmlldyBub3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjaGVjay1zdHJpcGUgYnRuIGJ0bi13YXJuaW5nLTgwMCBidG4tZmxhdCBtLXQtMTAgY2VudGVyLWJsb2NrIHVwcGVyY2FzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrLXVybD0ie3sgdXJsKCcvY2hhbGxlbmdlLXJldmlldy1lZGl0LycuJGN2aWRlby0+aWQpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgcmV2aWV3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjaGVjay1zdHJpcGUgYnRuIGJ0bi1kYW5nZXItODAwIGJ0bi1mbGF0IG0tdC0xMCBjZW50ZXItYmxvY2sgdXBwZXJjYXNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2stdXJsPSJ7eyB1cmwoJy9jaGFsbGVuZ2UtcmV2aWV3LWVkaXQvJy4kY3ZpZGVvLT5pZCkgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRWRpdCByZXZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMCBjb2wtbWQtMiI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxociBjbGFzcz0ibS1iLTUiPgogICAgICAgICAgICAgICAgQGVuZGZvcmVhY2gKICAgICAgICAgICAgICAgIDwhLS0gQ2hhbGxlbmdlIHZpZGVvIGVuZCAtLT4KICAgICAgICAgICAgICAgICAgICBAcGhwCiAgICAgICAgICAgICAgICAgICAgICAgICRzaG93ID0gKCBpc3NldCgkX0dFVFsnc2hvdyddKSApID8gJF9HRVRbJ3Nob3cnXSA6ICcnOwogICAgICAgICAgICAgICAgICAgIEBlbmRwaHAKICAgICAgICAgICAgICAgIEBpbmNsdWRlKCdwYWdpbmF0aW9uLmRlZmF1bHQnLCBbJ3BhZ2luYXRvcicgPT4gJHZpZGVvcy0+YXBwZW5kcyggWydzaG93JyA9PiAkc2hvdyAsJ3NlYXJjaCcgPT4gJHNlYXJjaF90ZXh0XSldKQoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KQGVuZHNlY3Rpb24KCkBzZWN0aW9uKCdqcycpCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvYXNzZXRzL2pzL3N3ZWV0YWxlcnQvc3dlZXQtYWxlcnQubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiAgICAgICAgZnVuY3Rpb24gY2hlY2tTdHJpcGVFdmVudCgpIHsKCiAgICAgICAgICAgICQoJy5jaGVjay1zdHJpcGUnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgdmFyIHRoYXQgPSAkKHRoaXMpOwogICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhOwogICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCJfdG9rZW4iLCAie3sgY3NyZl90b2tlbigpIH19Iik7CiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoInVzZXJfaWQiLCAie3skdXNlci0+aWR9fSIpOwoKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiAiL2NoZWNrU3RyaXBlQ29ubmVjdCIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsCiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5jaGVjay1zdHJpcGUnKS5vZmYoJ2NsaWNrJyk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdHJpcGVfY29ubmVjdCAhPSAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhhdC5hdHRyKCdvbmNsaWNrLXVybCcpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dhbCgiRXJyb3IhIiwgIlBsZWFzZSBjb25uZWN0IHRvIHNob3djYXNlLWh1YiBzdHJpcGUgcGxhdGZvcm0gaW4geW91ciBwcm9maWxlIGFjY291bnQgc2V0dGluZ3MhIiwgImVycm9yIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tTdHJpcGVFdmVudCgpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgiT29wcyBzb21ldGhpbmcgaGFwcGVucy4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrU3RyaXBlRXZlbnQoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgfSkKICAgICAgICB9CiAgICAgICAgY2hlY2tTdHJpcGVFdmVudCgpOwoKICAgIDwvc2NyaXB0PgpAZW5kc2VjdGlvbgoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";