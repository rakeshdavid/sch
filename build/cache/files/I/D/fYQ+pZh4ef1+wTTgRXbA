1665722086
waR3U4bTeM%3A1e9d6471295475b259fa33f42a3df3f5-6046e30f6bdd9223531e0dd5b7be5010
s:40476:"O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"6046e30f6bdd9223531e0dd5b7be5010";s:39:" phpDocumentor\Reflection\Php\File name";s:16:"create.blade.php";s:39:" phpDocumentor\Reflection\Php\File path";s:52:"resources/views-11-05/admin/coaches/create.blade.php";s:41:" phpDocumentor\Reflection\Php\File source";s:29531:"@extends('layouts.app')
@section('css')
    <link rel="stylesheet" href="/assets/css/select2-v4.0.4.min.css"/>
    <link type="text/css" rel="stylesheet" href="/assets/js/sweetalert/sweet-alert.css">
    <link type="text/css" rel="stylesheet" href="/assets/js/datatables/datatables.min.css">
@endsection
@section('content')
    <div class="row m-b-20">
        <div class="col-xs-12">
            <h3> Create new coach </h3>
            <h4 class="m-b-20 m-t-20">Profile Data</h4>
            <form action="{{ route('admin.coaches.store') }}" method="POST" class="form-horizontal" enctype="multipart/form-data">
                {{ csrf_field() }}
                <div class="form-group row {{ $errors->has('first_name') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="first_name">First name*</label>
                    <div class="col-sm-9">
                        <input type="text" maxlength="254" class="form-control {{ $errors->has('first_name') ? ' form-control-danger' : '' }}" name="first_name" autocomplete="off"
                               value="{{ old('first_name') }}">
                        @if($errors->has('first_name'))
                            <small class="text-danger">{{ $errors->first('first_name') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('last_name') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="last_name">Last name*</label>
                    <div class="col-sm-9">
                        <input type="text" maxlength="254" class="form-control {{ $errors->has('last_name') ? ' form-control-danger' : '' }}" name="last_name" autocomplete="off"
                               value="{{ old('last_name') }}">
                        @if($errors->has('last_name'))
                            <small class="text-danger">{{ $errors->first('last_name') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('title') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="title">Title</label>
                    <div class="col-sm-9">
                        <input type="text" maxlength="254" class="form-control {{ $errors->has('title') ? ' form-control-danger' : '' }}" name="title" autocomplete="off"
                               value="{{ old('title', '') }}">
                        @if($errors->has('title'))
                            <small class="text-danger">{{ $errors->first('title') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('email') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="email">Email*</label>
                    <div class="col-sm-9">
                        <input type="email" maxlength="254" class="form-control {{ $errors->has('email') ? ' form-control-danger' : '' }}" name="email" autocomplete="off"
                               value="{{ old('email') }}">
                        @if($errors->has('email'))
                            <small class="text-danger">{{ $errors->first('email') }}</small>
                        @endif
                    </div>
                </div>

                {{--<div class="form-group row">
                    <label class="col-sm-3 form-control-label" for="title">Activity type/s</label>
                    <div class="col-sm-9">
                        <select class="form-control" name="activity_type[]" id="activity_type" autocomplete="off" multiple="multiple">
                            @if (count($activity_types))
                                @foreach($activity_types as $activity_type)
                                    <option value="{{ $activity_type['id'] }}">
                                        {{ $activity_type['name']}}
                                    </option>
                                @endforeach
                            @endif
                        </select>
                        @if($errors->has('activity_type'))
                            <small class="text-danger">{{ $errors->first('activity_type') }}</small>
                        @endif
                    </div>
                </div>--}}
                <select class="form-control" name="activity_type" style="display: none"> {{--crunch--}}
                    <option value="1" selected>
                        Dance
                    </option>
                </select>

                <div class="form-group row">
                    <label class="col-sm-3 form-control-label" for="title">Genre/s</label>
                    <div class="col-sm-9">
                        <select class="form-control" name="genres[]" id="activity_type_genres"
                                autocomplete="off" multiple="multiple"></select>
                        @if($errors->has('genres'))
                            <small class="text-danger">{{ $errors->first('genres') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('location') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="location">City</label>
                    <div class="col-sm-9">
                        <input type="text" maxlength="254" class="form-control {{ $errors->has('location') ? ' form-control-danger' : '' }}" name="location" autocomplete="off"
                               value="{{ old('location', '') }}">
                        @if($errors->has('location'))
                            <small class="text-danger">{{ $errors->first('location') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('location_state') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="location_state">State</label>
                    <div class="col-sm-9">
                        <input type="text" maxlength="254" class="form-control {{ $errors->has('location_state') ? ' form-control-danger' : '' }}" name="location_state" autocomplete="off"
                               value="{{ old('location_state', '') }}">
                        @if($errors->has('location_state'))
                            <small class="text-danger">{{ $errors->first('location_state') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row @if($errors->has('profile_photo'))has-danger @endif">
                    <label class="col-sm-3 form-control-label">Upload Profile Photo</label>
                    <div class="col-sm-9 m-t-5">
                        <div class="input-group m-b-10">
                            <label class="input-group-btn">
                                <span class="btn btn-primary">
                                Upload file (jpg, png, gif)
                                    <input type="file" name="profile_photo" accept="image/jpeg,image/png,image/gif"
                                           id="avatar_upload" style="display: none;">
                                </span>
                            </label>
                            <input type="text" class="form-control @if($errors->has('profile_photo'))form-control-danger @endif" readonly="">
                        </div>
                        @if($errors->has('profile_photo'))
                            <small class="text-danger">{{ $errors->first('profile_photo') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('overview') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="contact_email">Overview</label>
                    <div class="col-sm-9">
                        <textarea type="text" class="form-control {{ $errors->has('overview') ? ' form-control-danger' : '' }}"
                                  rows="5" name="overview" autocomplete="off">{{ old('overview', '') }}</textarea>
                        @if($errors->has('overview'))
                            <small class="text-danger">{{ $errors->first('overview') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('certifications') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="location_state">Certifications</label>
                    <div class="col-sm-9">
                        <input type="text" maxlength="254" class="form-control {{ $errors->has('certifications') ? ' form-control-danger' : '' }}"
                               name="certifications" autocomplete="off" value="{{ old('certifications', '') }}" data-toggle="tooltip"
                               data-placement="top" data-original-title="For separate Certifications use &quot;;&quot;">
                        @if($errors->has('certifications'))
                            <small class="text-danger">{{ $errors->first('certifications') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('teaching_positions') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="location_state">Teaching Positions</label>
                    <div class="col-sm-9">
                        <input type="text" maxlength="254" class="form-control {{ $errors->has('teaching_positions') ? ' form-control-danger' : '' }}"
                               name="teaching_positions" autocomplete="off" value="{{ old('teaching_positions', '') }}" checked
                               data-toggle="tooltip" data-placement="top" data-original-title="For separate Teaching Positions use &quot;;&quot;">
                        @if($errors->has('teaching_positions'))
                            <small class="text-danger">{{ $errors->first('teaching_positions') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('performance_credits') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="location_state">Performance Credits</label>
                    <div class="col-sm-9">
                        <input type="text" maxlength="254" class="form-control {{ $errors->has('performance_credits') ? ' form-control-danger' : '' }}"
                               name="performance_credits" autocomplete="off" value="{{ old('performance_credits', '') }}"
                               data-toggle="tooltip" data-placement="top" data-original-title="For separate Performance Credits use &quot;;&quot;">
                        @if($errors->has('performance_credits'))
                            <small class="text-danger">{{ $errors->first('performance_credits') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row">
                    <label class="col-sm-3 form-control-label">Gives feedback to</label>
                    <div class="col-sm-9 m-t-5">
                        @foreach($perfomance_levels as $level)
                            <label class="c-input c-checkbox">
                                <input type="checkbox" name="performance_levels[{{ $level['id'] }}]"
                                       @if(isset(old('performance_levels')[$level['id']])) checked="checked" @endif
                                       value="{{ $level['id'] }}">
                                <span class="c-indicator c-indicator-warning"></span>
                                {{ $level['name'] }}
                            </label>
                        @endforeach
                    </div>
                </div>

                <div class="form-group row @foreach(range(0, 10) as $index) @if($errors->has('gallery_photos.' . $index))has-danger @break @endif @endforeach">
                    <label class="col-sm-3 form-control-label">Upload Gallery Images</label>
                    <div class="col-sm-9 m-t-5">
                        <div class="input-group m-b-10">
                            <label class="input-group-btn">
                                    <span class="btn btn-primary">
                                    Upload files
                                        <input type="file" name="gallery_photos[]" multiple="multiple"
                                               accept="image/jpeg,image/png,image/gif" id="gallery_photos" style="display: none;">
                                    </span>
                            </label>
                            <input type="text" class="form-control  @foreach(range(0, 10) as $index) @if($errors->has('gallery_photos.' . $index))form-control-danger @break @endif @endforeach" readonly="">
                        </div>
                        @foreach(range(0, 10) as $index)
                            @if($errors->has('gallery_photos.' . $index))
                                <small class="text-danger">{{ $errors->first('gallery_photos.' . $index) }}</small>
                                @break
                            @endif
                        @endforeach
                    </div>
                </div>
                <div class="form-group row @foreach(range(0, 10) as $index) @if($errors->has('documents.' . $index))has-danger @break @endif @endforeach">
                    <label class="col-sm-3 form-control-label">Upload PDF Documents</label>
                    <div class="col-sm-9 m-t-5">
                        <div class="input-group m-b-10">
                            <label class="input-group-btn">
                                <span class="btn btn-primary">
                                Upload files
                                    <input type="file" name="documents[]" multiple="multiple" accept="application/pdf" id="document_upload" style="display: none;">
                                </span>
                            </label>
                            <input type="text" class="form-control  @foreach(range(0, 10) as $index) @if($errors->has('documents.' . $index))form-control-danger @break @endif @endforeach" readonly="">
                        </div>
                        @foreach(range(0, 10) as $index)
                            @if($errors->has('documents.' . $index))
                                <small class="text-danger">{{ $errors->first('documents.' . $index) }}</small>
                                @break
                            @endif
                        @endforeach
                    </div>
                </div>
                <div class="form-group row @foreach(range(0, 10) as $index) @if($errors->has('video') || $errors->has('gallery_video.' . $index))has-danger @break @endif @endforeach">
                    <label class="col-sm-3 form-control-label">Upload Gallery Video</label>
                    <div class="col-sm-9 m-t-5">
                        <input type="text" class="form-control m-b-15 {{ $errors->has('video') ? ' form-control-danger' : '' }}"
                               name="video" autocomplete="off" placeholder="Youtube video url" value="{{ old('video', '') }}">
                        @if($errors->has('video'))
                            <small class="text-danger m-b-20">{{ $errors->first('video') }}</small>
                        @endif
                        <div id="upload_container_video">
                            <div class="input-group m-b-10">
                                <label class="input-group-btn">
                                    <span class="btn btn-primary">
                                    Upload video
                                        <input type="file" name="gallery_video" accept="video/avi,video/mpeg4,video/wmv,video/mp4"
                                               id="gallery_video" style="display: none;">
                                    </span>
                                </label>
                                <input type="text" class="form-control  @if($errors->has('gallery_video'))form-control-danger @endif " readonly="">
                            </div>
                        </div>
                        @if($errors->has('gallery_video'))
                            <small class="text-danger">{{ $errors->first('gallery_video') }}</small>
                        @endif
                    </div>
                </div>

                <h4 class="m-b-20">Contact</h4>

                <div class="form-group row {{ $errors->has('contact_email') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="contact_email">Contact email</label>
                    <div class="col-sm-9">
                        <input type="email" maxlength="254" class="form-control {{ $errors->has('contact_email') ? ' form-control-danger' : '' }}" name="contact_email" autocomplete="off"
                               value="{{ old('contact_email', '') }}">
                        @if($errors->has('contact_email'))
                            <small class="text-danger">{{ $errors->first('contact_email') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('phone') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label">Phone</label>
                    <div class="col-sm-9">
                        <input type="text" class="form-control" name="phone" autocomplete="off"
                               value="{{ old('phone', '') }}">
                        @if($errors->has('phone'))
                            <small class="text-danger">{{ $errors->first('phone') }}</small>
                        @endif
                    </div>
                </div>
                <div class="form-group row {{ $errors->has('wevsites') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label">Website</label>
                    <div class="col-sm-9">
                        <input type="text" class="form-control {{ $errors->has('wevsites') ? ' form-control-danger' : '' }}"
                               name="wevsites" autocomplete="off" value="{{ old('wevsites', '') }}">
                        @if($errors->has('wevsites'))
                            <small class="text-danger">{{ $errors->first('wevsites') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('social_links') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="social_links">Social links</label>
                    <div class="col-sm-9">
                        <input type="text" class="form-control {{ $errors->has('social_links') ? ' form-control-danger' : '' }}"
                               name="social_links" value="{{ old('social_links', '') }}">
                        @if($errors->has('social_links'))
                            <small class="text-danger">{{ $errors->first('social_links') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('other_site_spec') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="other_site_spec">Other Blog sites</label>
                    <div class="col-sm-9">
                        <input type="text" class="form-control {{ $errors->has('other_site_spec') ? ' form-control-danger' : '' }}"
                               name="other_site_spec" value="{{ old('other_site_spec', '') }}" autocomplete="off">
                        @if($errors->has('other_site_spec'))
                            <small class="text-danger">{{ $errors->first('other_site_spec') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('coachs_site') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label" for="coachs_site">Links to Coach's site</label>
                    <div class="col-sm-9">
                        <input type="text" class="form-control {{ $errors->has('coachs_site') ? ' form-control-danger' : '' }}"
                               name="coachs_site" value="{{ old('coachs_site', '') }}" autocomplete="off">
                        @if($errors->has('coachs_site'))
                            <small class="text-danger">{{ $errors->first('coachs_site') }}</small>
                        @endif
                    </div>
                </div>

                <h4 class="m-b-20">Vacation time</h4>
                <div class="form-group row {{ $errors->has('vacation_start') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label">Start date</label>
                    <div class="col-sm-9">
                        <input id="vacation_start" type="text" class="form-control {{ $errors->has('vacation_start') ? ' form-control-danger' : '' }}"
                               name="vacation_start" autocomplete="off"
                               value="{{ ( old('vacation_start') != '0000-00-00') ? old('vacation_start', '') : '' }}">
                        @if($errors->has('vacation_start'))
                            <small class="text-danger">{{ $errors->first('vacation_start') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('vacation_end') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label">End Date</label>
                    <div class="col-sm-9">
                        <input id="vacation_end" type="text" class="form-control {{ $errors->has('vacation_end') ? ' form-control-danger' : '' }}"
                               name="vacation_end" autocomplete="off"
                               value="{{ ( old('vacation_end') != '0000-00-00') ? old('vacation_end', '') : '' }}">
                        @if($errors->has('vacation_end'))
                            <small class="text-danger">{{ $errors->first('vacation_end') }}</small>
                        @endif
                    </div>
                </div>

                <h4 class="m-b-20">Pricing</h4>
                <div class="form-group row {{ $errors->has('price_summary') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label">Summary package</label>
                    <div class="col-sm-9">
                        <input id="vacation_start" type="text" class="form-control {{ $errors->has('price_summary') ? ' form-control-danger' : '' }}"
                               name="price_summary" autocomplete="off"
                               value="{{ ( old('price_summary') != 0) ? old('price_summary', '') : '' }}">
                        @if($errors->has('price_summary'))
                            <small class="text-danger">{{ $errors->first('price_summary') }}</small>
                        @endif
                    </div>
                </div>

                <div class="form-group row {{ $errors->has('price_detailed') ? ' has-danger' : '' }}">
                    <label class="col-sm-3 form-control-label">Detailed package</label>
                    <div class="col-sm-9">
                        <input id="vacation_end" type="text" class="form-control {{ $errors->has('price_detailed') ? ' form-control-danger' : '' }}"
                               name="price_detailed" autocomplete="off"
                               value="{{ ( old('price_detailed') != 0) ? old('price_detailed', '') : '' }}">
                        @if($errors->has('price_detailed'))
                            <small class="text-danger">{{ $errors->first('price_detailed') }}</small>
                        @endif
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-offset-3 col-sm-9">
                        <button type="submit" class="btn btn-warning m-r-10 m-b-10">
                            <i class="btn-icon fa fa-check"></i>Create
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
@endsection

@section('js')
    <script src="/assets/js/select2-v4.0.4.full.min.js"></script>
    <script src="/vendor/jildertmiedema/laravel-plupload/js/plupload.full.min.js"></script>
    <script type="text/javascript">
        var user_genres = {{ $activity_types[0]['id'] }};

        $(document).ready(function() {
            /*$('#activity_type').val([{{ old('activity_type') ? old('activity_type') : '' }}]).select2({
                placeholder: "Select activity type/s",
                multiple: true
            }).on("change", function () {
                $.ajax({
                    url: '{{ route('get-genres') }}',
                    type: 'POST',
                    data: {activityTypesIds: $(this).val()},
                    dataType: 'JSON',
                    success: function (res) {
                        //var $genres = result;
                        $('#activity_type_genres').select2('destroy').empty().select2({
                            placeholder: "Select genre/s",
                            multiple: true,
                            data: res,
                            processResults: function (result) {
                                return {
                                    results: $.map(result, function(obj) {
                                        return { id: obj.id, text: obj.name };
                                    })
                                };
                            }
                        });
                    },
                    error: function (z,x,v) {

                    }
                });
            });
            */
            $('#activity_type_genres').select2({
                placeholder: "Select genre/s",
                multiple: true
            });

            //crunch
            $.ajax({
                url: '{{ route('get-genres') }}',
                type: 'POST',
                data: {activityTypesIds: user_genres},
                dataType: 'JSON',
                success: function (res) {
                    //var $genres = result;
                    $('#activity_type_genres').select2({
                        placeholder: "Select genre/s",
                        multiple: true,
                        data: res,
                        processResults: function (result) {
                            return {
                                results: $.map(result, function(obj) {
                                    return { id: obj.id, text: obj.name };
                                })
                            };
                        }
                    });
                },
                error: function (z,x,v) {
                }
            });
        });

        var popups = [
            $('#document_upload'),
            $('#avatar_upload'),
            $('#gallery_photos'),
            $('#gallery_video')
        ];

        $.each(popups, function (key,val) {
            $(function () {
                // We can attach the `fileselect` event to all file inputs on the page
                $(document).on('change', val, function () {
                    var input = val,
                        numFiles = input.get(0).files ? input.get(0).files.length : 1,
                        label = input.val().replace(/\\/g, '/').replace(/.*\//, '');
                    input.trigger('fileselect', [numFiles, label]);
                });
                // We can watch for our custom `fileselect` event like this
                $(document).ready(function () {
                    $(val).on('fileselect', function (event, numFiles, label) {
                        var input = val.parents('.input-group').find(':text'),
                            log = numFiles > 1 ? numFiles + ' files selected' : label;
                        if (input.length) {
                            input.val(log);
                        } else {
                            if (log) alert(log);
                        }
                    });
                });
            });
        });

        $(document).ready(function () {
            $('#vacation_start').datepicker({
                format: 'yyyy-mm-dd',
            }).on('changeDate', function (e) {
                $('#vacation_end').datepicker('setStartDate', e.date);
            });

            $('#vacation_end').datepicker({
                format: 'yyyy-mm-dd',
            }).on('changeDate', function (e) {
                $('#vacation_start').datepicker('setEndDate', e.date);
            });
        });

        $('[data-toggle="tooltip"]').tooltip();
    </script>
@endsection
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}";