1665722086
waR3U4bTeM%3Ada3d9884187bbcd70b862256252178d3-716198499c67c8ef2b80b91b664afbcb
s:20328:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjcxNjE5ODQ5OWM2N2M4ZWYyYjgwYjkxYjY2NGFmYmNiIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjM6InVwZGF0ZS1yZXZpZXcuYmxhZGUucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NTQ6InJlc291cmNlcy92aWV3cy9jb2FjaGNoYWxsZW5nZS91cGRhdGUtcmV2aWV3LmJsYWRlLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTQ0MDk6IkBleHRlbmRzKCdsYXlvdXRzLmFwcCcpCkBzZWN0aW9uKCdjc3MnKQo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9hc3NldHMvanMvcmF0ZWl0L3JhdGVpdC5jc3MiPgo8bGluayBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL3N1bW1lcm5vdGVAMC44LjE4L2Rpc3Qvc3VtbWVybm90ZS5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiPgo8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgoJLmFjY29yZGlvbiB7bWFyZ2luLXRvcDogMzBweH0KLmFjY29yZGlvbiAuY2FyZHtib3JkZXI6bm9uZTsgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNDNEM0RDYgIWltcG9ydGFudDsgYm9yZGVyLXJhZGl1czogMDt9Ci5hY2NvcmRpb24gLmNhcmQtaGVhZGVye3BhZGRpbmc6IDA7IGJhY2tncm91bmQ6IG5vbmU7IGJvcmRlcjpub25lO30KLmFjY29yZGlvbiAuY2FyZC1oZWFkZXIgYXtkaXNwbGF5OiBibG9jazt0ZXh0LWFsaWduOiBsZWZ0OyBmb250LXNpemU6IDIycHg7IGNvbG9yOiAjMjEyNjJGOyBmb250LXdlaWdodDogOTAwOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IHBhZGRpbmc6IDMwcHggMDt9Ci5hY2NvcmRpb24gLmNhcmQtYm9keSB7cGFkZGluZzogMCAwIDEwcHg7fQouYWNjb3JkaW9uIC5idG4tbGluayB7cG9zaXRpb246IHJlbGF0aXZlO30KLmFjY29yZGlvbiAuYnRuLWxpbms6YmVmb3Jle3Bvc2l0aW9uOiBhYnNvbHV0ZTsgcmlnaHQ6IDA7IHRvcDogMzAlOyB3aWR0aDogMzBweDsgaGVpZ2h0OiAzMHB4OyBsaW5lLWhlaWdodDozMnB4IDsgYm9yZGVyLXJhZGl1czogNTAlOyBiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI0U3MTMzRSwgI0YzMTY4Mik7ICBjb2xvcjogI2ZmZjsgY29udGVudDogJ1xmMDY4JzsgZm9udC1mYW1pbHk6ICdGb250QXdlc29tZSc7IHRleHQtYWxpZ246IGNlbnRlcjsgZm9udC1zaXplOiAxNXB4O30KLmFjY29yZGlvbiAuYnRuLWxpbmsuY29sbGFwc2VkOmJlZm9yZXtjb250ZW50OiAnXGYwNjcnO30KCi5hY2NvcmRpb24+LmNhcmQ6Om5vdCg6bGFzdC1vZi10eXBlKXtib3JkZXItYm90dG9tOiAxcHggc29saWQgI0M0QzRENn0KLmNoYWxsZW5nZS1yZXZpZXctc2VjdGlvbiAuY29hY2gtbGlzdCBoMyB7IHRleHQtYWxpZ246IGNlbnRlcjsgbWFyZ2luLWJvdHRvbTogMjBweDsgZm9udC1zaXplOiAyNHB4O2NvbG9yOiAjMjEyNjJGO2ZvbnQtd2VpZ2h0OiA5MDA7fQouY2hhbGxlbmdlLXJldmlldy1zZWN0aW9uIGgzIHsgIG1hcmdpbi1ib3R0b206IDIwcHg7IGZvbnQtc2l6ZTogMjRweDtjb2xvcjogIzIxMjYyRjtmb250LXdlaWdodDogOTAwOyB9CnRleHRhcmVhe3dpZHRoOiAxMDAlO3BhZGRpbmc6IDEwcHg7fQpAbWVkaWEobWF4LXdpZHRoOiA3NjdweCkgeyAuZm9ybS1ncm91cCB7IG1hcmdpbi10b3A6IDFyZW07IH0gfQo8L3N0eWxlPgpAZW5kc2VjdGlvbgpAc2VjdGlvbignY29udGVudCcpCjxkaXYgY2xhc3M9Im1haW4tY29udGVudCBhdWRpdGlvbnMtd3JhcCBjaGFsbGVuZ2UtcmV2aWV3LXNlY3Rpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoJICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgoJICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29hY2gtbGlzdCBtYi00Ij4KCSAgICAgICAgICAgICAgICA8aDM+UmV2aWV3IFBhcnRpY2lwYW50IFZpZGVvPC9oMz4KCSAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgQGlmKHNlc3Npb24oKS0+aGFzKCdtZXNzYWdlJykpCgkJCQkgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtc3VjY2VzcyI+CgkJCQkgICAgICAgIHt7IHNlc3Npb24oKS0+Z2V0KCdtZXNzYWdlJykgfX0KCQkJCSAgICA8L2Rpdj4KCQkJCUBlbmRpZgoJCQkJQGlmICgkZXJyb3JzLT5hbnkoKSkKCQkJCSAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIiPgoJCQkJICAgICAgICA8dWw+CgkJCQkgICAgICAgICAgICBAZm9yZWFjaCAoJGVycm9ycy0+YWxsKCkgYXMgJGVycm9yKQoJCQkJICAgICAgICAgICAgICAgIDxsaT57eyAkZXJyb3IgfX08L2xpPgoJCQkJICAgICAgICAgICAgQGVuZGZvcmVhY2gKCQkJCSAgICAgICAgPC91bD4KCQkJCSAgICA8L2Rpdj4KCQkJCUBlbmRpZgoJCQkJQGlmKHNlc3Npb24oKS0+aGFzKCdlcnJvcicpKQoJCQkJICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LWRhbmdlciI+CgkJCQkgICAgICAgIHt7IHNlc3Npb24oKS0+Z2V0KCdlcnJvcicpIH19CgkJCQkgICAgPC9kaXY+CgkJCQlAZW5kaWYKCSAgICAgICAgPC9kaXY+CgkgICAgICAgIDxmb3JtIGFjdGlvbj0ie3t1cmwoJ2NoYWxsZW5nZS1yZXZpZXctZWRpdCcpfX0ve3skcGFydGljaXBhbnRfaWR9fSIgbWV0aG9kPSJwb3N0IiBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIj4KCSAgICAgICAgCXshISBjc3JmX2ZpZWxkKCkgISF9CgkgICAgICAgIAk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwYXJ0aWNpcGFudF9pZCIgdmFsdWU9Int7JHBhcnRpY2lwYW50X2lkfX0iIC8+CgkgICAgICAgIAk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXZpZXdfaWQiIHZhbHVlPSJ7eyRyZXZpZXctPmlkfX0iIC8+CgkgICAgICAgIAk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwZXJmb3JtZXItbmFtZSIgdmFsdWU9Int7JHBhcnRpY2lwYW50X2RldGFpbC0+dXNlci0+Zmlyc3RfbmFtZX19IiAvPgoJCSAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KCQkgICAgICAgIAk8ZGl2IGNsYXNzPSJyb3ciPgoJCQkgICAgICAgIAk8ZGl2IGNsYXNzPSJjb2wtbGctOCBjb2wtbGctb2Zmc2V0LTIiPgoJCSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCByb3ciPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aWRlb3MtYm94Ij4KCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoc3RycG9zKCRwYXJ0aWNpcGFudF9kZXRhaWwtPnZpZGVvX2xpbmssICd5b3V0dWJlJykgIT09IGZhbHNlKQoKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAcGhwCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5ID0iIjsKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBhcnRzID0gcGFyc2VfdmlkZW9fbGluaygkcGFydGljaXBhbnRfZGV0YWlsLT52aWRlb19saW5rKTsKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXJyYXlfa2V5X2V4aXN0cygncXVlcnknLCRwYXJ0cykpewoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2Vfc3RyKCRwYXJ0c1sncXVlcnknXSwgJHF1ZXJ5KTsKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXJ0aWNpcGFudF9kZXRhaWxJRCA9ICRxdWVyeVsndiddOwoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHlvdXR1YmV2aWRlb19saW5rID0gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyIuJHBhcnRpY2lwYW50X2RldGFpbElEOyAKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkeW91dHViZXZpZGVvX2xpbmsgPSAkcGFydGljaXBhbnRfZGV0YWlsLT52aWRlb19saW5rOyAKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZHBocAoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmlkZW8gaWQ9InZpZGVvLXt7JHBhcnRpY2lwYW50X2RldGFpbC0+aWR9fSIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMzAwIiBjb250cm9scyA+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJQGlmKCRyZXZpZXctPnJldmlld191cmwpCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJCTxzb3VyY2Ugc3JjPSJ7e2VudignVVNFUl9QTEFURk9STV9MSU5LJyl9fS9yZXZpZXdzL2NvbXBsZXRlZC97eyRyZXZpZXctPnJldmlld191cmx9fSI+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJQGVsc2UKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJPHNvdXJjZSBzcmM9Int7ZW52KCdVU0VSX1BMQVRGT1JNX0xJTksnKX19L3VwbG9hZHMvY2hhbGxlbmdlL3t7JHBhcnRpY2lwYW50X2RldGFpbC0+dmlkZW9fbGlua319Ij4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBIVE1MNSB2aWRlby4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmlkZW8+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgICAgICAgICAgCgkJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0icC0yMCB0ZXh0LWNlbnRlciI+e3skcGFydGljaXBhbnRfZGV0YWlsLT51c2VyLT5maXJzdF9uYW1lfX08L2gzPgoJCSAgICAgICAgICAgICAgICA8L2Rpdj4KCQkgICAgICAgICAgICAgICAgCgkJICAgICAgICA8L2Rpdj4KCQkgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLXQtMTUiPgoJCSAgICAgICAgCTxkaXYgY2xhc3M9ImNvbC1tZC00IiBpZD0icmVsb2FkX2Jsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiBocmVmPSJ7e3JvdXRlKCdjaGFsbGVuZ2VyZXZpZXcucmV3cml0ZScsICRwYXJ0aWNpcGFudF9kZXRhaWwtPmlkKX19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJidG4taWNvbiBmYSBmYS1jaGVjayI+PC9pPlJlLXJlY29yZCB2aWRlbwogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAJPC9kaXY+CgkJICAgICAgICA8L2Rpdj4KCQkgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgkJICAgICAgICAJPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQtYm94ICI+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPlBlcmZvcm1hY2UgbGV2ZWwgcGxhY2VtZW50PC9sYWJlbD48YnIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuYW1lPSJsZXZlbC1wbGFjZW1lbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCTxvcHRpb24gdmFsdWU9IjEiIEBpZigkcmV2aWV3LT5sZXZlbF9wbGFjZW1lbnQgPT0gMSkgc2VsZWN0ZWQgQGVuZGlmPkJlZ2lubmVyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAJPG9wdGlvbiB2YWx1ZT0iMiIgQGlmKCRyZXZpZXctPmxldmVsX3BsYWNlbWVudCA9PSAyKSBzZWxlY3RlZCBAZW5kaWY+SW50ZXJtZWRpYXRlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAJPG9wdGlvbiB2YWx1ZT0iMyIgQGlmKCRyZXZpZXctPmxldmVsX3BsYWNlbWVudCA9PSAzKSBzZWxlY3RlZCBAZW5kaWY+QWR2YW5jZWQ8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj48aHI+PC9kaXY+CgkgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KCSAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtY2VudGVyIHRleHQtZGFuZ2VyIGYtdy01MDAiPlNDT1JFPC9wPgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTYgY29sLWxnLTQgbS1iLTE1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UGVyZm9ybWFuY2UgUXVhbGl0eTwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhdGVpdC12YWx1ZSI+PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCBiaWdzdGFycyIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iMSIgZGF0YS1yYXRlaXQtbmFtZT0icHEtcmF0aW5nIiBkYXRhLXJhdGVpdC1taW49IjAiIGRhdGEtcmF0ZWl0LW1heD0iNSIgZGF0YS1yYXRlaXQtc3RlcD0iMSIgZGF0YS1yYXRlaXQtcmVzZXRhYmxlPSIwIiBkYXRhLXJhdGVpdC12YWx1ZT0ie3skcmV2aWV3LT5wZXJmb3JtYW5jZV9xdWFsaXR5X3JhdGluZ319IiA+PC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InBxLXJhdGluZyIgdmFsdWU9Int7JHJldmlldy0+cGVyZm9ybWFuY2VfcXVhbGl0eV9yYXRpbmd9fSIgLz4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJtLWItMCI+Q29tbWVudDwvc21hbGw+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCBjb21tZW50IiB0eXBlPSJ0ZXh0IiBuYW1lPSJwZXJmb3JtYW5jZS1xdWFsaXR5IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7JHJldmlldy0+cGVyZm9ybWFuY2VfcXVhbGl0eX19IiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtNiBjb2wtbGctNCBtLWItMTUiPgoJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UZWNobmljYWwgQWJpbGl0eTwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhdGVpdC12YWx1ZSI+PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCBiaWdzdGFycyIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iMSIgZGF0YS1yYXRlaXQtbmFtZT0idGEtcmF0aW5nIiBkYXRhLXJhdGVpdC1taW49IjAiIGRhdGEtcmF0ZWl0LW1heD0iNSIgZGF0YS1yYXRlaXQtc3RlcD0iMSIgZGF0YS1yYXRlaXQtcmVzZXRhYmxlPSIwIiBkYXRhLXJhdGVpdC12YWx1ZT0ie3skcmV2aWV3LT50ZWNobmljYWxfYWJpbGl0eV9yYXRpbmd9fSIgPjwvZGl2PgoJCQkJCQkJCQkgPGlucHV0IHR5cGU9ImhpZGRlbiIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IiIgbmFtZT0idGEtcmF0aW5nIiBtaW49IjEiIG1heD0iNSIgc3RlcD0iMC41IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7JHJldmlldy0+dGVjaG5pY2FsX2FiaWxpdHlfcmF0aW5nfX0iPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Im0tYi0wIj5Db21tZW50PC9zbWFsbD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGNvbW1lbnQiIHR5cGU9InRleHQiIG5hbWU9InRlY2huaWNhbC1hYmlsaXR5IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7JHJldmlldy0+dGVjaG5pY2FsX2FiaWxpdHl9fSIgLz4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4JICAgICAgICAgICAgICAgICAgICAgIAoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTYgY29sLWxnLTQgbS1iLTE1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CSAgICAgICAgICAgICAgICAgICAgICAgICAgCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+RW5lcmd5IGFuZCBTdHlsZTwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhdGVpdC12YWx1ZSI+PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCBiaWdzdGFycyIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iMSIgZGF0YS1yYXRlaXQtbmFtZT0iZXMtcmF0aW5nIiBkYXRhLXJhdGVpdC1taW49IjAiIGRhdGEtcmF0ZWl0LW1heD0iNSIgZGF0YS1yYXRlaXQtc3RlcD0iMSIgZGF0YS1yYXRlaXQtcmVzZXRhYmxlPSIwIiBkYXRhLXJhdGVpdC12YWx1ZT0ie3skcmV2aWV3LT5lbmVyZ3lfc3R5bGVfcmF0aW5nfX0iID48L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZXMtcmF0aW5nIiB2YWx1ZT0ie3skcmV2aWV3LT5lbmVyZ3lfc3R5bGVfcmF0aW5nfX0iIC8+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibS1iLTAiPkNvbW1lbnQ8L3NtYWxsPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wgY29tbWVudCIgdHlwZT0idGV4dCIgbmFtZT0iZW5lcmd5LWFuZC1zdHlsZSIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7eyRyZXZpZXctPmVuZXJneV9zdHlsZX19IiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTYgY29sLWxnLTQgbS1iLTE1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+U3Rvcnl0ZWxsaW5nPC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmF0ZWl0LXZhbHVlIj48L3NwYW4+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IGJpZ3N0YXJzIiBkYXRhLXJhdGVpdC1zcGFuLWlkPSIxIiBkYXRhLXJhdGVpdC1uYW1lPSJzdG9yeXRlbGxpbmctcmF0aW5nIiBkYXRhLXJhdGVpdC1taW49IjAiIGRhdGEtcmF0ZWl0LW1heD0iNSIgZGF0YS1yYXRlaXQtc3RlcD0iMSIgZGF0YS1yYXRlaXQtcmVzZXRhYmxlPSIwIiBkYXRhLXJhdGVpdC12YWx1ZT0ie3skcmV2aWV3LT5zdG9yeXRlbGxpbmdfcmF0aW5nfX0iID48L2Rpdj4KCQkJCQkgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic3Rvcnl0ZWxsaW5nLXJhdGluZyIgdmFsdWU9Int7JHJldmlldy0+c3Rvcnl0ZWxsaW5nX3JhdGluZ319IiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Im0tYi0wIj5Db21tZW50PC9zbWFsbD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGNvbW1lbnQiIHR5cGU9InRleHQiIG5hbWU9InN0b3J5dGVsbGluZyIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7eyRyZXZpZXctPnN0b3J5dGVsbGluZ319IiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgkgICAgICAgICAgICAgICAgICAgICAgCgkgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtNiBjb2wtbGctNCBtLWItMTUiPgoJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Mb29rIGFuZCBBcHBlYXJhbmNlPC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmF0ZWl0LXZhbHVlIj48L3NwYW4+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IGJpZ3N0YXJzIiBkYXRhLXJhdGVpdC1zcGFuLWlkPSIxIiBkYXRhLXJhdGVpdC1uYW1lPSJsYS1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIgZGF0YS1yYXRlaXQtbWF4PSI1IiBkYXRhLXJhdGVpdC1zdGVwPSIxIiBkYXRhLXJhdGVpdC1yZXNldGFibGU9IjAiIGRhdGEtcmF0ZWl0LXZhbHVlPSJ7eyRyZXZpZXctPmxvb2tfYXBwZWFyYW5jZV9yYXRpbmd9fSIgPjwvZGl2PgoJCQkJCSAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJsYS1yYXRpbmciIHZhbHVlPSJ7eyRyZXZpZXctPmxvb2tfYXBwZWFyYW5jZV9yYXRpbmd9fSIgLz4KCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibS1iLTAiPkNvbW1lbnQ8L3NtYWxsPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wgY29tbWVudCIgdHlwZT0idGV4dCIgbmFtZT0ibG9vay1hbmQtYXBwZWFyYW5jZSIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7eyRyZXZpZXctPmxvb2tfYXBwZWFyYW5jZX19IiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgkgICAgICAgICAgICAgICAgICAKCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQkJPGRpdiBjbGFzcz0iY29sLXhzLTEyIj48aHI+PC9kaXY+CgkgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQtYm94ICI+CiAgICAgICAgICAgICAgICAgICAgICAgIAk8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+Tm90ZXM8L2xhYmVsPjxici8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0iZmVlZGJhY2siIGNsYXNzPSJzdW1tZXJub3RlIj57ISEgJHJldmlldy0+ZmVlZGJhY2sgISF9PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIAoJICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLXJvdyBtdC01Ij4KICAgICAgICAgICAgICAgIAk8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIAkJPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgIAkJCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImF1ZHRpb24iIHZhbHVlPSJVcGRhdGUgUmV2aWV3IiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIiIC8+CiAgICAgICAgICAgICAgICAJCTwvZGl2PgogICAgICAgICAgICAgICAgCTwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgIDwvZm9ybT4KCSAgICA8L2Rpdj4KCTwvZGl2Pgo8L2Rpdj4KQGVuZHNlY3Rpb24KCkBzZWN0aW9uKCdqcycpCjxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL3N1bW1lcm5vdGVAMC44LjE4L2Rpc3Qvc3VtbWVybm90ZS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CgkkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKICAJCS8vICQoJy5zdW1tZXJub3RlJykuc3VtbWVybm90ZSh7CiAgICAvLyAgICAgcGxhY2Vob2xkZXI6ICcnLAogICAgLy8gICAgIHRhYnNpemU6IDIsCiAgICAvLyAgICAgaGVpZ2h0OiAxMjAsCiAgICAvLyAgICAgdG9vbGJhcjogWwogICAgLy8gICAgICAgWydzdHlsZScsIFsnc3R5bGUnXV0sCiAgICAvLyAgICAgICBbJ2ZvbnQnLCBbJ2JvbGQnLCAndW5kZXJsaW5lJywgJ2NsZWFyJ11dLAogICAgLy8gICAgICAgWydjb2xvcicsIFsnY29sb3InXV0sCiAgICAvLyAgICAgICBbJ3BhcmEnLCBbJ3VsJywgJ29sJywgJ3BhcmFncmFwaCddXSwKICAgIC8vICAgICAgIFsndGFibGUnLCBbJ3RhYmxlJ11dLAogICAgLy8gICAgICAgWydpbnNlcnQnLCBbJ2xpbmsnXV0sCiAgICAvLyAgICAgICBbJ3ZpZXcnLCBbJ2Z1bGxzY3JlZW4nLCAnY29kZXZpZXcnLCAnaGVscCddXQogICAgLy8gICAgIF0KICAgIC8vICAgfSk7CiAgCQl2YXIgZGF0ZWZvcm1hdCA9ICd5eXl5LW1tLWRkJzsKCiAgICAgICAgJCgnLmhhc0RhdGVwaWNrZXInKS5kYXRlcGlja2VyKHsKICAgICAgICAgIGZvcm1hdDogZGF0ZWZvcm1hdCwKICAgICAgICAgIGF1dG9jbG9zZTogdHJ1ZQogICAgICAgIH0pOwogICAJCiAgICQoIi5yYXRlaXQiKS5iaW5kKCdyYXRlZCcsIGZ1bmN0aW9uIChldmVudCwgdmFsdWUpIHsKICAgICAgICAgICAgdmFyIHJhdGUgPSAkKHRoaXMpOwogICAgICAgICAgICAvKmluc2VydCBzdGFyIHJhdGluZyB2YWx1ZSovCiAgICAgICAgICAgIHJhdGUuY2xvc2VzdCgnLnJvdycpLmZpbmQoJy5yYXRlaXQtdmFsdWUnKS5odG1sKHZhbHVlLnRvRml4ZWQoMSkpOwogICAgICAgICAgICBpZih2YWx1ZSA9PT0gbnVsbCl7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmF0ZS5hdHRyKCJkYXRhLXJhdGVpdC12YWx1ZSIsIHZhbHVlKTsKICAgICAgICAgICAgdmFyIG5hbWUgPSByYXRlLmF0dHIoImRhdGEtcmF0ZWl0LW5hbWUiKTsKICAgICAgICAgICAgLy9yYXRpbmdzW25hbWVdID0gdmFsdWU7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTsKICAgICAgICAgICAgY29uc29sZS5sb2cobmFtZSk7CiAgICAgICAgICAgICQoJ2lucHV0W25hbWU9IicrbmFtZSsnIl0nKS52YWwodmFsdWUpOwovLyAgICAgICAgICAgICQoJyNyYXRlXycgKyByYXRlLmF0dHIoImRhdGEtcmF0ZWl0LXNwYW4taWQiKSkudGV4dCh2YWx1ZSk7CiAgICAgICAgfSk7CiAgIAoJfSk7Cjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2Fzc2V0cy9qcy9yYXRlaXQvanF1ZXJ5LnJhdGVpdC5qcyI+PC9zY3JpcHQ+CgpAZW5kc2VjdGlvbiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";