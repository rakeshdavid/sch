1665722086
waR3U4bTeM%3A95deffc861035dd317bda3606a66b63f-5f671744b17a5d5db4e467647cf5c673
s:46816:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjVmNjcxNzQ0YjE3YTVkNWRiNGU0Njc2NDdjZjVjNjczIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTM6ImFwcC5ibGFkZS5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czozNzoicmVzb3VyY2VzL3ZpZXdzL2xheW91dHMvYXBwLmJsYWRlLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MzQzMDQ6IjwhZG9jdHlwZSBodG1sPgo8aHRtbCBsYW5nPSJlbiI+Cgo8aGVhZD4KICAgPCEtLSBHb29nbGUgVGFnIE1hbmFnZXIgLS0+CiAgIDxzY3JpcHQ+KGZ1bmN0aW9uKHcsZCxzLGwsaSl7d1tsXT13W2xdfHxbXTt3W2xdLnB1c2goeydndG0uc3RhcnQnOgogICBuZXcgRGF0ZSgpLmdldFRpbWUoKSxldmVudDonZ3RtLmpzJ30pO3ZhciBmPWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sCiAgIGo9ZC5jcmVhdGVFbGVtZW50KHMpLGRsPWwhPSdkYXRhTGF5ZXInPycmbD0nK2w6Jyc7ai5hc3luYz10cnVlO2ouc3JjPQogICAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RtLmpzP2lkPScraStkbDtmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosZik7CiAgIH0pKHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnZGF0YUxheWVyJywnR1RNLVczTDk4OTknKTs8L3NjcmlwdD4KICAgPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIC0tPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPHRpdGxlPlNob3djYXNlPC90aXRsZT4KICAgIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJTaG93Y2FzZSI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bWV0YSBuYW1lPSJjc3JmLXRva2VuIiBjb250ZW50PSJ7eyBjc3JmX3Rva2VuKCkgfX0iPgoKICAgIDxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iL2Zhdmljb24uaWNvIj4KICAgIDwhLS1baWYgSUVdPgoKICAgIDxzY3JpcHQgc3JjPSJodHRwczovL29zcy5tYXhjZG4uY29tL2h0bWw1c2hpdi8zLjcuMi9odG1sNXNoaXYubWluLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9vc3MubWF4Y2RuLmNvbS9yZXNwb25kLzEuNC4yL3Jlc3BvbmQubWluLmpzIj48L3NjcmlwdD4KICAgIDwhW2VuZGlmXS0tPjwhLS0gZ2xvYmFsIHN0eWxlc2hlZXRzIC0tPgoKICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0ie3t1cmwoJy8nKX19L2Fzc2V0cy9tYXJpbm8vc3R5bGVzL2NvbXBvbmVudHMvYm9vdHN0cmFwLmNzcyI+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNC41LjAvY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzIj4KCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2FuaW1hdGUuY3NzLzMuNS4xL2FuaW1hdGUubWluLmNzcyI+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9tYXRlcmlhbC1kZXNpZ24taWNvbmljLWZvbnQvMi4yLjAvY3NzL21hdGVyaWFsLWRlc2lnbi1pY29uaWMtZm9udC5taW4uY3NzIj4KCiAgICA8bGluayBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9TW9udHNlcnJhdCIgcmVsPSJzdHlsZXNoZWV0Ij4KCiAgICA8bGluayBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mbGFnLWljb24tY3NzLzEuMC4wL2Nzcy9mbGFnLWljb24ubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+CgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJ7e3VybCgnLycpfX0vYXNzZXRzL21hcmluby9zdHlsZXMvbWFpbi5jc3MiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJ7e3VybCgnLycpfX0vYXNzZXRzL21hcmluby9ib3dlcl9jb21wb25lbnRzL2NoYXJ0aXN0L2Rpc3QvY2hhcnRpc3QubWluLmNzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Int7dXJsKCcvJyl9fS9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvYm9vdHN0cmFwLWRhdGVwaWNrZXIvZGlzdC9jc3MvYm9vdHN0cmFwLWRhdGVwaWNrZXIzLmNzcyI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Int7dXJsKCcvJyl9fS9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvbWpvbG5pYy1ib290c3RyYXAtY29sb3JwaWNrZXIvZGlzdC9jc3MvYm9vdHN0cmFwLWNvbG9ycGlja2VyLmNzcyI+CgogICAgPHN0eWxlPgogICAgICAgIGJvZHlbZGF0YS1sYXlvdXQ9ImNvbGxhcHNlZC1zaWRlYmFyIl0gLnNpZGViYXItMSAuc2lkZWJhci1zZWN0aW9uID4gYSA+IC5tYWluLWxvZ28taW1nIHsKICAgICAgICAgICAgd2lkdGggIDogNjBweDsKICAgICAgICAgICAgbWFyZ2luIDogMTBweDsKICAgICAgICAgICAgY29udGVudDp1cmwoJy9pbWFnZXMvbG9nby1taW5pLnBuZycpOwogICAgICAgIH0KCiAgICAgICAgYm9keVtkYXRhLWxheW91dD0iZGVmYXVsdC1zaWRlYmFyIl0gLnNpZGViYXItMSAuc2lkZWJhci1zZWN0aW9uID4gYSA+IC5tYWluLWxvZ28taW1nIHsKICAgICAgICAgICAgd2lkdGggICAgICAgICA6IDE4MHB4OwogICAgICAgICAgICBtYXJnaW4gICAgICAgIDogMjBweDsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbSA6IDA7CiAgICAgICAgfQoKICAgICAgICBbZGF0YS1sYXlvdXQ9ImNvbGxhcHNlZC1zaWRlYmFyIl0gLnNpZGViYXItMSAuc2VjdGlvbi1jb250ZW50ID4gbGkgPiBhID4gLnRpdGxlIHsKICAgICAgICAgICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsKICAgICAgICAgICAgZm9udC1zaXplOiA5cHggIWltcG9ydGFudDsKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICBib3R0b206IDBweDsKICAgICAgICAgICAgbGVmdDogMDsKICAgICAgICAgICAgcmlnaHQ6IDA7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlO30KICAgICAgICAuYm9yZGVyLWNvbG9yLXdhcm5pbmctaG92ZXI6aG92ZXIsIC50YS10b29sYmFyIC5idG4uYnRuLWRlZmF1bHQ6aG92ZXIsIC5ub3RlLWJ0bi5idG4uYnRuLWRlZmF1bHQ6aG92ZXIsIC5idG4uYnRuLXdhcm5pbmc6aG92ZXIsIC5idG4uYnRuLXdhcm5pbmcuYnRuLW91dGxpbmUuYnRuLXJvdW5kZWQ6aG92ZXIsIC5ib3JkZXItY29sb3Itd2FybmluZy1ob3ZlcjphY3RpdmUsIC50YS10b29sYmFyIC5idG4uYnRuLWRlZmF1bHQ6YWN0aXZlLCAubm90ZS1idG4uYnRuLmJ0bi1kZWZhdWx0OmFjdGl2ZSwgLmJ0bi5idG4td2FybmluZzphY3RpdmUsIC5idG4uYnRuLXdhcm5pbmcuYnRuLW91dGxpbmUuYnRuLXJvdW5kZWQ6YWN0aXZlLCAuYm9yZGVyLWNvbG9yLXdhcm5pbmctaG92ZXI6Zm9jdXMsIC50YS10b29sYmFyIC5idG4uYnRuLWRlZmF1bHQ6Zm9jdXMsIC5ub3RlLWJ0bi5idG4uYnRuLWRlZmF1bHQ6Zm9jdXMsIC5idG4uYnRuLXdhcm5pbmc6Zm9jdXMsIC5idG4uYnRuLXdhcm5pbmcuYnRuLW91dGxpbmUuYnRuLXJvdW5kZWQ6Zm9jdXMgewogICAgICAgICAgICBib3JkZXItY29sb3I6ICMxYTFhMWEhaW1wb3J0YW50OwogICAgICAgIH0KICAgICAgICAuYmctd2FybmluZy1ob3Zlcjpob3ZlciwgLnRhLXRvb2xiYXIgLmJ0bi5idG4tZGVmYXVsdDpob3ZlciwgLm5vdGUtYnRuLmJ0bi5idG4tZGVmYXVsdDpob3ZlciwgLmJ0bi5idG4td2FybmluZzpob3ZlciwgLmJnLXdhcm5pbmctaG92ZXI6YWN0aXZlLCAudGEtdG9vbGJhciAuYnRuLmJ0bi1kZWZhdWx0OmFjdGl2ZSwgLm5vdGUtYnRuLmJ0bi5idG4tZGVmYXVsdDphY3RpdmUsIC5idG4uYnRuLXdhcm5pbmc6YWN0aXZlLCAuYmctd2FybmluZy1ob3Zlcjpmb2N1cywgLnRhLXRvb2xiYXIgLmJ0bi5idG4tZGVmYXVsdDpmb2N1cywgLm5vdGUtYnRuLmJ0bi5idG4tZGVmYXVsdDpmb2N1cywgLmJ0bi5idG4td2FybmluZzpmb2N1cyB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMxYTFhMWEhaW1wb3J0YW50OwogICAgICAgIH0KICAgICAgICAuYm9yZGVyLWNvbG9yLXdhcm5pbmcsIC50YS10b29sYmFyIC5idG4uYnRuLWRlZmF1bHQsIC5ub3RlLWJ0bi5idG4uYnRuLWRlZmF1bHQsIC5idG4uYnRuLXdhcm5pbmcsIC5idG4uYnRuLXdhcm5pbmcuYnRuLWZsYXQsIC5idG4uYnRuLXdhcm5pbmcuYnRuLXJvdW5kZWQsIC5idG4uYnRuLXdhcm5pbmcuYnRuLW91dGxpbmUsIC5idG4uYnRuLXdhcm5pbmcuYnRuLW91dGxpbmUuYnRuLXJvdW5kZWQgewogICAgICAgICAgICBib3JkZXItY29sb3I6ICNFNTExM0UhaW1wb3J0YW50OwogICAgICAgIH0KICAgICAgICAuYmctd2FybmluZywgLnRhLXRvb2xiYXIgLmJ0bi5idG4tZGVmYXVsdCwgLm5vdGUtYnRuLmJ0bi5idG4tZGVmYXVsdCwgLmJ0bi5idG4td2FybmluZywgLmJ0bi5idG4td2FybmluZy5idG4tZmxhdCwgLmJ0bi5idG4td2FybmluZy5idG4tcm91bmRlZCB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNFNTExM0UhaW1wb3J0YW50OwogICAgICAgIH0KICAgICAgICAjbml0aWZpY2F0aW9uX2NvdW50ZXJ7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNFNTExM0UhaW1wb3J0YW50OwogICAgICAgIH0KICAgICAgICBbZGF0YS1wYWxldHRlPSJwYWxldHRlLTQiXSAuc2lkZWJhci0xIC5zaWRlbGluZTpob3ZlcjphZnRlciwKICAgICAgICBbZGF0YS1wYWxldHRlPSJwYWxldHRlLTQiXSAuc2lkZWJhci0xIC5zaWRlbGluZS1hY3RpdmU6YWZ0ZXIgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTUxMTNFOwogICAgICAgIH0KICAgICAgICAuYm9yZGVyLWNvbG9yLWRhbmdlciwgLmJ0bi5idG4tZGFuZ2VyLCAuYnRuLmJ0bi1kYW5nZXIuYnRuLWZsYXQsIC5idG4uYnRuLWRhbmdlci5idG4tcm91bmRlZCwgLmJ0bi5idG4tZGFuZ2VyLmJ0bi1vdXRsaW5lLCAuYnRuLmJ0bi1kYW5nZXIuYnRuLW91dGxpbmUuYnRuLXJvdW5kZWQgewogICAgICAgICAgICBib3JkZXItY29sb3I6ICNFNTExM0UhaW1wb3J0YW50OwogICAgICAgIH0KCiAgICAgICAgLmJnLWRhbmdlciwgLmJ0bi5idG4tZGFuZ2VyLCAuYnRuLmJ0bi1kYW5nZXIuYnRuLWZsYXQsIC5idG4uYnRuLWRhbmdlci5idG4tcm91bmRlZCB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNFNTExM0UhaW1wb3J0YW50OwogICAgICAgIH0KICAgICAgICAuYm9yZGVyLWNvbG9yLWRhbmdlci1ob3Zlcjpob3ZlciwgLmJ0bi5idG4tZGFuZ2VyOmhvdmVyLCAuYnRuLmJ0bi1kYW5nZXIuYnRuLW91dGxpbmUuYnRuLXJvdW5kZWQ6aG92ZXIsIC5ib3JkZXItY29sb3ItZGFuZ2VyLWhvdmVyOmFjdGl2ZSwgLmJ0bi5idG4tZGFuZ2VyOmFjdGl2ZSwgLmJ0bi5idG4tZGFuZ2VyLmJ0bi1vdXRsaW5lLmJ0bi1yb3VuZGVkOmFjdGl2ZSwgLmJvcmRlci1jb2xvci1kYW5nZXItaG92ZXI6Zm9jdXMsIC5idG4uYnRuLWRhbmdlcjpmb2N1cywgLmJ0bi5idG4tZGFuZ2VyLmJ0bi1vdXRsaW5lLmJ0bi1yb3VuZGVkOmZvY3VzIHsKICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjRTUxMTNFIWltcG9ydGFudDsKICAgICAgICB9CgogICAgICAgIC5iZy1kYW5nZXItaG92ZXI6aG92ZXIsIC5idG4uYnRuLWRhbmdlcjpob3ZlciwgLmJnLWRhbmdlci1ob3ZlcjphY3RpdmUsIC5idG4uYnRuLWRhbmdlcjphY3RpdmUsIC5iZy1kYW5nZXItaG92ZXI6Zm9jdXMsIC5idG4uYnRuLWRhbmdlcjpmb2N1cyB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNFNTExM0UhaW1wb3J0YW50OwogICAgICAgIH0KICAgICAgICAuYWxlcnQuYWxlcnQtc3VjY2VzcyB7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlNzEzM2U7CiAgICAgICAgICAgIGJvcmRlci1jb2xvcjogI2U3MTMzZTsKICAgICAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgfQogICAgICAgIC50b2FzdC1lcnJvcnsKICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUYwMDI1IWltcG9ydGFudDsKICAgICAgICB9CgogICAgPC9zdHlsZT4KCiAgICBAeWllbGQoJ2NzcycpCgogICAgQGlmKHJlcXVlc3QoKS0+Z2V0SG9zdCgpID09IGVudignQ09BQ0hfUExBVEZPUk1fRE9NQUlOJykpCiAgICAgICAgPCEtLSBCZWdpbiBJbnNwZWN0bGV0IEVtYmVkIENvZGUgLS0+CiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBpZD0iaW5zcGVjdGxldGpzIj4KICAgICAgICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuX19pbnNwID0gd2luZG93Ll9faW5zcCB8fCBbXTsKICAgICAgICAgICAgICAgICAgICBfX2luc3AucHVzaChbJ3dpZCcsIDkwMTY1MzQyNF0pOwogICAgICAgICAgICAgICAgICAgIHZhciBsZGluc3AgPSBmdW5jdGlvbigpeyBpZih0eXBlb2Ygd2luZG93Ll9faW5zcGxkICE9ICJ1bmRlZmluZWQiKSByZXR1cm47IHdpbmRvdy5fX2luc3BsZCA9IDE7IHZhciBpbnNwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7IGluc3AudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOyBpbnNwLmFzeW5jID0gdHJ1ZTsgaW5zcC5pZCA9ICJpbnNwc3luYyI7IGluc3Auc3JjID0gKCdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID8gJ2h0dHBzJyA6ICdodHRwJykgKyAnOi8vY2RuLmluc3BlY3RsZXQuY29tL2luc3BlY3RsZXQuanM/d2lkPTkwMTY1MzQyNCZyPScgKyBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpLzM2MDAwMDApOyB2YXIgeCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsgeC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpbnNwLCB4KTsgfTsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGxkaW5zcCwgMCk7CiAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICA8L3NjcmlwdD4KICAgICAgICAgICAgPCEtLSBFbmQgSW5zcGVjdGxldCBFbWJlZCBDb2RlIC0tPgogICAgQGVuZGlmCgo8L2hlYWQ+Cjxib2R5IGRhdGEtbGF5b3V0PSJlbXB0eS1sYXlvdXQiIGRhdGEtcGFsZXR0ZT0icGFsZXR0ZS00IiBkYXRhLWRpcmVjdGlvbj0ibm9uZSI+CjwhLS0gR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+Cjxub3NjcmlwdD48aWZyYW1lIHNyYz0iaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vbnMuaHRtbD9pZD1HVE0tVzNMOTg5OSIKaGVpZ2h0PSIwIiB3aWR0aD0iMCIgc3R5bGU9ImRpc3BsYXk6bm9uZTt2aXNpYmlsaXR5OmhpZGRlbiI+PC9pZnJhbWU+PC9ub3NjcmlwdD4KPCEtLSBFbmQgR29vZ2xlIFRhZyBNYW5hZ2VyIChub3NjcmlwdCkgLS0+Cgo8ZGl2IGNsYXNzPSJwYWNlIHBhY2UtaW5hY3RpdmUiPgogICAgPGRpdiBjbGFzcz0icGFjZS1wcm9ncmVzcyIgZGF0YS1wcm9ncmVzcy10ZXh0PSIxMDAlIiBkYXRhLXByb2dyZXNzPSI5OSIgc3R5bGU9InRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTAwJSwgMHB4LCAwcHgpOyI+CiAgICAgICAgPGRpdiBjbGFzcz0icGFjZS1wcm9ncmVzcy1pbm5lciI+PC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InBhY2UtYWN0aXZpdHkiPjwvZGl2Pgo8L2Rpdj4KPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1maXhlZC10b3AgbmF2YmFyLTEiPgogICAgPCEtLTxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii8iPiA8aW1nIHN0eWxlPSJ3aWR0aDogMzBweCIgc3JjPSIvaW1hZ2VzL21haW5fbG9nby5wbmciPjwvYT4tLT4KICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci1uYXYgcHVsbC1sZWZ0IHRvZ2dsZS1sYXlvdXQiPgogICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPjxhIGNsYXNzPSJuYXYtbGluayIgZGF0YS1jbGljaz0idG9nZ2xlLWxheW91dCI+IDxpIGNsYXNzPSJ6bWRpIHptZGktbWVudSI+PC9pPiA8L2E+PC9saT4KICAgIDwvdWw+CgogICAgQGlmKEF1dGg6OnVzZXIoKS0+cm9sZSA9PSAyKQogICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci1uYXYgcHVsbC1sZWZ0IHRvZ2dsZS1zZWFyY2giPgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj48YSBjbGFzcz0ibmF2LWxpbmsiIGRhdGEtY2xpY2s9InRvZ2dsZS1zZWFyY2giPiA8aSBjbGFzcz0iem1kaSB6bWRpLXNlYXJjaCI+PC9pPiA8L2E+PC9saT4KICAgICAgICA8L3VsPgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1kcmF3ZXIgcHVsbC1sZWZ0IGhpZGRlbi1sZy1kb3duIj4KICAgICAgICAgICAgPGZvcm0gY2xhc3M9ImZvcm0taW5saW5lIG5hdmJhci1mb3JtIiBtZXRob2Q9IkdFVCIgYWN0aW9uPSIvbXlyZXZpZXdzIj4KICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iU2VhcmNoIiBuYW1lPSJzZWFyY2giIGF1dG9jb21wbGV0ZT0ib2ZmIj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2PgogICAgQGVuZGlmCiAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2IHB1bGwtcmlnaHQgaGlkZGVuLWxnLWRvd24gbmF2YmFyLW5vdGlmaWNhdGlvbnMiPgogICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGRhdGEtY2xpY2s9InRvZ2dsZS1yaWdodC1zaWRlYmFyIiBpZD0ibm90aWZpY2F0aW9uX2J0biI+CiAgICAgICAgICAgICAgICA8aSBjbGFzcz0iem1kaSB6bWRpLW5vdGlmaWNhdGlvbnMtYWN0aXZlIj48L2k+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibGFiZWwgbGFiZWwtcm91bmRlZCBsYWJlbC1kYW5nZXIgbGFiZWwteHMiIGlkPSJuaXRpZmljYXRpb25fY291bnRlciI+MDwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgIDwvbGk+CiAgICA8L3VsPgogICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiBwdWxsLXJpZ2h0IGhpZGRlbi1sZy1kb3duIG5hdmJhci1wcm9maWxlIj4KICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGRyb3Bkb3duIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSBuby1hZnRlciIgZGF0YS10b2dnbGU9ImRyb3Bkb3duIj4KICAgICAgICAgICAgICAgIEBpZihBdXRoOjp1c2VyKCktPmF2YXRhciAhPScnKQogICAgICAgICAgICAgICAgICAgIEBpZihTdHI6OnN0YXJ0c1dpdGgoQXV0aDo6dXNlcigpLT5hdmF0YXIsJ2h0dHAnKSkKICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLWNpcmNsZSBpbWctZmx1aWQgcHJvZmlsZS1pbWFnZSIgc3JjPSJ7eyBBdXRoOjp1c2VyKCktPmF2YXRhciB9fSIgYWx0PSJjb2FjaCBpbWFnZSI+CiAgICAgICAgICAgICAgICAgICAgQGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLWNpcmNsZSBpbWctZmx1aWQgcHJvZmlsZS1pbWFnZSIgc3JjPSJAaWYoICEgU3RyOjpzdGFydHNXaXRoKEF1dGg6OnVzZXIoKS0+YXZhdGFyLCcvJykpL0BlbmRpZnt7IEF1dGg6OnVzZXIoKS0+YXZhdGFyIH19IiBhbHQ9ImNvYWNoIGltYWdlIj4KICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgIEBlbHNlCiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLWNpcmNsZSBpbWctZmx1aWQgcHJvZmlsZS1pbWFnZSIgc3JjPSIvaW1hZ2VzL2RlZmF1bHRfYXZhdGFyX25ldy5wbmciPgogICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtc2NhbGUgZnJvbS1yaWdodCBkcm9wZG93bi1tZW51LXJpZ2h0Ij4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkcm9wZG93bi1pdGVtIGFuaW1hdGVkIGZhZGVJbiIgaHJlZj0iL3Byb2ZpbGUiPiA8aSBjbGFzcz0iem1kaSB6bWRpLXNldHRpbmdzLXNxdWFyZSI+PC9pPiA8c3BhbiBjbGFzcz0iZHJvcGRvd24tdGV4dCI+UHJvZmlsZTwvc3Bhbj4gPC9hPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0gYW5pbWF0ZWQgZmFkZUluIiBocmVmPSIvYXV0aC9sb2dvdXQiPiA8aSBjbGFzcz0iem1kaSB6bWRpLXBvd2VyIj48L2k+IDxzcGFuIGNsYXNzPSJkcm9wZG93bi10ZXh0Ij5Mb2dvdXQ8L3NwYW4+IDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9saT4KICAgIDwvdWw+CiAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2IHB1bGwtcmlnaHQgaGlkZGVuLWxnLWRvd24gbmF2YmFyLXByb2ZpbGUiPgogICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPjxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iL3Byb2ZpbGUiPnt7QXV0aDo6dXNlcigpLT5maXJzdF9uYW1lfX0ge3tBdXRoOjp1c2VyKCktPmxhc3RfbmFtZX19PC9hPjwvbGk+CiAgICA8L3VsPgo8L25hdj4KPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1wbGFjZWhvbGRlciI+PC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1vdXRlci13cmFwcGVyIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1pbm5lci13cmFwcGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItMSI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1zZWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgQGlmKEF1dGg6OnVzZXIoKS0+cm9sZSA9PSBcQXBwXE1vZGVsc1xVc2VyOjpnZXRDb2FjaFJvbGUoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9teXJldmlld3MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9Im1haW4tbG9nby1pbWciIHNyYz0iL2ltYWdlcy9sb2dvLXdoaXRlLnBuZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlaWYoQXV0aDo6dXNlcigpLT5yb2xlID09IEFwcFxNb2RlbHNcVXNlcjo6Z2V0VXNlclJvbGUoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii92aWRlbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ibWFpbi1sb2dvLWltZyIgc3JjPSIvaW1hZ2VzL2xvZ28td2hpdGUucG5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgQGVsc2VpZihBdXRoOjp1c2VyKCktPnJvbGUgPT0gXEFwcFxNb2RlbHNcVXNlcjo6Z2V0QWRtaW5Sb2xlKCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJvZmlsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0ibWFpbi1sb2dvLWltZyIgc3JjPSIvaW1hZ2VzL2xvZ28td2hpdGUucG5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1uYXYiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzaWRlYmFyLXNlY3Rpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbi10aXRsZSI+QWNjb3VudDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHNlY3Rpb24tY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKEF1dGg6OnVzZXIoKS0+cm9sZSA9PSBBcHBcTW9kZWxzXFVzZXI6OmdldFVzZXJSb2xlKCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaWRlbGluZSB7eyBzdHJwb3ModXJsKCktPmN1cnJlbnQoKSwgJy92aWRlbycpICE9PSBmYWxzZSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RycG9zKHVybCgpLT5jdXJyZW50KCksICcvdmlkZW8vJykgPT09IGZhbHNlID8gJ3NpZGVsaW5lLWFjdGl2ZScgOiAnJyB9fSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9Ii92aWRlbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InptZGkgem1kaS1jb2xsZWN0aW9uLXZpZGVvIG1kLWljb24gcHVsbC1sZWZ0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlIj5NeSBWaWRlb3M8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBwaHAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIGlzc2V0KCRmbGFnKSApID8gJGJyb3dzZV9jb2FjaF9wYWdlID0gdHJ1ZSA6ICRicm93c2VfY29hY2hfcGFnZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRwaHAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoQXV0aDo6dXNlcigpLT5yb2xlID09IEFwcFxNb2RlbHNcVXNlcjo6Z2V0VXNlclJvbGUoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IChzdHJwb3ModXJsKCktPmN1cnJlbnQoKSwgJy9jdXN0b21lci9jb2FjaC9zZWFyY2gnKSAhPT0gZmFsc2UgfHwgJGJyb3dzZV9jb2FjaF9wYWdlICkgPyAnc2lkZWxpbmUtYWN0aXZlJyA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RycG9zKHVybCgpLT5jdXJyZW50KCksICcvdmlkZW8vY3JlYXRlJykgIT09IGZhbHNlID8gJ3NpZGVsaW5lLWFjdGl2ZScgOiAnJykgfX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJkb2NzIiBocmVmPSJ7eyByb3V0ZSgnY3VzdG9tZXJBY3Rpb25zLXNlYXJjaENvYWNoJykgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ6bWRpIHptZGkteW91dHViZS1wbGF5IG1kLWljb24gcHVsbC1sZWZ0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlIHdzMiI+QnJvd3NlIENvYWNoZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKEF1dGg6OnVzZXIoKS0+cm9sZSA9PSBcQXBwXE1vZGVsc1xVc2VyOjpnZXRDb2FjaFJvbGUoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IHN0cnBvcyh1cmwoKS0+Y3VycmVudCgpLCAnL215cmV2aWV3cycpICE9PSBmYWxzZSA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJkb2NzIiBocmVmPSIvbXlyZXZpZXdzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iem1kaSB6bWRpLWNvbW1lbnRzIG1kLWljb24gcHVsbC1sZWZ0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlIj5NeSBSZXZpZXdzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2lkZWxpbmUge3sgc3RycG9zKHVybCgpLT5jdXJyZW50KCksICcvbXktY2hhbGxlbmdlcycpICE9PSBmYWxzZSA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJkb2NzIiBocmVmPSIvbXktY2hhbGxlbmdlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InptZGkgem1kaS1jb21tZW50cyBtZC1pY29uIHB1bGwtbGVmdCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+TXkgQ2hhbGxlbmdlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IHN0cnBvcyh1cmwoKS0+Y3VycmVudCgpLCAnL2NoYWxsZW5nZS1wYXJ0aWNpcGFudCcpICE9PSBmYWxzZSA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJkb2NzIiBocmVmPSIvY2hhbGxlbmdlLXBhcnRpY2lwYW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iem1kaSB6bWRpLWNvbW1lbnRzIG1kLWljb24gcHVsbC1sZWZ0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlIj5DaGFsbGVuZ2UgUGFydGljaXBhbnRzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2lkZWxpbmUge3sgc3RycG9zKHVybCgpLT5jdXJyZW50KCksICcvbmV3LWNoYWxsZW5nZScpICE9PSBmYWxzZSA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPSJkb2NzIiBocmVmPSIvbmV3LWNoYWxsZW5nZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InptZGkgem1kaS1jb21tZW50cyBtZC1pY29uIHB1bGwtbGVmdCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+QWRkIENoYWxsZW5nZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPHVsIGNsYXNzPSJsMSBsaXN0LXVuc3R5bGVkIHNlY3Rpb24tY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIiBkYXRhLWlkPSJ0YWJsZXMxIiBkYXRhLWNsaWNrPSJ0b2dnbGUtc2VjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJwdWxsLXJpZ2h0IGZhIGZhLWNhcmV0LWRvd24gaWNvbi10YWJsZXMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXVzZXJzIG1kLWljb24gcHVsbC1sZWZ0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+QWdlbmN5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQgc2VjdGlvbi10YWJsZXMxIGwyIHt7IFJvdXRlOjpnZXRDdXJyZW50Um91dGUoKS0+Z2V0UHJlZml4KCkgPT0gJy9hZ2VuY3knICA/ICdhY3RpdmUnIDogJycgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2lkZWxpbmUge3sgUm91dGU6OmN1cnJlbnRSb3V0ZU5hbWUoKSA9PSAnYWdlbmN5JyA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iIGhyZWY9Int7IHVybCgnYWdlbmN5JykgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+QWxsIEFnZW5jeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IFJvdXRlOjpjdXJyZW50Um91dGVOYW1lKCkgPT0gJ2FkbWluLmNvYWNoZXMuY3JlYXRlJyA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iIGhyZWY9Int7IHVybCgnYWdlbmN5L2NyZWF0ZScpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkFkZCBuZXcgYWdlbmN5PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2lkZWxpbmUge3sgUm91dGU6OmN1cnJlbnRSb3V0ZU5hbWUoKSA9PSAnYWRtaW4uY29hY2hlcy5pbnZpdGVzJyA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iIGhyZWY9Int7IHVybCgnYWRtaW4vYXVkaXRpb25zJykgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+QWdlbmN5IEF1ZGl0aW9uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2lkZWxpbmUge3sgUm91dGU6OmN1cnJlbnRSb3V0ZU5hbWUoKSA9PSAnYWRtaW4uYWdlbmN5LWF1ZGl0aW9uJyA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iIGhyZWY9Int7IHVybCgnYWRtaW4vYWdlbmN5LWF1ZGl0aW9uJykgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+QWRkIEFnZW5jeSBBdWRpdGlvbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZihBdXRoOjp1c2VyKCktPnJvbGUgPT0gXEFwcFxNb2RlbHNcVXNlcjo6Z2V0QWRtaW5Sb2xlKCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibDEgbGlzdC11bnN0eWxlZCBzZWN0aW9uLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaWRlbGluZSB7eyBSb3V0ZTo6Y3VycmVudFJvdXRlTmFtZSgpID09ICdhZG1pbi5hbmFseXRpY3MuaW5kZXgnID8gJ3NpZGVsaW5lLWFjdGl2ZScgOiAnJyB9fSIgaHJlZj0ie3sgcm91dGUoJ2FkbWluLmFuYWx5dGljcy5pbmRleCcpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9InptZGkgem1kaS12aWV3LWRhc2hib2FyZCBtZC1pY29uIHB1bGwtbGVmdCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkRhc2hib2FyZDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImwxIGxpc3QtdW5zdHlsZWQgc2VjdGlvbi1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2lkZWxpbmUiIGRhdGEtaWQ9InRhYmxlcyIgZGF0YS1jbGljaz0idG9nZ2xlLXNlY3Rpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0icHVsbC1yaWdodCBmYSBmYS1jYXJldC1kb3duIGljb24tdGFibGVzIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS11c2VycyBtZC1pY29uIHB1bGwtbGVmdCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkNvYWNoZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBzZWN0aW9uLXRhYmxlcyBsMiB7eyBSb3V0ZTo6Z2V0Q3VycmVudFJvdXRlKCktPmdldFByZWZpeCgpID09ICcvY29hY2hlcycgID8gJ2FjdGl2ZScgOiAnJyB9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaWRlbGluZSB7eyBSb3V0ZTo6Y3VycmVudFJvdXRlTmFtZSgpID09ICdhZG1pbi5jb2FjaGVzLmluZGV4JyA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iIGhyZWY9Int7IHJvdXRlKCdhZG1pbi5jb2FjaGVzLmluZGV4JykgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+TGlzdDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IFJvdXRlOjpjdXJyZW50Um91dGVOYW1lKCkgPT0gJ2FkbWluLmNvYWNoZXMuY3JlYXRlJyA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iIGhyZWY9Int7IHJvdXRlKCdhZG1pbi5jb2FjaGVzLmNyZWF0ZScpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkNyZWF0ZSBuZXc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaWRlbGluZSB7eyBSb3V0ZTo6Y3VycmVudFJvdXRlTmFtZSgpID09ICdhZG1pbi5jb2FjaGVzLmludml0ZXMnID8gJ3NpZGVsaW5lLWFjdGl2ZScgOiAnJyB9fSIgaHJlZj0ie3sgcm91dGUoJ2FkbWluLmNvYWNoZXMuaW52aXRlcycpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkludml0ZXM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaWRlbGluZSB7eyBSZXF1ZXN0OjpzZWdtZW50KDIpID09J2NoYWxsZW5nZXMnID8gJ3NpZGVsaW5lLWFjdGl2ZScgOiAnJyB9fSIgaHJlZj0ie3sgdXJsKCdjb2FjaC9jaGFsbGVuZ2VzJykgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+Q2hhbGxlbmdlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IFJlcXVlc3Q6OnNlZ21lbnQoMikgPT0nYWRkLWNoYWxsZW5nZXMnID8gJ3NpZGVsaW5lLWFjdGl2ZScgOiAnJyB9fSIgaHJlZj0ie3sgdXJsKCdjb2FjaC9hZGQtY2hhbGxlbmdlcycpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkFkZCBDaGFsbGVuZ2VzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImwxIGxpc3QtdW5zdHlsZWQgc2VjdGlvbi1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2lkZWxpbmUiIGRhdGEtaWQ9InVzZXJzIiBkYXRhLWNsaWNrPSJ0b2dnbGUtc2VjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJwdWxsLXJpZ2h0IGZhIGZhLWNhcmV0LWRvd24gaWNvbi10YWJsZXMiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXVzZXJzIG1kLWljb24gcHVsbC1sZWZ0Ij48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+VXNlcnM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCBzZWN0aW9uLXVzZXJzIGwyIHt7IFJvdXRlOjpnZXRDdXJyZW50Um91dGUoKS0+Z2V0UHJlZml4KCkgPT0gJy91c2VycycgPyAnYWN0aXZlJyA6ICcnIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IFJvdXRlOjpjdXJyZW50Um91dGVOYW1lKCkgPT0gJ2FkbWluLnVzZXJzLmluZGV4JyA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iIGhyZWY9Int7IHJvdXRlKCdhZG1pbi51c2Vycy5pbmRleCcpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkxpc3Q8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaWRlbGluZSB7eyBSb3V0ZTo6Y3VycmVudFJvdXRlTmFtZSgpID09ICdhZG1pbi51c2Vycy5jcmVhdGUnID8gJ3NpZGVsaW5lLWFjdGl2ZScgOiAnJyB9fSIgaHJlZj0ie3sgcm91dGUoJ2FkbWluLnVzZXJzLmNyZWF0ZScpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkNyZWF0ZSBuZXc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibDEgbGlzdC11bnN0eWxlZCBzZWN0aW9uLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaWRlbGluZSIgZGF0YS1pZD0idGFibGVzMSIgZGF0YS1jbGljaz0idG9nZ2xlLXNlY3Rpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0icHVsbC1yaWdodCBmYSBmYS1jYXJldC1kb3duIGljb24tdGFibGVzIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS11c2VycyBtZC1pY29uIHB1bGwtbGVmdCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkFnZW5jeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJsaXN0LXVuc3R5bGVkIHNlY3Rpb24tdGFibGVzMSBsMiB7eyBSb3V0ZTo6Z2V0Q3VycmVudFJvdXRlKCktPmdldFByZWZpeCgpID09ICcvYWdlbmN5JyAgPyAnYWN0aXZlJyA6ICcnIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IFJvdXRlOjpjdXJyZW50Um91dGVOYW1lKCkgPT0gJ2FnZW5jeScgPyAnc2lkZWxpbmUtYWN0aXZlJyA6ICcnIH19IiBocmVmPSJ7eyB1cmwoJ2FnZW5jeScpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkFsbCBBZ2VuY3k8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaWRlbGluZSB7eyBSb3V0ZTo6Y3VycmVudFJvdXRlTmFtZSgpID09ICdhZG1pbi5jb2FjaGVzLmNyZWF0ZScgPyAnc2lkZWxpbmUtYWN0aXZlJyA6ICcnIH19IiBocmVmPSJ7eyB1cmwoJ2FnZW5jeS9jcmVhdGUnKSB9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlIj5BZGQgbmV3IGFnZW5jeTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IFJvdXRlOjpjdXJyZW50Um91dGVOYW1lKCkgPT0gJ2FkbWluLmNvYWNoZXMuaW52aXRlcycgPyAnc2lkZWxpbmUtYWN0aXZlJyA6ICcnIH19IiBocmVmPSJ7eyB1cmwoJ2FkbWluL2F1ZGl0aW9ucycpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkFnZW5jeSBBdWRpdGlvbjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IFJvdXRlOjpjdXJyZW50Um91dGVOYW1lKCkgPT0gJ2FkbWluLmFnZW5jeS1hdWRpdGlvbicgPyAnc2lkZWxpbmUtYWN0aXZlJyA6ICcnIH19IiBocmVmPSJ7eyB1cmwoJ2FkbWluL2FnZW5jeS1hdWRpdGlvbicpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGl0bGUiPkFkZCBBZ2VuY3kgQXVkaXRpb248L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7LS08dWwgY2xhc3M9ImwxIGxpc3QtdW5zdHlsZWQgc2VjdGlvbi1jb250ZW50Ij4tLX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ey0tPGxpPi0tfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ey0tPGEgY2xhc3M9InNpZGVsaW5lIHt7IFJvdXRlOjpjdXJyZW50Um91dGVOYW1lKCkgPT0gJ2FkbWluLmNvYWNoZXMuaW5kZXgnID8gJ3NpZGVsaW5lLWFjdGl2ZScgOiAnJyB9fSItLX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3stLWRhdGEtaWQ9ImRvY3MiIGhyZWY9Int7IHJvdXRlKCdhZG1pbi5jb2FjaGVzLmluZGV4JykgfX0iIGRhdGEtY2xpY2s9InRvZ2dsZS1zZWN0aW9uIj4tLX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7LS08aSBjbGFzcz0icHVsbC1yaWdodCBmYSBmYS1jYXJldC1kb3duIGljb24tZGFzaGJvYXJkcyBmYS1yb3RhdGUtMTgwIj48L2k+LS19fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ey0tPGkgY2xhc3M9ImZhIGZhLXVzZXJzIG1kLWljb24gcHVsbC1sZWZ0Ij48L2k+LS19fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ey0tPHNwYW4gY2xhc3M9InRpdGxlIj5Db2FjaGVzPC9zcGFuPi0tfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ey0tPC9hPi0tfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7LS08L2xpPi0tfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3stLTwvdWw+LS19fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ey0tPGxpPi0tfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7LS08YSBjbGFzcz0ic2lkZWxpbmUge3sgUm91dGU6OmN1cnJlbnRSb3V0ZU5hbWUoKSA9PSAnYWRtaW4udXNlcnMuaW5kZXgnID8gJ3NpZGVsaW5lLWFjdGl2ZScgOiAnJyB9fSItLX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ey0tZGF0YS1pZD0iZG9jcyIgaHJlZj0ie3sgcm91dGUoJ2FkbWluLnVzZXJzLmluZGV4JykgfX0iPi0tfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ey0tPGkgY2xhc3M9ImZhIGZhLXVzZXJzIG1kLWljb24gcHVsbC1sZWZ0Ij48L2k+LS19fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7LS08c3BhbiBjbGFzcz0idGl0bGUiPlVzZXJzPC9zcGFuPi0tfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7LS08L2E+LS19fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ey0tPC9saT4tLX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InNpZGVsaW5lIHt7IChzdHJwb3ModXJsKCktPmN1cnJlbnQoKSwgJy9wcm9maWxlJykgIT09IGZhbHNlICYmICEkYnJvd3NlX2NvYWNoX3BhZ2UgKSA/ICdzaWRlbGluZS1hY3RpdmUnIDogJycgfX0iIGhyZWY9Ii9wcm9maWxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJ6bWRpIHptZGktYWNjb3VudC1jaXJjbGUgbWQtaWNvbiBwdWxsLWxlZnQiPjwvaT48c3BhbiBjbGFzcz0idGl0bGUiPk15IFByb2ZpbGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoYXV0aCgpLT51c2VyKCktPmlzQWRtaW4oKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJzaWRlbGluZSB7eyBSb3V0ZTo6Y3VycmVudFJvdXRlTmFtZSgpID09ICdhZG1pbi5zZXR0aW5ncy5pbmRleCcgPyAnc2lkZWxpbmUtYWN0aXZlJyA6ICcnIH19IiBocmVmPSJ7eyByb3V0ZSgnYWRtaW4uc2V0dGluZ3MuaW5kZXgnKSB9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY29ncyBtZC1pY29uIHB1bGwtbGVmdCI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRpdGxlIj5TZXR0aW5nczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ic2lkZWxpbmUiIGhyZWY9Int7IHJvdXRlKCdhZG1pbi50YXhyYXRlLmluZGV4JykgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNvZ3MgbWQtaWNvbiBwdWxsLWxlZnQiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ0aXRsZSI+VGF4IFJhdGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgY2xhc3M9InNpZGVsaW5lIiBocmVmPSIvYXV0aC9sb2dvdXQiPjxpIGNsYXNzPSJ6bWRpIHptZGktcG93ZXIgbWQtaWNvbiBwdWxsLWxlZnQiPjwvaT48c3BhbiBjbGFzcz0idGl0bGUiPkxvZ291dDwvc3Bhbj48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LXNpZGViYXItb3V0ZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1zaWRlYmFyLWlubmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LXNpZGViYXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJzLW5hdi10YWJzIG5hdi10YWJzLXdhcm5pbmcganVzdGlmaWVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSBpbiBhY3RpdmUiIGlkPSJydGFiLWxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBpZD0ibm90aWZpY2F0aW9uX3RpdHRsZSI+Tm8gbm90aWZpY2F0aW9uczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGltZWxpbmUtd2lkZ2V0LTQiIGlkPSJub3RpZmljYXRpb25fYmxrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IGJnLW9kZC1jb2xvciIgaWQ9Im5vdGlmaWNhdGlvbl90cGwiIGhpZGRlbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiB0aW1lbGluZSB0aW1lbGluZS13YXJuaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5vdGlmaWNhdGlvbl9tc2ciPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGEgY2xhc3M9InJldmlld19saW5rIiBocmVmPSIjIj48c3BhbiBjbGFzcz0ibGFiZWwgbGFiZWwtd2FybmluZyI+U2hvdyByZXZpZXc8L3NwYW4+PC9hPjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtc20gdGV4dC1tdXRlZCBub3RpZmljYXRpb25fZGF0ZSI+PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBtYWluIiBpZD0ibWFpbiIgc3R5bGU9Im1pbi1oZWlnaHQ6IDk5MHB4OyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLWItNDAiPgogICAgICAgICAgICAgICAgQHlpZWxkKCdjb250ZW50JykKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3RlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgIMKpIHt7IGRhdGUoJ1knKSB9fS4gU2hvd2Nhc2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS08YSBocmVmPSIvIiB0YXJnZXQ9Il9ibGFuayI+QnV5IFNob3djYXNlPC9hPi0tPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgIDwvZGl2Pgo8L2Rpdj4KCjwvYm9keT4KPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvdGV0aGVyL2Rpc3QvanMvdGV0aGVyLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvYm9vdHN0cmFwL2Rpc3QvanMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvYm9vdHN0cmFwLWRhdGVwaWNrZXIvZGlzdC9qcy9ib290c3RyYXAtZGF0ZXBpY2tlci5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2Fzc2V0cy9tYXJpbm8vYm93ZXJfY29tcG9uZW50cy9tam9sbmljLWJvb3RzdHJhcC1jb2xvcnBpY2tlci9kaXN0L2pzL2Jvb3RzdHJhcC1jb2xvcnBpY2tlci5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvYXNzZXRzL21hcmluby9zY3JpcHRzL2Zvcm1zLXBpY2tlcnMuanMiPjwvc2NyaXB0Pgo8IS0tPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyL2Rpc3QvanMvYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLm1pbi5qcyI+PC9zY3JpcHQ+LS0+CjwhLS0gICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICAkKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQoJyNkYXRldGltZXBpY2tlcjEnKS5kYXRldGltZXBpY2tlcigpOwogICAgICAgICAgICB9KTsKICAgICAgICA8L3NjcmlwdD4tLT4KPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvUEFDRS9wYWNlLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2xvZGFzaC5qcy80LjAuMC9sb2Rhc2gubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvanF1ZXJ5LXN0b3JhZ2UtYXBpL2pxdWVyeS5zdG9yYWdlYXBpLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvYXNzZXRzL21hcmluby9ib3dlcl9jb21wb25lbnRzL3dvdy9kaXN0L3dvdy5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2Fzc2V0cy9tYXJpbm8vc2NyaXB0cy9mdW5jdGlvbnMuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2Fzc2V0cy9tYXJpbm8vc2NyaXB0cy9jb2xvcnMuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2Fzc2V0cy9tYXJpbm8vc2NyaXB0cy9sZWZ0LXNpZGViYXIuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2Fzc2V0cy9tYXJpbm8vc2NyaXB0cy9uYXZiYXIuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iL2Fzc2V0cy9tYXJpbm8vc2NyaXB0cy9ob3Jpem9udGFsLW5hdmlnYXRpb24tMS5qcyI+PC9zY3JpcHQ+Cgo8c2NyaXB0IHNyYz0iL2Fzc2V0cy9tYXJpbm8vc2NyaXB0cy9ob3Jpem9udGFsLW5hdmlnYXRpb24tMi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvYXNzZXRzL2pzL2FwcC5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvYXNzZXRzL21hcmluby9zY3JpcHRzL2hvcml6b250YWwtbmF2aWdhdGlvbi0zLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL3NjcmlwdHMvbWFpbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvYXNzZXRzL21hcmluby9ib3dlcl9jb21wb25lbnRzL25vdGlmeWpzL2Rpc3Qvbm90aWZ5LmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL0NoYXJ0LmpzLzEuMC4yL0NoYXJ0Lm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSIvYXNzZXRzL21hcmluby9ib3dlcl9jb21wb25lbnRzL2NoYXJ0aXN0L2Rpc3QvY2hhcnRpc3QubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Vhc3ktcGllLWNoYXJ0LzIuMS42L2pxdWVyeS5lYXN5cGllY2hhcnQubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL2Jvd2VyX2NvbXBvbmVudHMvZDMvZDMuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvdG9wb2pzb24vMS42LjkvdG9wb2pzb24ubWluLmpzIj48L3NjcmlwdD4KPCEtLTxzY3JpcHQgc3JjPSJodHRwOi8vYm93ZXIuYmF0Y2h0aGVtZXMuY29tL2Jvd2VyX2NvbXBvbmVudHMvZGF0YW1hcHMvZGlzdC9kYXRhbWFwcy5hbGwuanMiPjwvc2NyaXB0Pi0tPgo8IS0tPHNjcmlwdCBzcmM9Ii9hc3NldHMvbWFyaW5vL3NjcmlwdHMvZGFzaGJvYXJkcy5qcyI+PC9zY3JpcHQ+LS0+CjwhLS08c2NyaXB0IHNyYz0iL2Fzc2V0cy9tYXJpbm8vc2NyaXB0cy9pbmRleC5qcyI+PC9zY3JpcHQ+LS0+CkB5aWVsZCgnanMnKQo8L2h0bWw+IjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";