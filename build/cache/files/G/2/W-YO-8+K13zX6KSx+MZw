1665722087
waR3U4bTeM%3A354f157eac31aa90c9887ee5cfbf5862-058df49dac4347be14c72b5cfb0a5b78
s:25628:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjA1OGRmNDlkYWM0MzQ3YmUxNGM3MmI1Y2ZiMGE1Yjc4IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTQ6InNob3cuYmxhZGUucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NDM6InJlc291cmNlcy92aWV3cy0yMi0wNS9yZXZpZXcvc2hvdy5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjE4NDA0OiJAZXh0ZW5kcygnbGF5b3V0cy5hcHAnKQoKQHNlY3Rpb24oJ2NzcycpCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9hc3NldHMvanMvcmF0ZWl0L3JhdGVpdC5jc3MiPgogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KICAgICAgICAudmlkZW9XcmFwcGVyIHsKICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNTYuMjUlOyAvKiAxNjo5ICovCiAgICAgICAgICAgIHBhZGRpbmctdG9wOiAyNXB4OwogICAgICAgICAgICBoZWlnaHQ6IDA7CiAgICAgICAgfQoKICAgICAgICAudmlkZW9XcmFwcGVyIGlmcmFtZSB7CiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgICAgdG9wOiAwOwogICAgICAgICAgICBsZWZ0OiAwOwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIH0KCiAgICAgICAgLnRleHQtZ3JheSB7CiAgICAgICAgICAgIGNvbG9yOiAjODE4MTgxICFpbXBvcnRhbnQ7CiAgICAgICAgfQogICAgPC9zdHlsZT4KQGVuZHNlY3Rpb24KCkBzZWN0aW9uKCdjb250ZW50JykKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CgogICAgICAgIDxoMSBjbGFzcz0iZi1zLTQ4IGYtdy00MDAgdGV4dC11cHBlcmNhc2UgdGV4dC1kYW5nZXIgdGV4dC1jZW50ZXIgbS1iLTIwIj4KICAgICAgICAgICAge3sgJHJldmlldy0+dmlkZW8tPnVzZXItPmZpcnN0X25hbWUgLiAnICcgLiAkcmV2aWV3LT52aWRlby0+dXNlci0+bGFzdF9uYW1lIH19IC0gUmV2aWV3CiAgICAgICAgPC9oMT4KCiAgICAgICAgPGRpdiBjbGFzcz0icm93IG0tYi0yMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+CiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InRleHQtY2VudGVyIG0tYi0wIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZi1zLTE4IHRleHQtdXBwZXJjYXNlIGYtdy01MDAgdGV4dC1ncmF5Ij5MZXZlbDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImYtcy0xOCI+e3sgJHJldmlldy0+dmlkZW8tPnBlcmZvcm1hbmNlX2xldmVsLT5uYW1lIH19PC9zcGFuPgogICAgICAgICAgICAgICAgPC9oMz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTEwIGNvbC1tZC1vZmZzZXQtMSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciID4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGFsaWduPSJjZW50ZXIiIGNsYXNzPSJlbWJlZC1yZXNwb25zaXZlIGVtYmVkLXJlc3BvbnNpdmUtMTZieTkiPgogICAgICAgICAgICAgICAgICAgICAgICA8dmlkZW8gd2lkdGg9IjcyOCIgaGVpZ2h0PSI0MTAiIGNvbnRyb2xzIGNsYXNzPSJlbWJlZC1yZXNwb25zaXZlLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9Int7dXJsKCcvJykgLiBjb25maWcoJ3ZpZGVvLmNvbXBsZXRlZF9yZXZpZXdfcGF0aCcpIC4gJHJldmlldy0+cmV2aWV3X3VybH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IEhUTUw1IHZpZGVvLgogICAgICAgICAgICAgICAgICAgICAgICA8L3ZpZGVvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTEwIGNvbC1tZC1vZmZzZXQtMSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLXQtMTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC02Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InRleHQtZGFuZ2VyIGYtcy0yMiBmLXctNTAwIHRleHQtdXBwZXJjYXNlIj5Qcm9maWxlPC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InAtbC0yMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4gPHNwYW4gY2xhc3M9InRleHQtdXBwZXJjYXNlIj5Mb2NhdGlvbjogPC9zcGFuPiB7eyAkcmV2aWV3LT52aWRlby0+dXNlci0+bG9jYXRpb24gfX08L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAcGhwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYWdlID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhZ2UgPSBDYXJib25cQ2FyYm9uOjpwYXJzZSgkcmV2aWV3LT52aWRlby0+dXNlci0+YmlydGhkYXkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhZ2UgPSAkYWdlLT5kaWZmSW5ZZWFycyhDYXJib25cQ2FyYm9uOjpub3coKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChcRXhjZXB0aW9uICRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFnZSA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kcGhwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4gPHNwYW4gY2xhc3M9InRleHQtdXBwZXJjYXNlIj5BZ2U6IDwvc3Bhbj4ge3sgJGFnZSB9fTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4gPHNwYW4gY2xhc3M9InRleHQtdXBwZXJjYXNlIj5BY3Rpdml0eSBleHBlcmllbmNlIDwvc3Bhbj4oeWVhcnMpOiB7eyAkcmV2aWV3LT52aWRlby0+YWN0aXZpdHlfZXhwZXJpZW5jZSB9fTwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4gPHNwYW4gY2xhc3M9InRleHQtdXBwZXJjYXNlIj5TZWVraW5nIGF1ZGl0aW9uczogPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtY2FwaXRhbGl6ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgc3RyX3JlcGxhY2UoJ18nLCAnICcsICRyZXZpZXctPnZpZGVvLT5zZWVraW5nX2F1ZGl0aW9ucyl9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCFpc19udWxsKCRyZXZpZXctPnBlcmZvcm1hbmNlX2xldmVsX3BsYWNlbWVudCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iZi1zLTE4IGYtdy01MDAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZXZlbDoge3sgJHJldmlldy0+cGVyZm9ybWFuY2VfbGV2ZWxfcGxhY2VtZW50LT5uYW1lIH19PC9oND4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJmLXMtMTggZi13LTUwMCIgc3R5bGU9ImRpc3BsYXk6IGlubGluZTsiPk92ZXJhbGwgcmF0aW5nOiA8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZi1zLTE4IGYtdy01MDAgbS1yLTUiIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmU7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBzdHJsZW4oJHJldmlldy0+b3ZlcmFsbF9yYXRpbmcpID09IDEgPyAkcmV2aWV3LT5vdmVyYWxsX3JhdGluZyAuICcuMCcgOiAkcmV2aWV3LT5vdmVyYWxsX3JhdGluZ319CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBiaWdzdGFycyIgZGF0YS1yYXRlaXQtdmFsdWU9Int7JHJldmlldy0+b3ZlcmFsbF9yYXRpbmd9fSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtaXNwcmVzZXQ9InRydWUiIGRhdGEtcmF0ZWl0LXJlYWRvbmx5PSJ0cnVlIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0idGV4dC1kYW5nZXIgZi1zLTIyIGYtdy01MDAgdGV4dC11cHBlcmNhc2UiPkZlZWRiYWNrIFN1bW1hcnk8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPiB7eyAkcmV2aWV3LT5tZXNzYWdlIH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJkaXNwbGF5OiBub25lOyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0idmlkZW9faWQiIGRhdGEtdmlkZW8taWQ9Int7JHJldmlldy0+dmlkZW8tPmlkfX0iPnt7JHJldmlldy0+dmlkZW8tPm5hbWV9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJ1c2VyX2lkIiBkYXRhLXVzZXItaWQ9Int7JHJldmlldy0+dmlkZW8tPnVzZXJfaWR9fSI+e3skcmV2aWV3LT52aWRlby0+dXNlcl9maXJzdF9uYW1lfX0gIHt7JHJldmlldy0+dmlkZW8tPnVzZXJfbGFzdF9uYW1lfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1jZW50ZXIgdGV4dC1kYW5nZXIgZi13LTUwMCBmLXMtMjIiPlRFQ0hOSVFVRSBTQ09SRTwvcD4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImRpc3BsYXk6IGJsb2NrIiBjbGFzcz0ibS1iLTUgY2FwaXRhbGl6ZSI+VGltaW5nIHt7bnVtYmVyX2Zvcm1hdCgkcmV2aWV3LT50aW1pbmcsMSl9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IiBkYXRhLXJhdGVpdC12YWx1ZT0ie3skcmV2aWV3LT50aW1pbmd9fSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtaXNwcmVzZXQ9InRydWUiIGRhdGEtcmF0ZWl0LXJlYWRvbmx5PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTogYmxvY2s7IGZsb2F0OiBsZWZ0OyB3aWR0aDogMTAwJSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQgc3R5bGU9ImZsb2F0OiBsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZSBzdHlsZT0iZGlzcGxheTogYmxvY2s7IGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzI2MjkzMjsiIGNsYXNzPSJwLWwtMTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21tZW50czoge3sgJHJldmlldy0+dGltaW5nX2NvbW1lbnQgPyAkcmV2aWV3LT50aW1pbmdfY29tbWVudCA6ICdub25lJyB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYmxvY2txdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImRpc3BsYXk6IGJsb2NrIiBjbGFzcz0ibS1iLTUgY2FwaXRhbGl6ZSI+Rm9vdHdvcmsge3tudW1iZXJfZm9ybWF0KCRyZXZpZXctPmZvb3R3b3JrLDEpfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtdmFsdWU9Int7JHJldmlldy0+Zm9vdHdvcmt9fSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtaXNwcmVzZXQ9InRydWUiIGRhdGEtcmF0ZWl0LXJlYWRvbmx5PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTogYmxvY2s7IGZsb2F0OiBsZWZ0OyB3aWR0aDogMTAwJSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQgc3R5bGU9ImZsb2F0OiBsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZSBzdHlsZT0iZGlzcGxheTogYmxvY2s7IGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzI2MjkzMjsiIGNsYXNzPSJwLWwtMTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21tZW50czoge3sgJHJldmlldy0+Zm9vdHdvcmtfY29tbWVudCA/ICRyZXZpZXctPmZvb3R3b3JrX2NvbW1lbnQgOiAnbm9uZScgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBibG9jayIgY2xhc3M9Im0tYi01IGNhcGl0YWxpemUiPkFsaWdubWVudCB7e251bWJlcl9mb3JtYXQoJHJldmlldy0+YWxpbmdtZW50LDEpfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtdmFsdWU9Int7JHJldmlldy0+YWxpbmdtZW50fX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LWlzcHJlc2V0PSJ0cnVlIiBkYXRhLXJhdGVpdC1yZWFkb25seT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDEwMCUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IHN0eWxlPSJmbG9hdDogbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBib3JkZXItbGVmdDogMXB4IHNvbGlkICMyNjI5MzI7IiBjbGFzcz0icC1sLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVudHM6IHt7ICRyZXZpZXctPmFsaW5nbWVudF9jb21tZW50ID8gJHJldmlldy0+YWxpbmdtZW50X2NvbW1lbnQgOiAnbm9uZScgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBibG9jayIgY2xhc3M9Im0tYi01IGNhcGl0YWxpemUiPmJhbGFuY2Uge3tudW1iZXJfZm9ybWF0KCRyZXZpZXctPmJhbGFuY2UsMSl9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IiBkYXRhLXJhdGVpdC12YWx1ZT0ie3skcmV2aWV3LT5iYWxhbmNlfX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LWlzcHJlc2V0PSJ0cnVlIiBkYXRhLXJhdGVpdC1yZWFkb25seT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDEwMCUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IHN0eWxlPSJmbG9hdDogbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBib3JkZXItbGVmdDogMXB4IHNvbGlkICMyNjI5MzI7IiBjbGFzcz0icC1sLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVudHM6IHt7ICRyZXZpZXctPmJhbGFuY2VfY29tbWVudCA/ICRyZXZpZXctPmJhbGFuY2VfY29tbWVudCA6ICdub25lJyB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYmxvY2txdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImRpc3BsYXk6IGJsb2NrIiBjbGFzcz0ibS1iLTUgY2FwaXRhbGl6ZSI+Zm9jdXMge3tudW1iZXJfZm9ybWF0KCRyZXZpZXctPmZvY3VzLDEpfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtdmFsdWU9Int7JHJldmlldy0+Zm9jdXN9fSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtaXNwcmVzZXQ9InRydWUiIGRhdGEtcmF0ZWl0LXJlYWRvbmx5PSJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT0iZGlzcGxheTogYmxvY2s7IGZsb2F0OiBsZWZ0OyB3aWR0aDogMTAwJSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQgc3R5bGU9ImZsb2F0OiBsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmxvY2txdW90ZSBzdHlsZT0iZGlzcGxheTogYmxvY2s7IGJvcmRlci1sZWZ0OiAxcHggc29saWQgIzI2MjkzMjsiIGNsYXNzPSJwLWwtMTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21tZW50czoge3sgJHJldmlldy0+Zm9jdXNfY29tbWVudCA/ICRyZXZpZXctPmZvY3VzX2NvbW1lbnQgOiAnbm9uZScgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBibG9jayIgY2xhc3M9Im0tYi01IGNhcGl0YWxpemUiPnByZWNpc2lvbiB7e251bWJlcl9mb3JtYXQoJHJldmlldy0+cHJlY2lzaW9uLDEpfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtdmFsdWU9Int7JHJldmlldy0+cHJlY2lzaW9ufX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LWlzcHJlc2V0PSJ0cnVlIiBkYXRhLXJhdGVpdC1yZWFkb25seT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDEwMCUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IHN0eWxlPSJmbG9hdDogbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBib3JkZXItbGVmdDogMXB4IHNvbGlkICMyNjI5MzI7IiBjbGFzcz0icC1sLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVudHM6IHt7ICRyZXZpZXctPnByZWNpc2lvbl9jb21tZW50ID8gJHJldmlldy0+cHJlY2lzaW9uX2NvbW1lbnQgOiAnbm9uZScgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWNlbnRlciB0ZXh0LWRhbmdlciBmLXctNTAwIGYtcy0yMiB1cHBlcmNhc2UiPkV4cHJlc3Npb248L3A+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBibG9jayIgY2xhc3M9Im0tYi01IGNhcGl0YWxpemUiPmVuZXJneSB7e251bWJlcl9mb3JtYXQoJHJldmlldy0+ZW5lcmd5LDEpfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtdmFsdWU9Int7JHJldmlldy0+ZW5lcmd5fX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LWlzcHJlc2V0PSJ0cnVlIiBkYXRhLXJhdGVpdC1yZWFkb25seT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDEwMCUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IHN0eWxlPSJmbG9hdDogbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBib3JkZXItbGVmdDogMXB4IHNvbGlkICMyNjI5MzI7IiBjbGFzcz0icC1sLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVudHM6IHt7ICRyZXZpZXctPmVuZXJneV9jb21tZW50ID8gJHJldmlldy0+ZW5lcmd5X2NvbW1lbnQgOiAnbm9uZScgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBibG9jayIgY2xhc3M9Im0tYi01IGNhcGl0YWxpemUiPnN0eWxlIHt7bnVtYmVyX2Zvcm1hdCgkcmV2aWV3LT5zdHlsZSwxKX19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0ZWl0IHB1bGwtcmlnaHQiIGRhdGEtcmF0ZWl0LXZhbHVlPSJ7eyRyZXZpZXctPnN0eWxlfX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LWlzcHJlc2V0PSJ0cnVlIiBkYXRhLXJhdGVpdC1yZWFkb25seT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDEwMCUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IHN0eWxlPSJmbG9hdDogbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBib3JkZXItbGVmdDogMXB4IHNvbGlkICMyNjI5MzI7IiBjbGFzcz0icC1sLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVudHM6IHt7ICRyZXZpZXctPnN0eWxlX2NvbW1lbnQgPyAkcmV2aWV3LT5zdHlsZV9jb21tZW50IDogJ25vbmUnIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9ibG9ja3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtMyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZGlzcGxheTogYmxvY2siIGNsYXNzPSJtLWItNSBjYXBpdGFsaXplIj5jcmVhdGl2aXR5IHt7bnVtYmVyX2Zvcm1hdCgkcmV2aWV3LT5jcmVhdGl2aXR5LDEpfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtdmFsdWU9Int7JHJldmlldy0+Y3JlYXRpdml0eX19IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC1pc3ByZXNldD0idHJ1ZSIgZGF0YS1yYXRlaXQtcmVhZG9ubHk9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBibG9jazsgZmxvYXQ6IGxlZnQ7IHdpZHRoOiAxMDAlIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldCBzdHlsZT0iZmxvYXQ6IGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxibG9ja3F1b3RlIHN0eWxlPSJkaXNwbGF5OiBibG9jazsgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjMjYyOTMyOyIgY2xhc3M9InAtbC0xMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW1lbnRzOiB7eyAkcmV2aWV3LT5jcmVhdGl2aXR5X2NvbW1lbnQgPyAkcmV2aWV3LT5jcmVhdGl2aXR5X2NvbW1lbnQgOiAnbm9uZScgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Jsb2NrcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBibG9jayIgY2xhc3M9Im0tYi01IGNhcGl0YWxpemUiPmludGVycHJldGF0aW9uIHt7bnVtYmVyX2Zvcm1hdCgkcmV2aWV3LT5pbnRlcnByZXRhdGlvbiwxKX19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0ZWl0IHB1bGwtcmlnaHQiIGRhdGEtcmF0ZWl0LXZhbHVlPSJ7eyRyZXZpZXctPmludGVycHJldGF0aW9ufX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LWlzcHJlc2V0PSJ0cnVlIiBkYXRhLXJhdGVpdC1yZWFkb25seT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDEwMCUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IHN0eWxlPSJmbG9hdDogbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBib3JkZXItbGVmdDogMXB4IHNvbGlkICMyNjI5MzI7IiBjbGFzcz0icC1sLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVudHM6IHt7ICRyZXZpZXctPmludGVycHJldGF0aW9uX2NvbW1lbnQgPyAkcmV2aWV3LT5pbnRlcnByZXRhdGlvbl9jb21tZW50IDogJ25vbmUnIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9ibG9ja3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGhyPgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1jZW50ZXIgdGV4dC1kYW5nZXIgZi13LTUwMCBmLXMtMjIgdXBwZXJjYXNlIj5DaG9yZW9ncmFwaHk8L3A+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJkaXNwbGF5OiBibG9jayIgY2xhc3M9Im0tYi01IGYtcy0xOCBjYXBpdGFsaXplIj5mb3JtYXRpb24ge3tudW1iZXJfZm9ybWF0KCRyZXZpZXctPmZvcm1hdGlvbiwxKX19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0ZWl0IHB1bGwtcmlnaHQiIGRhdGEtcmF0ZWl0LXZhbHVlPSJ7eyRyZXZpZXctPmZvcm1hdGlvbn19IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC1pc3ByZXNldD0idHJ1ZSIgZGF0YS1yYXRlaXQtcmVhZG9ubHk9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPSJkaXNwbGF5OiBibG9jazsgZmxvYXQ6IGxlZnQ7IHdpZHRoOiAxMDAlIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldCBzdHlsZT0iZmxvYXQ6IGxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxibG9ja3F1b3RlIHN0eWxlPSJkaXNwbGF5OiBibG9jazsgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjMjYyOTMyOyIgY2xhc3M9InAtbC0xMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW1lbnRzOiB7eyAkcmV2aWV3LT5mb3JtYXRpb25fY29tbWVudCA/ICRyZXZpZXctPmZvcm1hdGlvbl9jb21tZW50IDogJ25vbmUnIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9ibG9ja3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZGlzcGxheTogYmxvY2siIGNsYXNzPSJtLWItNSBmLXMtMTggY2FwaXRhbGl6ZSI+YXJ0aXN0cnkge3tudW1iZXJfZm9ybWF0KCRyZXZpZXctPmFydGlzdHksMSl9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IiBkYXRhLXJhdGVpdC12YWx1ZT0ie3skcmV2aWV3LT5hcnRpc3R5fX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LWlzcHJlc2V0PSJ0cnVlIiBkYXRhLXJhdGVpdC1yZWFkb25seT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDEwMCUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0IHN0eWxlPSJmbG9hdDogbGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJsb2NrcXVvdGUgc3R5bGU9ImRpc3BsYXk6IGJsb2NrOyBib3JkZXItbGVmdDogMXB4IHNvbGlkICMyNjI5MzI7IiBjbGFzcz0icC1sLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWVudHM6IHt7ICRyZXZpZXctPmFydGlzdHlfY29tbWVudCA/ICRyZXZpZXctPmFydGlzdHlfY29tbWVudCA6ICdub25lJyB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYmxvY2txdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxocj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgQGlmKCRyZXZpZXctPnZpZGVvLT5xdWVzdGlvbnMtPmNvdW50KCkpCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ4b2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0idGV4dC1kYW5nZXIgdGV4dC11cHBlcmNhc2UgZi1zLTIyIGYtdy01MDAgdGV4dC1jZW50ZXIgbS1iLTE1Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFF1ZXN0aW9ucyBhbmQgYW5zd2VycwogICAgICAgICAgICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICBAZm9yZWFjaCgkcmV2aWV3LT52aWRlby0+cXVlc3Rpb25zIGFzICRRQSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz57eyAkUUEtPnF1ZXN0aW9uIH19PC9zdHJvbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3sgJFFBLT5hbnN3ZXIgfX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGZvcmVhY2gKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIiPgogICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iZi1zLTIyIHVwcGVyY2FzZSB0ZXh0LWRhbmdlciBmLXctNTAwIG0tYi0xNSI+CiAgICAgICAgICAgICAgICAgICAgICAgIEFkZGl0aW9uYWwgdGlwcyBmb3Ige3sgJHJldmlldy0+dmlkZW8tPnVzZXItPmZpcnN0X25hbWUgfX0KICAgICAgICAgICAgICAgICAgICA8L2g0PgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQiIHN0eWxlPSJ3b3JkLWJyZWFrOmJyZWFrLWFsbDsiPgogICAgICAgICAgICAgICAgICAgICAgICB7eyAkcmV2aWV3LT5hZGRpdGlvbmFsX3RpcHMgIH19CiAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8aHI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CkBlbmRzZWN0aW9uCgpAc2VjdGlvbignanMnKQogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvd2ViZm9udC8xLjYuMTYvd2ViZm9udC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iL2Fzc2V0cy9qcy9yYXRlaXQvanF1ZXJ5LnJhdGVpdC5qcyI+PC9zY3JpcHQ+CkBlbmRzZWN0aW9uCiI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";