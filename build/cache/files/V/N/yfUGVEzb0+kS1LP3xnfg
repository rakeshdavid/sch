1665722086
waR3U4bTeM%3Ac639ab00eb980a899e4d9a81b100e51f-e20ab5b9f7f5dc1a941fd4fd8c64746c
s:25404:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImUyMGFiNWI5ZjdmNWRjMWE5NDFmZDRmZDhjNjQ3NDZjIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjM6InVwZGF0ZS1yZXZpZXcuYmxhZGUucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NDY6InJlc291cmNlcy92aWV3cy9hZ2VuY3kvdXBkYXRlLXJldmlldy5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjE4MjI1OiJAZXh0ZW5kcygnbGF5b3V0cy5hZ2VuY3knKQpAc2VjdGlvbignY3NzJykKCTxsaW5rIGhyZWY9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vc3VtbWVybm90ZUAwLjguMTgvZGlzdC9zdW1tZXJub3RlLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii9hc3NldHMvanMvcmF0ZWl0L3JhdGVpdC5jc3MiPgogICAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Fzc2V0cy9qcy90b2FzdHIvdG9hc3RyLm1pbi5jc3MiPgogICAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Fzc2V0cy9qcy9zd2VldGFsZXJ0L3N3ZWV0LWFsZXJ0LmNzcyI+CiAgICA8c3R5bGU+CiAgICAJdGV4dGFyZWF7d2lkdGg6IDEwMCU7cGFkZGluZzogMTBweDtoZWlnaHQ6MTAwcHg7fQogICAgPC9zdHlsZT4KQGVuZHNlY3Rpb24KQHNlY3Rpb24oJ2NvbnRlbnQnKQo8ZGl2IGNsYXNzPSJtYWluLWNvbnRlbnQgYXVkaXRpb25zLXdyYXAiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoJICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgoJICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29hY2gtbGlzdCBtYi00Ij4KCSAgICAgICAgICAgICAgICA8aDM+UmV2aWV3IFBhcnRpY2lwYW50IFZpZGVvPC9oMz4KCSAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgQGlmKHNlc3Npb24oKS0+aGFzKCdtZXNzYWdlJykpCgkJCQkgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtc3VjY2VzcyI+CgkJCQkgICAgICAgIHt7IHNlc3Npb24oKS0+Z2V0KCdtZXNzYWdlJykgfX0KCQkJCSAgICA8L2Rpdj4KCQkJCUBlbmRpZgoJCQkJQGlmICgkZXJyb3JzLT5hbnkoKSkKCQkJCSAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRUYwMDI1Ij4KCQkJCSAgICAgICAgPHVsPgoJCQkJICAgICAgICAgICAgQGZvcmVhY2ggKCRlcnJvcnMtPmFsbCgpIGFzICRlcnJvcikKCQkJCSAgICAgICAgICAgICAgICA8bGk+e3sgJGVycm9yIH19PC9saT4KCQkJCSAgICAgICAgICAgIEBlbmRmb3JlYWNoCgkJCQkgICAgICAgIDwvdWw+CgkJCQkgICAgPC9kaXY+CgkJCQlAZW5kaWYKCQkJCUBpZihzZXNzaW9uKCktPmhhcygnZXJyb3InKSkKCQkJCSAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIiPgoJCQkJICAgICAgICB7eyBzZXNzaW9uKCktPmdldCgnZXJyb3InKSB9fQoJCQkJICAgIDwvZGl2PgoJCQkJQGVuZGlmCgkgICAgICAgIDwvZGl2PgoJICAgICAgICA8ZGl2IGNsYXNzPSJjZW50ZXItZm9ybSI+CgkJICAgICAgICA8Zm9ybSBhY3Rpb249Int7dXJsKCd1cGRhdGUtcmV2aWV3LW5ldycpfX0ve3skcGFydGljaXBhbnRfaWR9fSIgbWV0aG9kPSJwb3N0IiBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIj4KCQkgICAgICAgIAl7ISEgY3NyZl9maWVsZCgpICEhfQoJCSAgICAgICAgCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InBhcnRpY2lwYW50X2lkIiB2YWx1ZT0ie3skcGFydGljaXBhbnRfaWR9fSIgLz4KCQkgICAgICAgIAk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZXZpZXdfaWQiIHZhbHVlPSJ7eyRyZXZpZXctPmlkfX0iIC8+CgkJCSAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEwIGNvbC14bC04IHZpZGVvLWNhcmQiPgoJCQkgICAgICAgIAk8ZGl2IGNsYXNzPSJyb3ciPgoJCQkJICAgICAgICAJPGRpdiBjbGFzcz0iY29sLWxnLTEyIj4KCQkJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ2aWRlb3MtYm94Ij4KCgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKHN0cnBvcygkcGFydGljaXBhbnRfZGV0YWlsLT52aWRlb19saW5rLCAneW91dHViZScpICE9PSBmYWxzZSkKCgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBwaHAKCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHF1ZXJ5ID0iIjsKCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXJ0cyA9IHBhcnNlX3ZpZGVvX2xpbmsoJHBhcnRpY2lwYW50X2RldGFpbC0+dmlkZW9fbGluayk7CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihhcnJheV9rZXlfZXhpc3RzKCdxdWVyeScsJHBhcnRzKSl7CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2Vfc3RyKCRwYXJ0c1sncXVlcnknXSwgJHF1ZXJ5KTsKCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFydGljaXBhbnRfZGV0YWlsSUQgPSAkcXVlcnlbJ3YnXTsKCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkeW91dHViZXZpZGVvX2xpbmsgPSAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvIi4kcGFydGljaXBhbnRfZGV0YWlsSUQ7IAoJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHlvdXR1YmV2aWRlb19saW5rID0gJHBhcnRpY2lwYW50X2RldGFpbC0+dmlkZW9fbGluazsgCgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kcGhwCgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVsc2UKCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2aWRlbyBpZD0idmlkZW8te3skcGFydGljaXBhbnRfZGV0YWlsLT5pZH19IiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIzMDAiIGNvbnRyb2xzID4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJQGlmKCRyZXZpZXctPnJldmlld191cmwpCgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCQk8c291cmNlIHNyYz0ie3tlbnYoJ0FHRU5DWV9QTEFURk9STV9MSU5LJyl9fS9yZXZpZXdzL2NvbXBsZXRlZC97eyRyZXZpZXctPnJldmlld191cmx9fSI+CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCUBlbHNlCgkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0ie3thc3NldCgndXBsb2Fkcy9hdWRpdGlvbnMvJykuJy8nLiAkcGFydGljaXBhbnRfZGV0YWlsLT52aWRlb19saW5rfX0iPgoJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgSFRNTDUgdmlkZW8uCgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92aWRlbz4KCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPnt7JHBhcnRpY2lwYW50X2RldGFpbC0+dXNlci0+Zmlyc3RfbmFtZX19PC9oMz4KCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIG10LTQiPgoJCQkJCSAgICAgICAgCTxkaXYgaWQ9InJlbG9hZF9ibG9jayI+CgkJCSAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLWRhbmdlciIgaHJlZj0ie3tyb3V0ZSgnYXVkaXRpb25yZXZpZXcucmV3cml0ZScsICRwYXJ0aWNpcGFudF9kZXRhaWwtPmlkKX19Ij4KCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJidG4taWNvbiBmYSBmYS1jaGVjayI+PC9pPlJlLXJlY29yZCB2aWRlbwoJCQkJICAgICAgICAgICAgICAgICAgICA8L2E+CgkJCSAgICAgICAgICAgICAgICAJPC9kaXY+CgkJCQkJICAgICAgICA8L2Rpdj4KCQkJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiBtdC01Ij4KCQkJICAgICAgICAgICAgICAgIAk8aDM+WW91ciBSZXZpZXc8L2gzPgoJCQkJCQkJCTxkaXYgaWQ9ImFjY29yZGlvbiIgY2xhc3M9ImFjY29yZGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InBlcmZvcm1lci1uYW1lIiBjbGFzcz0iZm9ybS1jb250cm9sIiB2YWx1ZT0ie3skcmV2aWV3LT5uYW1lfX0iLz4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIiIGlkPSJoZWFkaW5nVHdvIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLWxpbmsgY29sbGFwc2VkIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjY29sbGFwc2VUd28iIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlVHdvIj4gUGVyZm9ybWFuY2UgUXVhbGl0eSA8L2E+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlVHdvIiBjbGFzcz0iY29sbGFwc2Ugc2hvdyIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nVHdvIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbiI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tcm93Ij4KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wtc20tMTIgIj4KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAJPGRpdiBjbGFzcz0icmlnaHQtYm94Ij4KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+UmF0aW5nPC9sYWJlbD4KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCBiaWdzdGFycyIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iMSIgZGF0YS1yYXRlaXQtbmFtZT0icHEtcmF0aW5nIiBkYXRhLXJhdGVpdC1taW49IjAiIGRhdGEtcmF0ZWl0LW1heD0iNSIgZGF0YS1yYXRlaXQtc3RlcD0iMSIgZGF0YS1yYXRlaXQtcmVzZXRhYmxlPSIwIiBkYXRhLXJhdGVpdC12YWx1ZT0ie3skcmV2aWV3LT5wZXJmb3JtYW5jZV9xdWFsaXR5X3JhdGluZ319IiA+PC9kaXY+CgkJCQkJCQkJCQkJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJwcS1yYXRpbmciIHZhbHVlPSJ7eyRyZXZpZXctPnBlcmZvcm1hbmNlX3F1YWxpdHlfcmF0aW5nfX0iIC8+CgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXNtLTEyIj4KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWJveCAiPgoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+Tm90ZTwvbGFiZWw+PGJyLz4KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0icGVyZm9ybWFuY2UtcXVhbGl0eSIgY2xhc3M9InN1bW1lcm5vdGUiPnshISAkcmV2aWV3LT5wZXJmb3JtYW5jZV9xdWFsaXR5ICEhfTwvdGV4dGFyZWE+CgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKCQkJCQkJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIiIGlkPSJoZWFkaW5nVGhyZWUiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tbGluayBjb2xsYXBzZWQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNjb2xsYXBzZVRocmVlIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1jb250cm9scz0iY29sbGFwc2VUaHJlZSI+IFRlY2huaWNhbCBBYmlsaXR5IDwvYT4KCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZVRocmVlIiBjbGFzcz0iY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ1RocmVlIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbiI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tcm93Ij4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXNtLTEyICI+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgIAk8ZGl2IGNsYXNzPSJyaWdodC1ib3giPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+UmF0aW5nPC9sYWJlbD4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IGJpZ3N0YXJzIiBkYXRhLXJhdGVpdC1zcGFuLWlkPSIxIiBkYXRhLXJhdGVpdC1uYW1lPSJ0YS1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIgZGF0YS1yYXRlaXQtbWF4PSI1IiBkYXRhLXJhdGVpdC1zdGVwPSIxIiBkYXRhLXJhdGVpdC1yZXNldGFibGU9IjAiIGRhdGEtcmF0ZWl0LXZhbHVlPSJ7eyRyZXZpZXctPnRlY2huaWNhbF9hYmlsaXR5X3JhdGluZ319IiA+PC9kaXY+CgkJCQkJCQkJCQkJCQkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idGEtcmF0aW5nIiB2YWx1ZT0ie3skcmV2aWV3LT50ZWNobmljYWxfYWJpbGl0eV9yYXRpbmd9fSIgLz4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wtc20tMTIiPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWJveCAiPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPk5vdGU8L2xhYmVsPjxici8+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJ0ZWNobmljYWwtYWJpbGl0eSIgY2xhc3M9InN1bW1lcm5vdGUiPnshISAkcmV2aWV3LT50ZWNobmljYWxfYWJpbGl0eSAhIX08L3RleHRhcmVhPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAKCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCQkgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIiBpZD0iaGVhZGluZ1RocmVlIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLWxpbmsgY29sbGFwc2VkIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjY29sbGFwc2U0IiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1jb250cm9scz0iY29sbGFwc2U0Ij4gRW5lcmd5IGFuZCBTdHlsZSA8L2E+CgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY29sbGFwc2U0IiBjbGFzcz0iY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZzQiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1yb3ciPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wtc20tMTIgIj4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgCTxkaXYgY2xhc3M9InJpZ2h0LWJveCI+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCTxsYWJlbCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+UmF0aW5nPC9sYWJlbD4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJPGRpdiBjbGFzcz0icmF0ZWl0IHB1bGwtcmlnaHQgYmlnc3RhcnMiIGRhdGEtcmF0ZWl0LXNwYW4taWQ9IjEiIGRhdGEtcmF0ZWl0LW5hbWU9ImVzLXJhdGluZyIgZGF0YS1yYXRlaXQtbWluPSIwIiBkYXRhLXJhdGVpdC1tYXg9IjUiIGRhdGEtcmF0ZWl0LXN0ZXA9IjEiIGRhdGEtcmF0ZWl0LXJlc2V0YWJsZT0iMCIgZGF0YS1yYXRlaXQtdmFsdWU9Int7ICRyZXZpZXctPmVuZXJneV9zdHlsZV9yYXRpbmd9fSIgPjwvZGl2PgoJCQkJCQkJCQkJCQkJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJlcy1yYXRpbmciIHZhbHVlPSJ7eyAkcmV2aWV3LT5lbmVyZ3lfc3R5bGVfcmF0aW5nfX0iIC8+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXNtLTEyIj4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1ib3ggIj4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5Ob3RlPC9sYWJlbD48YnIvPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0iZW5lcmd5LWFuZC1zdHlsZSIgY2xhc3M9InN1bW1lcm5vdGUiPnshISAkcmV2aWV3LT5lbmVyZ3lfc3R5bGUgISF9PC90ZXh0YXJlYT4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgCgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCgkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJCQkJICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWhlYWRlciIgaWQ9ImhlYWRpbmc1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLWxpbmsgY29sbGFwc2VkIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjY29sbGFwc2U1IiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1jb250cm9scz0iY29sbGFwc2U1Ij4gU3Rvcnl0ZWxsaW5nIDwvYT4KCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZTUiIGNsYXNzPSJjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nVGhyZWUiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1yb3ciPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wtc20tMTIgIj4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgCTxkaXYgY2xhc3M9InJpZ2h0LWJveCI+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5SYXRpbmc8L2xhYmVsPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQk8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCBiaWdzdGFycyIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iMSIgZGF0YS1yYXRlaXQtbmFtZT0ic3Rvcnl0ZWxsaW5nLXJhdGluZyIgZGF0YS1yYXRlaXQtbWluPSIwIiBkYXRhLXJhdGVpdC1tYXg9IjUiIGRhdGEtcmF0ZWl0LXN0ZXA9IjEiIGRhdGEtcmF0ZWl0LXJlc2V0YWJsZT0iMCIgZGF0YS1yYXRlaXQtdmFsdWU9Int7ICRyZXZpZXctPnN0b3J5dGVsbGluZ19yYXRpbmd9fSIgPjwvZGl2PgoJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzdG9yeXRlbGxpbmctcmF0aW5nIiB2YWx1ZT0ie3sgJHJldmlldy0+c3Rvcnl0ZWxsaW5nX3JhdGluZ319IiAvPgoKCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wtc20tMTIiPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWJveCAiPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPk5vdGU8L2xhYmVsPjxici8+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJzdG9yeXRlbGxpbmciIGNsYXNzPSJzdW1tZXJub3RlIj57ISEgJHJldmlldy0+c3Rvcnl0ZWxsaW5nICEhfTwvdGV4dGFyZWE+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgIAoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IAoJCQkJCQkJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQkJCSAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIiIGlkPSJoZWFkaW5nNiI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnRuIGJ0bi1saW5rIGNvbGxhcHNlZCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2NvbGxhcHNlNiIgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlNiI+IExvb2sgYW5kIEFwcGVhcmFuY2UgPC9hPgoKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlNiIgY2xhc3M9ImNvbGxhcHNlIiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmc2IiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbiI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tcm93Ij4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAgY29sLXNtLTEyICI+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgIAk8ZGl2IGNsYXNzPSJyaWdodC1ib3giPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAk8bGFiZWwgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPlJhdGluZzwvbGFiZWw+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCTxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IGJpZ3N0YXJzIiBkYXRhLXJhdGVpdC1zcGFuLWlkPSIxIiBkYXRhLXJhdGVpdC1uYW1lPSJsYS1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIgZGF0YS1yYXRlaXQtbWF4PSI1IiBkYXRhLXJhdGVpdC1zdGVwPSIxIiBkYXRhLXJhdGVpdC1yZXNldGFibGU9IjAiIGRhdGEtcmF0ZWl0LXZhbHVlPSJ7eyAkcmV2aWV3LT5sb29rX2FwcGVhcmFuY2VfcmF0aW5nfX0iID48L2Rpdj4KCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibGEtcmF0aW5nIiB2YWx1ZT0ie3sgJHJldmlldy0+bG9va19hcHBlYXJhbmNlX3JhdGluZ319IiAvPgoKCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCBjb2wtc20tMTIiPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWJveCAiPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPk5vdGU8L2xhYmVsPjxici8+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJsb29rLWFuZC1hcHBlYXJhbmNlIiBjbGFzcz0ic3VtbWVybm90ZSI+eyEhICRyZXZpZXctPmxvb2tfYXBwZWFyYW5jZSAhIX08L3RleHRhcmVhPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAKCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAKCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkJCQkgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtaGVhZGVyIiBpZD0iaGVhZGluZzciPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tbGluayBjb2xsYXBzZWQiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNjb2xsYXBzZTciIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZTciPiBOb3RlcyA8L2E+CgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY29sbGFwc2U3IiBjbGFzcz0iY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZzciIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1yb3ciPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgCgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIGNvbC1zbS0xMiI+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQtYm94ICI+CgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+PC9sYWJlbD48YnIvPgoJCQkJCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgbmFtZT0iZmVlZGJhY2siIGNsYXNzPSJzdW1tZXJub3RlIj57ISEgJHJldmlldy0+ZmVlZGJhY2sgISF9PC90ZXh0YXJlYT4KCQkJCQkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgCgkJCQkJCQkgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCgkJCQkJCQkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJCQkJICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoJCQkgICAgICAgICAgICAgICAgPC9kaXY+CgkJCSAgICAgICAgICAgICAgICAKCQkgICAgICAgICAgICAJPC9kaXY+CgkJCSAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1yb3cgbXQtNSI+CgkgICAgICAgICAgICAgICAgCTxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgoJICAgICAgICAgICAgICAgIAkJPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KCSAgICAgICAgICAgICAgICAJCQk8aW5wdXQgdHlwZT0ic3VibWl0IiBuYW1lPSJhdWR0aW9uIiB2YWx1ZT0iVXBkYXRlIFJldmlldyIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiAvPgoJICAgICAgICAgICAgICAgIAkJPC9kaXY+CgkgICAgICAgICAgICAgICAgCTwvZGl2PgoJICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkgICAgPC9mb3JtPgoJCQk8L2Rpdj4KCSAgICA8L2Rpdj4KCTwvZGl2Pgo8L2Rpdj4KQGVuZHNlY3Rpb24KCkBzZWN0aW9uKCdqcycpCiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9zdW1tZXJub3RlQDAuOC4xOC9kaXN0L3N1bW1lcm5vdGUubWluLmpzIj48L3NjcmlwdD4KCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCQkkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHsKCSAgCQkvLyAkKCcuc3VtbWVybm90ZScpLnN1bW1lcm5vdGUoewoJICAgIC8vICAgICBwbGFjZWhvbGRlcjogJycsCgkgICAgLy8gICAgIHRhYnNpemU6IDIsCgkgICAgLy8gICAgIGhlaWdodDogMTIwLAoJICAgIC8vICAgICB0b29sYmFyOiBbCgkgICAgLy8gICAgICAgWydzdHlsZScsIFsnc3R5bGUnXV0sCgkgICAgLy8gICAgICAgWydmb250JywgWydib2xkJywgJ3VuZGVybGluZScsICdjbGVhciddXSwKCSAgICAvLyAgICAgICBbJ2NvbG9yJywgWydjb2xvciddXSwKCSAgICAvLyAgICAgICBbJ3BhcmEnLCBbJ3VsJywgJ29sJywgJ3BhcmFncmFwaCddXSwKCSAgICAvLyAgICAgICBbJ3RhYmxlJywgWyd0YWJsZSddXSwKCSAgICAvLyAgICAgICBbJ2luc2VydCcsIFsnbGluayddXSwKCSAgICAvLyAgICAgICBbJ3ZpZXcnLCBbJ2Z1bGxzY3JlZW4nLCAnY29kZXZpZXcnLCAnaGVscCddXQoJICAgIC8vICAgICBdCgkgICAgLy8gICB9KTsKCSAgCQl2YXIgZGF0ZWZvcm1hdCA9ICd5eXl5LW1tLWRkJzsKCgkgICAgICAgICQoJy5oYXNEYXRlcGlja2VyJykuZGF0ZXBpY2tlcih7CgkgICAgICAgICAgZm9ybWF0OiBkYXRlZm9ybWF0LAoJICAgICAgICAgIGF1dG9jbG9zZTogdHJ1ZQoJICAgICAgICB9KTsKCSAgIAoJICAgCSQoIi5yYXRlaXQiKS5iaW5kKCdyYXRlZCcsIGZ1bmN0aW9uIChldmVudCwgdmFsdWUpIHsKICAgICAgICAgICAgdmFyIHJhdGUgPSAkKHRoaXMpOwogICAgICAgICAgICAvKmluc2VydCBzdGFyIHJhdGluZyB2YWx1ZSovCiAgICAgICAgICAgIHJhdGUuY2xvc2VzdCgnLnJvdycpLmZpbmQoJy5yYXRlaXQtdmFsdWUnKS5odG1sKHZhbHVlLnRvRml4ZWQoMSkpOwogICAgICAgICAgICBpZih2YWx1ZSA9PT0gbnVsbCl7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmF0ZS5hdHRyKCJkYXRhLXJhdGVpdC12YWx1ZSIsIHZhbHVlKTsKICAgICAgICAgICAgdmFyIG5hbWUgPSByYXRlLmF0dHIoImRhdGEtcmF0ZWl0LW5hbWUiKTsKICAgICAgICAgICAgLy9yYXRpbmdzW25hbWVdID0gdmFsdWU7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTsKICAgICAgICAgICAgY29uc29sZS5sb2cobmFtZSk7CiAgICAgICAgICAgICQoJ2lucHV0W25hbWU9IicrbmFtZSsnIl0nKS52YWwodmFsdWUpOwovLyAgICAgICAgICAgICQoJyNyYXRlXycgKyByYXRlLmF0dHIoImRhdGEtcmF0ZWl0LXNwYW4taWQiKSkudGV4dCh2YWx1ZSk7CiAgICAgICAgfSk7CgkJfSk7Cgk8L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSIvYXNzZXRzL2pzL3JhdGVpdC9qcXVlcnkucmF0ZWl0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9hc3NldHMvanMvdG9hc3RyL3RvYXN0ci5taW4uanMiPjwvc2NyaXB0PgpAZW5kc2VjdGlvbgoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";