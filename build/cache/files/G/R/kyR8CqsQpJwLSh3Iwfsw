1665722086
waR3U4bTeM%3A392c14b0f042a03806546238b094b2f3-96dff132042081afb8d44559dbf88c8c
s:32032:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6Ijk2ZGZmMTMyMDQyMDgxYWZiOGQ0NDU1OWRiZjg4YzhjIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjQ6ImFkZC1yZXZpZXctb2xkLmJsYWRlLnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjU1OiJyZXNvdXJjZXMvdmlld3MvY29hY2hjaGFsbGVuZ2UvYWRkLXJldmlldy1vbGQuYmxhZGUucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoyMzE4NjoiQGV4dGVuZHMoJ2xheW91dHMuYXBwJykKQHNlY3Rpb24oJ2NzcycpCjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Fzc2V0cy9qcy9yYXRlaXQvcmF0ZWl0LmNzcyI+CjxsaW5rIGhyZWY9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vc3VtbWVybm90ZUAwLjguMTgvZGlzdC9zdW1tZXJub3RlLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCI+CkBlbmRzZWN0aW9uCkBzZWN0aW9uKCdjb250ZW50JykKPGRpdiBjbGFzcz0ibWFpbi1jb250ZW50IGF1ZGl0aW9ucy13cmFwIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KCSAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KCSAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvYWNoLWxpc3QgbWItNCI+CgkgICAgICAgICAgICAgICAgPGgzPlJldmlldyBQYXJ0aWNpcGFudCBWaWRlbzwvaDM+CgkgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgIEBpZihzZXNzaW9uKCktPmhhcygnbWVzc2FnZScpKQoJCQkJICAgIDxkaXYgY2xhc3M9ImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiPgoJCQkJICAgICAgICB7eyBzZXNzaW9uKCktPmdldCgnbWVzc2FnZScpIH19CgkJCQkgICAgPC9kaXY+CgkJCQlAZW5kaWYKCQkJCUBpZiAoJGVycm9ycy0+YW55KCkpCgkJCQkgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtZGFuZ2VyIj4KCQkJCSAgICAgICAgPHVsPgoJCQkJICAgICAgICAgICAgQGZvcmVhY2ggKCRlcnJvcnMtPmFsbCgpIGFzICRlcnJvcikKCQkJCSAgICAgICAgICAgICAgICA8bGk+e3sgJGVycm9yIH19PC9saT4KCQkJCSAgICAgICAgICAgIEBlbmRmb3JlYWNoCgkJCQkgICAgICAgIDwvdWw+CgkJCQkgICAgPC9kaXY+CgkJCQlAZW5kaWYKCQkJCUBpZihzZXNzaW9uKCktPmhhcygnZXJyb3InKSkKCQkJCSAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1kYW5nZXIiPgoJCQkJICAgICAgICB7eyBzZXNzaW9uKCktPmdldCgnZXJyb3InKSB9fQoJCQkJICAgIDwvZGl2PgoJCQkJQGVuZGlmCgkgICAgICAgIDwvZGl2PgoJICAgICAgICA8Zm9ybSBhY3Rpb249Int7dXJsKCdjaGFsbGVuZ2UtcmV2aWV3Jyl9fS97eyRwYXJ0aWNpcGFudF9pZH19IiBtZXRob2Q9InBvc3QiIGVuY3R5cGU9Im11bHRpcGFydC9mb3JtLWRhdGEiPgoJICAgICAgICAJeyEhIGNzcmZfZmllbGQoKSAhIX0KCSAgICAgICAgCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InBhcnRpY2lwYW50X2lkIiB2YWx1ZT0ie3skcGFydGljaXBhbnRfaWR9fSIgLz4KCQkgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CgkJICAgICAgICAJPGRpdiBjbGFzcz0icm93Ij4KCQkJICAgICAgICAJPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLWxnLW9mZnNldC0yIj4KCQkgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQgcm93Ij4KCQkgICAgICAgICAgICAgICAgICAgICAgICAKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idmlkZW9zLWJveCI+CgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKHN0cnBvcygkcGFydGljaXBhbnRfZGV0YWlsLT52aWRlb19saW5rLCAneW91dHViZScpICE9PSBmYWxzZSkKCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHBocAoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRxdWVyeSA9IiI7CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwYXJ0cyA9IHBhcnNlX3ZpZGVvX2xpbmsoJHBhcnRpY2lwYW50X2RldGFpbC0+dmlkZW9fbGluayk7CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGFycmF5X2tleV9leGlzdHMoJ3F1ZXJ5JywkcGFydHMpKXsKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlX3N0cigkcGFydHNbJ3F1ZXJ5J10sICRxdWVyeSk7CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFydGljaXBhbnRfZGV0YWlsSUQgPSAkcXVlcnlbJ3YnXTsKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR5b3V0dWJldmlkZW9fbGluayA9ICJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8iLiRwYXJ0aWNpcGFudF9kZXRhaWxJRDsgCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHlvdXR1YmV2aWRlb19saW5rID0gJHBhcnRpY2lwYW50X2RldGFpbC0+dmlkZW9fbGluazsgCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRwaHAKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVsc2UKCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZpZGVvIGlkPSJ2aWRlby17eyRwYXJ0aWNpcGFudF9kZXRhaWwtPmlkfX0iIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjMwMCIgY29udHJvbHMgPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3JjPSJ7e2Fzc2V0KCd1cGxvYWRzL2F1ZGl0aW9ucy8nKS4nLycuICRwYXJ0aWNpcGFudF9kZXRhaWwtPnZpZGVvX2xpbmt9fSI+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgSFRNTDUgdmlkZW8uCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZpZGVvPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCSAgICAgICAgICAgICAgICAgICAgICAgIAoJCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9InAtMjAgdGV4dC1jZW50ZXIiPnt7JHBhcnRpY2lwYW50X2RldGFpbC0+dXNlci0+Zmlyc3RfbmFtZX19PC9oMz4KCQkgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgIAoJCSAgICAgICAgPC9kaXY+CgkJICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CgkgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWNlbnRlciB0ZXh0LWRhbmdlciBmLXctNTAwIj5URUNITklRVUUgU0NPUkU8L3A+CgkgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtNCBtLWItMTUiPgoJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTgiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UaW1pbmc8L3NwYW4+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyYXRlaXQtdmFsdWUiPjwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0ZWl0IHB1bGwtcmlnaHQiIGRhdGEtcmF0ZWl0LXNwYW4taWQ9IjEiIGRhdGEtcmF0ZWl0LW5hbWU9InRpbWluZy1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC1tYXg9IjUiIGRhdGEtcmF0ZWl0LXN0ZXA9IjEiIGRhdGEtcmF0ZWl0LXJlc2V0YWJsZT0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC12YWx1ZT0ie3tvbGQoJ3RpbWluZy1yYXRpbmcnKX19Ij48L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0idGltaW5nLXJhdGluZyIgdmFsdWU9Int7b2xkKCd0aW1pbmctcmF0aW5nJyl9fSIgLz4gIAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Im0tYi0wIj5Db21tZW50PC9zbWFsbD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGNvbW1lbnQiIHR5cGU9InRleHQiIG5hbWU9InRpbWluZy1jb21tZW50IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7b2xkKCd0aW1pbmctY29tbWVudCcpfX0iIC8+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC00Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC00IG0tYi0xNSI+CgkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtOCBjb2wtbWQtb2Zmc2V0LTIiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Gb290d29yazwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhdGVpdC12YWx1ZSI+PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iMiIgZGF0YS1yYXRlaXQtbmFtZT0iZm9vdHdvcmstcmF0aW5nIiBkYXRhLXJhdGVpdC1taW49IjAiCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtbWF4PSI1IiBkYXRhLXJhdGVpdC1zdGVwPSIxIiBkYXRhLXJhdGVpdC1yZXNldGFibGU9IjAiCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtdmFsdWU9Int7b2xkKCdmb290d29yay1yYXRpbmcnKX19Ij48L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IiIgbmFtZT0iZm9vdHdvcmstcmF0aW5nIiBtaW49IjEiIG1heD0iNSIgc3RlcD0iMC41IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7b2xkKCdmb290d29yay1yYXRpbmcnKX19Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJtLWItMCI+Q29tbWVudDwvc21hbGw+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCBjb21tZW50IiB0eXBlPSJ0ZXh0IiBuYW1lPSJmb290d29yay1jb21tZW50IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7b2xkKCdmb290d29yay1jb21tZW50Jyl9fSIgLz4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC00IG0tYi0xNSI+CgkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtNCI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC04Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QWxpZ25tZW50PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmF0ZWl0LXZhbHVlIj48L3NwYW4+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IiBkYXRhLXJhdGVpdC1zcGFuLWlkPSIzIiBkYXRhLXJhdGVpdC1uYW1lPSJhbGlnbm1lbnQtcmF0aW5nIiBkYXRhLXJhdGVpdC1taW49IjAiCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtbWF4PSI1IiBkYXRhLXJhdGVpdC1zdGVwPSIxIiBkYXRhLXJhdGVpdC1yZXNldGFibGU9IjAiCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtdmFsdWU9Int7b2xkKCdhbGlnbm1lbnQtcmF0aW5nJyl9fSI+PC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSIiIG5hbWU9ImFsaWdubWVudC1yYXRpbmciIG1pbj0iMSIgbWF4PSI1IiBzdGVwPSIwLjUiIGF1dG9jb21wbGV0ZT0ib2ZmIiB2YWx1ZT0ie3tvbGQoJ2FsaWdubWVudC1yYXRpbmcnKX19Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpZWxkc2V0PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJtLWItMCI+Q29tbWVudDwvc21hbGw+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCBjb21tZW50IiB0eXBlPSJ0ZXh0IiBuYW1lPSJhbGluZ21lbnQtY29tbWVudCIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7e29sZCgnYWxpbmdtZW50LWNvbW1lbnQnKX19IiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTQgbS1iLTE1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC04Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QmFsYW5jZTwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhdGVpdC12YWx1ZSI+PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iNCIgZGF0YS1yYXRlaXQtbmFtZT0iYmFsYW5jZS1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC1tYXg9IjUiIGRhdGEtcmF0ZWl0LXN0ZXA9IjEiIGRhdGEtcmF0ZWl0LXJlc2V0YWJsZT0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC12YWx1ZT0ie3tvbGQoJ2JhbGFuY2UtcmF0aW5nJyl9fSI+PC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSIiIG5hbWU9ImJhbGFuY2UtcmF0aW5nIiBtaW49IjEiIG1heD0iNSIgc3RlcD0iMC41IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7b2xkKCdiYWxhbmNlLXJhdGluZycpfX0iPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Im0tYi0wIj5Db21tZW50PC9zbWFsbD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGNvbW1lbnQiIHR5cGU9InRleHQiIG5hbWU9ImJhbGFuY2UtY29tbWVudCIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7e29sZCgnYmFsYW5jZS1jb21tZW50Jyl9fSIgLz4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTQiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTQgbS1iLTE1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC04IGNvbC1tZC1vZmZzZXQtMiI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkZvY3VzPC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmF0ZWl0LXZhbHVlIj48L3NwYW4+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IiBkYXRhLXJhdGVpdC1zcGFuLWlkPSI1IiBkYXRhLXJhdGVpdC1uYW1lPSJmb2N1cy1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC1tYXg9IjUiIGRhdGEtcmF0ZWl0LXN0ZXA9IjEiIGRhdGEtcmF0ZWl0LXJlc2V0YWJsZT0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC12YWx1ZT0ie3tvbGQoJ2ZvY3VzLXJhdGluZycpfX0iPjwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBjbGFzcz0iZm9ybS1jb250cm9sIiBwbGFjZWhvbGRlcj0iIiBuYW1lPSJmb2N1cy1yYXRpbmciIG1pbj0iMSIgbWF4PSI1IiBzdGVwPSIwLjUiIGF1dG9jb21wbGV0ZT0ib2ZmIiB2YWx1ZT0ie3tvbGQoJ2ZvY3VzLXJhdGluZycpfX0iPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9Im0tYi0wIj5Db21tZW50PC9zbWFsbD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGNvbW1lbnQiIHR5cGU9InRleHQiIG5hbWU9ImZvY3VzLWNvbW1lbnQiIGF1dG9jb21wbGV0ZT0ib2ZmIiB2YWx1ZT0ie3tvbGQoJ2ZvY3VzLWNvbW1lbnQnKX19IiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKCgkgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtNCBtLWItMTUiPgoJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTQiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtOCI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlByZWNpc2lvbjwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhdGVpdC12YWx1ZSI+PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgIGRhdGEtcmF0ZWl0LXNwYW4taWQ9IjYiIGRhdGEtcmF0ZWl0LW5hbWU9InByZWNpc2lvbi1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIgZGF0YS1yYXRlaXQtbWF4PSI1IiBkYXRhLXJhdGVpdC1zdGVwPSIxIiBkYXRhLXJhdGVpdC1yZXNldGFibGU9IjAiIGRhdGEtcmF0ZWl0LXZhbHVlPSJ7e29sZCgncHJlY2lzaW9uLXJhdGluZycpfX0iPjwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBjbGFzcz0iZm9ybS1jb250cm9sIiBwbGFjZWhvbGRlcj0iIiBuYW1lPSJwcmVjaXNpb24tcmF0aW5nIiBtaW49IjEiIG1heD0iNSIgc3RlcD0iMC41IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7b2xkKCdwcmVjaXNpb24tcmF0aW5nJyl9fSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibS1iLTAiPkNvbW1lbnQ8L3NtYWxsPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wgY29tbWVudCIgdHlwZT0idGV4dCIgbmFtZT0icHJlY2lzaW9uLWNvbW1lbnQiIGF1dG9jb21wbGV0ZT0ib2ZmIiB2YWx1ZT0ie3tvbGQoJ3ByZWNpc2lvbi1jb21tZW50Jyl9fSIgLz4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIj48aHI+PC9kaXY+CgkgICAgICAgICAgICAgICAgPC9kaXY+CgoJICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CgkgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWNlbnRlciB0ZXh0LWRhbmdlciBmLXctNTAwIj5FWFBSRVNTSU9OPC9wPgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTMgbS1iLTE1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC0xMSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVuZXJneTwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhdGVpdC12YWx1ZSI+PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iNyIgZGF0YS1yYXRlaXQtbmFtZT0iZW5lcmd5LXJhdGluZyIgZGF0YS1yYXRlaXQtbWluPSIwIgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LW1heD0iNSIgZGF0YS1yYXRlaXQtc3RlcD0iMSIgZGF0YS1yYXRlaXQtcmVzZXRhYmxlPSIwIgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LXZhbHVlPSJ7e29sZCgnZW5lcmd5LXJhdGluZycpfX0iPjwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBjbGFzcz0iZm9ybS1jb250cm9sIiBwbGFjZWhvbGRlcj0iIiBuYW1lPSJlbmVyZ3ktcmF0aW5nIiBtaW49IjEiIG1heD0iNSIgc3RlcD0iMC41IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7b2xkKCdlbmVyZ3ktcmF0aW5nJyl9fSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibS1iLTAiPkNvbW1lbnQ8L3NtYWxsPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wgY29tbWVudCIgdHlwZT0idGV4dCIgbmFtZT0iZW5lcmd5LWNvbW1lbnQiIGF1dG9jb21wbGV0ZT0ib2ZmIiB2YWx1ZT0ie3tvbGQoJ2VuZXJneS1jb21tZW50Jyl9fSIgLz4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMCBjb2wtbWQtMSI+PC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTYiPgoJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTYgbS1iLTE1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtMTEiIHN0eWxlPSJtYXJnaW4tbGVmdDogMyU7Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TdHlsZTwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icmF0ZWl0LXZhbHVlIj48L3NwYW4+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0ZWl0IHB1bGwtcmlnaHQiIGRhdGEtcmF0ZWl0LXNwYW4taWQ9IjgiIGRhdGEtcmF0ZWl0LW5hbWU9InN0eWxlLXJhdGluZyIgZGF0YS1yYXRlaXQtbWluPSIwIgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtbWF4PSI1IiBkYXRhLXJhdGVpdC1zdGVwPSIxIiBkYXRhLXJhdGVpdC1yZXNldGFibGU9IjAiCgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC12YWx1ZT0ie3tvbGQoJ3N0eWxlLXJhdGluZycpfX0iPjwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSIiIG5hbWU9InN0eWxlLXJhdGluZyIgbWluPSIxIiBtYXg9IjUiIHN0ZXA9IjAuNSIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7e29sZCgnc3R5bGUtcmF0aW5nJyl9fSIgPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJtLWItMCI+Q29tbWVudDwvc21hbGw+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGNvbW1lbnQiIHR5cGU9InRleHQiIG5hbWU9InN0eWxlLWNvbW1lbnQiIGF1dG9jb21wbGV0ZT0ib2ZmIiB2YWx1ZT0ie3tvbGQoJ3N0eWxlLWNvbW1lbnQnKX19IiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0wIGNvbC1tZC0xIj48L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC02IG0tYi0xNSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTExIGNvbC1tZC1vZmZzZXQtMSIgc3R5bGU9Im1hcmdpbi1yaWdodDogMyU7Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5DcmVhdGl2aXR5PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyYXRlaXQtdmFsdWUiPjwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iOSIgZGF0YS1yYXRlaXQtbmFtZT0iY3JlYXRpdml0eS1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LW1heD0iNSIgZGF0YS1yYXRlaXQtc3RlcD0iMSIgZGF0YS1yYXRlaXQtcmVzZXRhYmxlPSIwIgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtdmFsdWU9Int7b2xkKCdjcmVhdGl2aXR5LXJhdGluZycpfX0iPjwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSIiIG5hbWU9ImNyZWF0aXZpdHktcmF0aW5nIiBtaW49IjEiIG1heD0iNSIgc3RlcD0iMC41IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7b2xkKCdjcmVhdGl2aXR5LXJhdGluZycpfX0iPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJtLWItMCI+Q29tbWVudDwvc21hbGw+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGNvbW1lbnQiIHR5cGU9InRleHQiIG5hbWU9ImNyZWF0aXZpdHktY29tbWVudCIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7e29sZCgnY3JlYXRpdml0eS1jb21tZW50Jyl9fSIvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTMgbS1iLTE1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtMTEgY29sLW1kLW9mZnNldC0xIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+SW50ZXJwcmV0YXRpb248L3NwYW4+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyYXRlaXQtdmFsdWUiPjwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0ZWl0IHB1bGwtcmlnaHQiIGRhdGEtcmF0ZWl0LXNwYW4taWQ9IjEwIiBkYXRhLXJhdGVpdC1uYW1lPSJpbnRlcnByZXRhdGlvbi1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC1tYXg9IjUiIGRhdGEtcmF0ZWl0LXN0ZXA9IjEiIGRhdGEtcmF0ZWl0LXJlc2V0YWJsZT0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXJhdGVpdC12YWx1ZT0ie3tvbGQoJ2ludGVycHJldGF0aW9uLXJhdGluZycpfX0iPjwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBjbGFzcz0iZm9ybS1jb250cm9sIiBwbGFjZWhvbGRlcj0iIiBuYW1lPSJpbnRlcnByZXRhdGlvbi1yYXRpbmciIHZhbHVlPSJ7e29sZCgnaW50ZXJwcmV0YXRpb24tcmF0aW5nJyl9fSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0ibS1iLTAiPkNvbW1lbnQ8L3NtYWxsPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wgY29tbWVudCIgdHlwZT0idGV4dCIgbmFtZT0iaW50ZXJwcmV0YXRpb24tY29tbWVudCIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7e29sZCgnaW50ZXJwcmV0YXRpb24tY29tbWVudCcpfX0iIC8+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiI+PGhyPjwvZGl2PgoJICAgICAgICAgICAgICAgIDwvZGl2PgoKCSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgoJICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGV4dC1jZW50ZXIgdGV4dC1kYW5nZXIgZi13LTUwMCI+Q0hPUkVPR1JBUEhZPC9wPgoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTYgbS1iLTE1Ij4KCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC02IGNvbC1tZC1vZmZzZXQtNCI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTExIGNvbC1tZC1vZmZzZXQtMSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Rm9ybWF0aW9uPC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJyYXRlaXQtdmFsdWUiPjwvc3Bhbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRlaXQgcHVsbC1yaWdodCIgZGF0YS1yYXRlaXQtc3Bhbi1pZD0iMTEiIGRhdGEtcmF0ZWl0LW5hbWU9ImZvcm1hdGlvbi1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LW1heD0iNSIgZGF0YS1yYXRlaXQtc3RlcD0iMSIgZGF0YS1yYXRlaXQtcmVzZXRhYmxlPSIwIgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtdmFsdWU9Int7b2xkKCdmb3JtYXRpb24tcmF0aW5nJyl9fSI+PC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgY2xhc3M9ImZvcm0tY29udHJvbCIgcGxhY2Vob2xkZXI9IiIgbmFtZT0iZm9ybWF0aW9uLXJhdGluZyIgbWluPSIxIiBtYXg9IjUiIHN0ZXA9IjAuNSIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7e29sZCgnZm9ybWF0aW9uLXJhdGluZycpfX0iPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJtLWItMCI+Q29tbWVudDwvc21hbGw+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGNvbW1lbnQiIHR5cGU9InRleHQiIG5hbWU9ImZvcm1hdGlvbi1jb21tZW50IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7b2xkKCdmb3JtYXRpb24tY29tbWVudCcpfX0iIC8+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC02IG0tYi0xNSI+CgkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0wIGNvbC1tZC0yIj48L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTYiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1tZC0xMSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QXJ0aXN0cnk8L3NwYW4+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InJhdGVpdC12YWx1ZSI+PC9zcGFuPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGVpdCBwdWxsLXJpZ2h0IiBkYXRhLXJhdGVpdC1zcGFuLWlkPSIxMiIgZGF0YS1yYXRlaXQtbmFtZT0iYXJ0aXN0eS1yYXRpbmciIGRhdGEtcmF0ZWl0LW1pbj0iMCIKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtcmF0ZWl0LW1heD0iNSIgZGF0YS1yYXRlaXQtc3RlcD0iMSIgZGF0YS1yYXRlaXQtcmVzZXRhYmxlPSIwIgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1yYXRlaXQtdmFsdWU9Int7b2xkKCdhcnRpc3R5LXJhdGluZycpfX0iPjwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSIiIG5hbWU9ImFydGlzdHktcmF0aW5nIiBtaW49IjEiIG1heD0iNSIgc3RlcD0iMC41IiBhdXRvY29tcGxldGU9Im9mZiIgdmFsdWU9Int7b2xkKCdhcnRpc3R5LXJhdGluZycpfX0iPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldD4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJtLWItMCI+Q29tbWVudDwvc21hbGw+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIGNvbW1lbnQiIHR5cGU9InRleHQiIG5hbWU9ImFydGlzdHktY29tbWVudCIgYXV0b2NvbXBsZXRlPSJvZmYiIHZhbHVlPSJ7e29sZCgnYXJ0aXN0eS1jb21tZW50Jyl9fSIvPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtMSI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTAgY29sLW1kLTQiPjwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKCSAgICAgICAgICAgICAgICA8L2Rpdj4KCSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1ib3ggIj4KICAgICAgICAgICAgICAgICAgICAgICAgCTxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5TdW1tYXJ5IG9mIFBlcmZvcm1hbmNlIFZpZGVvPC9sYWJlbD48YnIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9ImZlZWRiYWNrX3N1bW1hcnkiIGNsYXNzPSJzdW1tZXJub3RlIj57e29sZCgnZmVlZGJhY2tfc3VtbWFyeScpfX08L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gICAgICAgCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQtYm94ICI+PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPkFkZGl0aW9uYWwgVGlwczwvbGFiZWw+PGJyLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBuYW1lPSJhZGRpdGlvbmFsX3RpcHMiIGNsYXNzPSJzdW1tZXJub3RlIj57e29sZCgnYWRkaXRpb25hbF90aXBzJyl9fTwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gCgkgICAgICAgICAgICA8L2Rpdj4KCQkgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tcm93IG10LTUiPgogICAgICAgICAgICAgICAgCTxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgCQk8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgICAgICAgCQkJPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iYXVkdGlvbiIgdmFsdWU9IkFkZCBSZXZpZXciIGNsYXNzPSJidG4gYnRuLWRhbmdlciIgLz4KICAgICAgICAgICAgICAgIAkJPC9kaXY+CiAgICAgICAgICAgICAgICAJPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KCQkgICAgPC9mb3JtPgoJICAgIDwvZGl2PgoJPC9kaXY+CjwvZGl2PgpAZW5kc2VjdGlvbgoKQHNlY3Rpb24oJ2pzJykKPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vc3VtbWVybm90ZUAwLjguMTgvZGlzdC9zdW1tZXJub3RlLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCSQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogIAkJJCgnLnN1bW1lcm5vdGUnKS5zdW1tZXJub3RlKHsKICAgICAgICBwbGFjZWhvbGRlcjogJycsCiAgICAgICAgdGFic2l6ZTogMiwKICAgICAgICBoZWlnaHQ6IDEyMCwKICAgICAgICB0b29sYmFyOiBbCiAgICAgICAgICBbJ3N0eWxlJywgWydzdHlsZSddXSwKICAgICAgICAgIFsnZm9udCcsIFsnYm9sZCcsICd1bmRlcmxpbmUnLCAnY2xlYXInXV0sCiAgICAgICAgICBbJ2NvbG9yJywgWydjb2xvciddXSwKICAgICAgICAgIFsncGFyYScsIFsndWwnLCAnb2wnLCAncGFyYWdyYXBoJ11dLAogICAgICAgICAgWyd0YWJsZScsIFsndGFibGUnXV0sCiAgICAgICAgICBbJ2luc2VydCcsIFsnbGluayddXSwKICAgICAgICAgIFsndmlldycsIFsnZnVsbHNjcmVlbicsICdjb2RldmlldycsICdoZWxwJ11dCiAgICAgICAgXQogICAgICB9KTsKICAJCXZhciBkYXRlZm9ybWF0ID0gJ3l5eXktbW0tZGQnOwoKICAgICAgICAkKCcuaGFzRGF0ZXBpY2tlcicpLmRhdGVwaWNrZXIoewogICAgICAgICAgZm9ybWF0OiBkYXRlZm9ybWF0LAogICAgICAgICAgYXV0b2Nsb3NlOiB0cnVlCiAgICAgICAgfSk7CiAgIAkkKCIucmF0ZWl0IikuYmluZCgncmF0ZWQnLCBmdW5jdGlvbiAoZXZlbnQsIHZhbHVlKSB7CiAgICAgICAgICAgIHZhciByYXRlID0gJCh0aGlzKTsKICAgICAgICAgICAgLyppbnNlcnQgc3RhciByYXRpbmcgdmFsdWUqLwogICAgICAgICAgICByYXRlLmNsb3Nlc3QoJy5yb3cnKS5maW5kKCcucmF0ZWl0LXZhbHVlJykuaHRtbCh2YWx1ZS50b0ZpeGVkKDEpKTsKICAgICAgICAgICAgaWYodmFsdWUgPT09IG51bGwpewogICAgICAgICAgICAgICAgdmFsdWUgPSAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJhdGUuYXR0cigiZGF0YS1yYXRlaXQtdmFsdWUiLCB2YWx1ZSk7CiAgICAgICAgICAgIHZhciBuYW1lID0gcmF0ZS5hdHRyKCJkYXRhLXJhdGVpdC1uYW1lIik7CiAgICAgICAgICAgIC8vcmF0aW5nc1tuYW1lXSA9IHZhbHVlOwogICAgICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKG5hbWUpOwogICAgICAgICAgICAkKCdpbnB1dFtuYW1lPSInK25hbWUrJyJdJykudmFsKHZhbHVlKTsKLy8gICAgICAgICAgICAkKCcjcmF0ZV8nICsgcmF0ZS5hdHRyKCJkYXRhLXJhdGVpdC1zcGFuLWlkIikpLnRleHQodmFsdWUpOwogICAgICAgIH0pOwogICAKCX0pOwo8L3NjcmlwdD4KIDxzY3JpcHQgc3JjPSIvYXNzZXRzL2pzL3JhdGVpdC9qcXVlcnkucmF0ZWl0LmpzIj48L3NjcmlwdD4KQGVuZHNlY3Rpb24iO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";