1665722086
waR3U4bTeM%3A2c5102bf427067c1261cbffc550339e5-381898d9b5a699d9f2b23d6123d7a05a
s:32212:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjM4MTg5OGQ5YjVhNjk5ZDlmMmIyM2Q2MTIzZDdhMDVhIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTk6ImluZGV4LmJsYWRlLW9sZC5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo0NToicmVzb3VyY2VzL3ZpZXdzL2F1ZGl0aW9ucy9pbmRleC5ibGFkZS1vbGQucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czoyMzMzNzoiQGV4dGVuZHMoJ2xheW91dHMudXNlcicpCkBzZWN0aW9uKCdjb250ZW50JykKPGRpdiBjbGFzcz0ibWFpbi1jb250ZW50IGF1ZGl0aW9ucy13cmFwIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteGwtNiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvYWNoLWxpc3QiPgogICAgICAgICAgICAgICAgPGgzID5MaXN0IG9mIEF1ZGl0aW9uczwvaDM+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0b3AtYm94IG1iLTAiPgogICAgICAgICAgICAgICAgCTxmb3JtIG1ldGhvZD0icG9zdCIgYWN0aW9uPSJ7e3VybCgnZmlsdGVyLWF1ZGl0aW9ucycpfX0iPgogICAgICAgICAgICAgICAgCQl7ISEgY3NyZl9maWVsZCgpICEhfQoJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgoJICAgICAgICAgICAgICAgICAgICAJPGRpdiBjbGFzcz0iY29sLWxnLTYiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzZWFyY2giIG5hbWU9ImF1ZGl0aW9uLW5hbWUiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHBsYWNlaG9sZGVyPSJTZWFyY2ggYnkgbmFtZeKApiIgdmFsdWU9Int7JGZpbHRlclsnbmFtZSddfX0iPgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiI+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuLWdyb3VwIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ic29ydGJ5IiBjbGFzcz0iZm9ybS1jb250cm9sIj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAk8b3B0aW9uIHZhbHVlPSJhc2MiIEBpZigkZmlsdGVyWydzb3J0YnknXSA9PSAnYXNjJykgc2VsZWN0ZWQ9InNlbGVjdGVkIiBAZW5kaWY+QXNjZW5kaW5nPC9vcHRpb24+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJPG9wdGlvbiB2YWx1ZT0iZGVzYyIgQGlmKCRmaWx0ZXJbJ3NvcnRieSddID09ICdkZXNjJykgc2VsZWN0ZWQ9InNlbGVjdGVkIiBAZW5kaWY+RGVzY2VuZGluZzwvb3B0aW9uPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4tZ3JvdXAiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJ0YWxlbnQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiPgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCTxvcHRpb24gdmFsdWU9IiI+VGFsZW50PC9vcHRpb24+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJQGZvcmVhY2goJGFjdGl2aXR5X2dlbnJlcyBhcyAkdGFsZW50KQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQk8b3B0aW9uIHZhbHVlPSJ7eyR0YWxlbnQtPmlkfX0iIEBpZigkZmlsdGVyWyd0YWxlbnQnXSA9PSAkdGFsZW50LT5pZCkgc2VsZWN0ZWQ9InNlbGVjdGVkIiBAZW5kaWY+e3skdGFsZW50LT5uYW1lfX08L29wdGlvbj4KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAlAZW5kZm9yZWFjaAoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctMTIiPgoJICAgICAgICAgICAgICAgICAgICAgICAgCTxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9ImZpbHRlciIgdmFsdWU9ImZpbHRlciIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiAvPgoJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDwvZGl2PgoJCQkJQGlmKGNvdW50KCRhdWRpdGlvbnMpID4gMCkKCQkJCUBmb3JlYWNoKCRhdWRpdGlvbnMgYXMgJGF1ZGl0aW9uKQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEgIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlLWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRlYWRsaW5lIj5EZWFkbGluZTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRlIj57eyBkYXRlKCdkJywgc3RydG90aW1lKCRhdWRpdGlvbi0+ZGVhZGxpbmUpKSB9fTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb250aCI+e3sgZGF0ZSgnRicsIHN0cnRvdGltZSgkYXVkaXRpb24tPmRlYWRsaW5lKSkgfX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5mby1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGVzaWduYXRpb24iPnt7JGF1ZGl0aW9uLT50aXRsZX19PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3skYXVkaXRpb24tPmF1ZGl0aW9uX25hbWV9fTwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FjdGlvbiI+e3skYXVkaXRpb24tPmxvY2F0aW9ufX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJQGlmKGluX2FycmF5KCRhdWRpdGlvbi0+aWQsJHBhcnRpY2lwYXRlZF9hdWRpdGlvbikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCQk8YSBocmVmPSIjIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbW9kYWwtcmlnaHQte3skYXVkaXRpb24tPmlkfX0iPjxzcGFuPiQge3skYXVkaXRpb24tPmF1ZGl0aW9uX2ZlZX19PC9zcGFuPkVudHJ5IEZlZSA8ZGl2IGNsYXNzPSJob3Zlci10ZXh0Ij5TZWUgcGFydGljaXBhdGlvbjwvZGl2PjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJQGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCTxhIGhyZWY9Int7dXJsKCdhdWRpdGlvbnMnKX19L3t7JGF1ZGl0aW9uLT5pZH19Ij48c3Bhbj4kIHt7JGF1ZGl0aW9uLT5hdWRpdGlvbl9mZWV9fTwvc3Bhbj5FbnRyeSBGZWUgPGRpdiBjbGFzcz0iaG92ZXItdGV4dCI+UmVhZCBNb3JlPC9kaXY+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAlAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICBAZW5kZm9yZWFjaAogICAgICAgICAgICAgICAgQGVsc2UKICAgICAgICAgICAgICAgIDxoMz5ObyBBdWRpdGlvbiBGb3VuZDwvaDM+CiAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgIAogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhsLTYiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdWRpdGlvbi1pbmZvIj4KICAgICAgICAgICAgCUBpZigkYXVkaXRpb25fZGV0YWlsKQoJCQkJCQoJCSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSI+CgkJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbWctYm94Ij4KCQkgICAgICAgICAgICAgICAgICAgIAlAaWYoICRhdWRpdGlvbl9kZXRhaWwtPmhlYWRlcl9pbWFnZSAhPSIiKQoJCSAgICAgICAgICAgICAgICAgICAgICAgIAk8aW1nIHNyYz0ie3sgYXNzZXQoJy91cGxvYWRzL2F1ZGl0aW9ucy8nKSB9fS97eyAkYXVkaXRpb25fZGV0YWlsLT5oZWFkZXJfaW1hZ2V9fSIgYWx0PSIiIGNsYXNzPSJpbWctZmx1aWQiPgoJCSAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgoJCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1ib2R5Ij4KCQkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhZXJpYWwtbG9nbyI+CgkJICAgICAgICAgICAgICAgICAgICAgICAgCUBpZiggJGF1ZGl0aW9uX2RldGFpbC0+bG9nbyAhPSIiKQoJCSAgICAgICAgICAgICAgICAgICAgICAgIAkJPGltZyBzcmM9Int7IGFzc2V0KCcvdXBsb2Fkcy9hdWRpdGlvbnMvJykgfX0ve3sgJGF1ZGl0aW9uX2RldGFpbC0+bG9nb319IiBhbHQ9IiIgY2xhc3M9ImltZy1mbHVpZCI+CgkJICAgICAgICAgICAgICAgICAgICAgICAgCUBlbmRpZgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWNvbnRlbnQiPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkZXNpZ25hdGlvbiI+e3sgJGF1ZGl0aW9uX2RldGFpbC0+dGl0bGV9fTwvZGl2PgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3sgJGF1ZGl0aW9uX2RldGFpbC0+YXVkaXRpb25fbmFtZX19PC9oMz4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJpbmZvLWxpc3QiPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND57eyBkYXRlKCdtLmQnLCBzdHJ0b3RpbWUoICRhdWRpdGlvbl9kZXRhaWwtPmRlYWRsaW5lKSkgfX08L2g0PgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+RGVhZGxpbmU8L2g1PgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0Pnt7ICRhdWRpdGlvbl9kZXRhaWwtPmxvY2F0aW9ufX08L2g0PgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkxvY2F0aW9uPC9oNT4KCQkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CgkJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgIAoJCSAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlbnRyeS1pbmZvIj4KCQkgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InByaWNlIj48c3ViPiQ8L3N1Yj4ge3sgJGF1ZGl0aW9uX2RldGFpbC0+YXVkaXRpb25fZmVlfX08L2Rpdj4KCQkgICAgICAgICAgICAgICAgICAgIDxoND5FbnRyeSBGZWU8L2g0PgoJCSAgICAgICAgICAgICAgICAgICAgQGlmKCAkYXVkaXRpb25fZGV0YWlsLT5hdWRpdGlvbl9kZXRhaWwpCgkJCSAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGFja2FnZS10aXRsZSI+VGhpcyBwYWNrYWdlIGluY2x1ZGVzOjwvZGl2PgoJCQkJCQkJCTxkaXYgY2xhc3M9InBhY2thZ2UtZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+eyEhICAkYXVkaXRpb25fZGV0YWlsLT5hdWRpdGlvbl9kZXRhaWwgISF9PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCSAgICAgICAgICAgICAgICAgICAgQGVuZGlmCgkJICAgICAgICAgICAgICAgICAgICBAaWYoaW5fYXJyYXkoJGF1ZGl0aW9uX2RldGFpbC0+aWQsJHBhcnRpY2lwYXRlZF9hdWRpdGlvbikpCgkJCQkJCQkJPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tZGFuZ2VyIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbW9kYWwtcmlnaHQte3skYXVkaXRpb25fZGV0YWlsLT5pZH19Ij5TZWUgcGFydGljaXBhdGlvbjwvYT4KCQkgICAgICAgICAgICAgICAgICAgIEBlbHNlCgkJICAgICAgICAgICAgICAgICAgICAJPGEgaHJlZj0ie3t1cmwoJ2F1ZGl0aW9ucy9wYXJ0aWNpcGF0aW9uJyl9fS97eyAkYXVkaXRpb25fZGV0YWlsLT5pZH19IiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIiPlBhcnRpY2lwYXRlPC9hPgoJCSAgICAgICAgICAgICAgICAgICAgQGVuZGlmCgkJICAgICAgICAgICAgICAgICAgICAKCQkgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgICAgIAoJCSAgICAgICAgICAgICAgICA8ZGl2IGlkPSJhY2NvcmRpb24iIGNsYXNzPSJhY2NvcmRpb24iPgoJCSAgICAgICAgICAgICAgICAJQGlmKCAkYXVkaXRpb25fZGV0YWlsLT5kZXNjcmlwdGlvbikKCQkJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1oZWFkZXIiIGlkPSJoZWFkaW5nT25lIj4KCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLWxpbmsiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNjb2xsYXBzZU9uZSIgYXJpYS1leHBhbmRlZD0idHJ1ZSIgYXJpYS1jb250cm9scz0iY29sbGFwc2VPbmUiPiBEZXNjcmlwdGlvbiA8L2E+CgkJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKCQkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY29sbGFwc2VPbmUiIGNsYXNzPSJjb2xsYXBzZSBzaG93IiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmdPbmUiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uIj4KCQkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+eyEhICAkYXVkaXRpb25fZGV0YWlsLT5kZXNjcmlwdGlvbiAhIX08L3A+CgkJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCQkJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgICAgICBAZW5kaWYKCQkgICAgICAgICAgICAgICAgICAgIEBpZiggJGF1ZGl0aW9uX2RldGFpbC0+cmVxdWlyZW1lbnQpCgkJICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KCQkgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWhlYWRlciIgaWQ9ImhlYWRpbmdUd28iPgoJCSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0iYnRuIGJ0bi1saW5rIGNvbGxhcHNlZCIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2NvbGxhcHNlVHdvIiBhcmlhLWV4cGFuZGVkPSJmYWxzZSIgYXJpYS1jb250cm9scz0iY29sbGFwc2VUd28iPiBSZXF1aXJlbWVudHM8L2E+CgkJICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0iY29sbGFwc2VUd28iIGNsYXNzPSJjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nVHdvIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvbiI+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57ISEgJGF1ZGl0aW9uX2RldGFpbC0+cmVxdWlyZW1lbnQhIX08L3A+CgkJICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCSAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoJCSAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgICAgICBAZW5kaWYKCQkgICAgICAgICAgICAgICAgPC9kaXY+CgkJICAgICAgICAgICAgICAgIAkKCQkgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgPC9kaXY+CgogICAgPC9kaXY+CjwvZGl2PgpAZW5kc2VjdGlvbgpAc2VjdGlvbignbW9kYWwtcmlnaHQnKQpAaWYoY291bnQoJHBfYXVkdGlvbl9kYXRhKSA+IDApCglAZm9yZWFjaCgkcF9hdWR0aW9uX2RhdGEgYXMgJGF1ZGl0aW9uZGF0YSkKICAgICAgICBAcGhwCiAgICAgICAgICAgICRyZXZpZXdzID0gJHJldmlld3NfZGF0YVskYXVkaXRpb25kYXRhLT5pZF07CiAgICAgICAgICAgIGlmKGNvdW50KCRyZXZpZXdzKSA+IDApewogICAgICAgICAgICAgICAgJHJldmlldyA9ICRyZXZpZXdzWzBdOwogICAgICAgICAgICAgICAgJG92ZXJhbGxyYXRpbmcgPSAoJHJldmlldy0+ZmVlZGJhY2sgKyAkcmV2aWV3LT5mb290d29yayArICRyZXZpZXctPmFsaW5nbWVudCArICRyZXZpZXctPmJhbGFuY2UgKyAkcmV2aWV3LT5mb2N1cyArICRyZXZpZXctPmFydGlzdHkpIC8gNjsKICAgICAgICAgICAgICAgICRhdmdSYXRpbmcgPSBudW1iZXJfZm9ybWF0KCRvdmVyYWxscmF0aW5nLDIpOwogICAgICAgICAgICB9CiAgICAgICAgQGVuZHBocAoJPGRpdiBjbGFzcz0ibW9kYWwgZmFkZSBmaXJzLW1vZGFsIGF1ZGl0aW9ucy1tb2RlbCByaWdodCIgaWQ9Im1vZGFsLXJpZ2h0LXt7JGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25faWR9fSIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciPgogICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZyIgcm9sZT0iZG9jdW1lbnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiIGNsYXNzPSJjbG9zZSIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPjxpbWcgc3JjPSIvcGxhdGZvcm0vaW1nL2Nsb3NlLnBuZyIgY2xhc3M9ImltZy1mbHVpZCI+PC9hPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmlycy1zbm93LWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InZpZGVvcy1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICBAaWYoJGF1ZGl0aW9uZGF0YS0+dmlkZW9fdHlwZSA9PSAnZmlsZScpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmlkZW8gd2lkdGg9IjEwMCUiIGhlaWdodD0iMzAxIiBjb250cm9scyA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBzcmM9Int7YXNzZXQoJ3VwbG9hZHMvYXVkaXRpb25zJyl9fS97eyRhdWRpdGlvbmRhdGEtPnZpZGVvX2xpbmt9fSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgSFRNTDUgdmlkZW8uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ZpZGVvPgogICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlmcmFtZSB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIzMDEiIHNyYz0ie3skYXVkaXRpb25kYXRhLT52aWRlb19saW5rfX0iIGZyYW1lYm9yZGVyPSIwIiBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIEBwaHAgCiAgICAgICAgICAgICAgICAgICAgJHRlbXAgPSAkbW9kZWwtPmF1ZGl0aW9uTGV2ZWwoJGF1ZGl0aW9uZGF0YS0+YXVkaXRpb25faWQpOyAKICAgICAgICAgICAgICAgICAgICBAZW5kcGhwCiAgICAgICAgICAgICAgICAgICAgPGgzPnt7JHRlbXAtPmF1ZGl0aW9uX25hbWV9fTwvaDM+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGV2ZWwiPkxldmVsOiAKICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCR0ZW1wLT5sZXZlbCA9PSAzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQWR2YW5jZWQKICAgICAgICAgICAgICAgICAgICAgICAgQGVsc2VpZigkdGVtcC0+bGV2ZWwgPT0gMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEludGVybWVkaWF0ZQogICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQmVnaW5uZXIKICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idXBkYXRlZCI+VXBsb2FkZWQgaW4gCiAgICAgICAgICAgICAgICAgICAgQHBocAogICAgICAgICAgICAgICAgICAgICRkYXRlID0gbmV3IFxDYXJib25cQ2FyYm9uKCRhdWRpdGlvbmRhdGEtPmNyZWF0ZWRfYXQpOwogICAgICAgICAgICAgICAgICAgIGVjaG8gJGRhdGUtPmZvcm1hdCgibS5kLlkgZzppIEEiKTsKICAgICAgICAgICAgICAgICAgICBAZW5kcGhwCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYiIGlkPSJteVRhYiIgcm9sZT0idGFibGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGFjdGl2ZSIgaWQ9Im92ZXJ2aWV3LXRhYiIgZGF0YS10b2dnbGU9InRhYiIgaHJlZj0iI292ZXJ2aWV3IiByb2xlPSJ0YWIiIGFyaWEtY29udHJvbHM9Im92ZXJ2aWV3IiBhcmlhLXNlbGVjdGVkPSJ0cnVlIj5PdmVydmlldzwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGlkPSJ0ZWNobmlxdWUtdGFiIiBkYXRhLXRvZ2dsZT0idGFiIiBocmVmPSIjdGVjaG5pcXVlIiByb2xlPSJ0YWIiIGFyaWEtY29udHJvbHM9InRlY2huaXF1ZSIgYXJpYS1zZWxlY3RlZD0iZmFsc2UiPlNjb3JlPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLWNvbnRlbnQiIGlkPSJuYXYtdGFiQ29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYi1wYW5lIGZhZGUgc2hvdyBhY3RpdmUiIGlkPSJvdmVydmlldyIgcm9sZT0idGFicGFuZWwiIGFyaWEtbGFiZWxsZWRieT0ib3ZlcnZpZXctdGFiIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZihjb3VudCgkcmV2aWV3cykgPiAwKQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZyBvdmVyYWwtcmF0aW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0LXRleHQiPnt7JGF2Z1JhdGluZ319PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQtc3RhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkYXZnUmF0aW5nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGZvciAoJGkgPSAxOyAkaSA8ICRhdmdSYXRpbmc7ICRpKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9yKCRhdmdSYXRpbmc7JGF2Z1JhdGluZzw9NTskYXZnUmF0aW5nKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdyZXktc3RhciI+PGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJvdmVyYWwiPk92ZXJhbCBSYXRpbmc8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0LWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZihjb3VudCgkcmV2aWV3cykgPiAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0PkZlZWRiYWNrIFN1bW1hcnk8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3skcmV2aWV3LT5mZWVkYmFja19zdW1tYXJ5fX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5XZSBhcmUgc3RpbGwgcmV2aWV3aW5nIHlvdXIgdmlkZW8gUGxlYXNlIHdhaXQuPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFiLXBhbmUgZmFkZSIgaWQ9InRlY2huaXF1ZSIgcm9sZT0idGFicGFuZWwiIGFyaWEtbGFiZWxsZWRieT0idGVjaG5pcXVlLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoY291bnQoJHJldmlld3MpID4gMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFiLWxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkcmV2aWV3LT5mZWVkYmFja19zdW1tYXJ5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+RmVlZGJhY2sgU3VtbWFyeTwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3skcmV2aWV3LT5mZWVkYmFja19zdW1tYXJ5fX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC10ZXh0Ij57eyRyZXZpZXctPmZlZWRiYWNrfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkcmV2aWV3LT5mZWVkYmFjaykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IgKCRpID0gMTsgJGkgPCAkcmV2aWV3LT5mZWVkYmFjazsgJGkrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IoJHJldmlldy0+ZmVlZGJhY2s7JHJldmlldy0+ZmVlZGJhY2s8PTU7JHJldmlldy0+ZmVlZGJhY2srKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JleS1zdGFyIj48aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJHJldmlldy0+Zm9vdHdvcmspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LWxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoND5Gb290d29yazwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3skcmV2aWV3LT5mb290d29ya19jb21tZW50fX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC10ZXh0Ij57eyRyZXZpZXctPmZvb3R3b3JrfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkcmV2aWV3LT5mb290d29yaykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IgKCRpID0gMTsgJGkgPCAkcmV2aWV3LT5mb290d29yazsgJGkrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IoJHJldmlldy0+Zm9vdHdvcms7JHJldmlldy0+Zm9vdHdvcms8PTU7JHJldmlldy0+Zm9vdHdvcmsrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JleS1zdGFyIj48aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRyZXZpZXctPmFsaW5nbWVudCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0LWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg0PkFsaWdubWVudDwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3skcmV2aWV3LT5hbGluZ21lbnRfY29tbWVudH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtdGV4dCI+e3skcmV2aWV3LT5hbGluZ21lbnR9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRyZXZpZXctPmFsaW5nbWVudCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IgKCRpID0gMTsgJGkgPCAkcmV2aWV3LT5hbGluZ21lbnQ7ICRpKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9yKCRyZXZpZXctPmFsaW5nbWVudDskcmV2aWV3LT5hbGluZ21lbnQ8PTU7JHJldmlldy0+YWxpbmdtZW50KyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdyZXktc3RhciI+PGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkcmV2aWV3LT5iYWxhbmNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+QmFsYW5jZWQ8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt7JHJldmlldy0+YmFsYW5jZV9jb21tZW50fX08L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJpZ2h0LWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmF0aW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGVmdC10ZXh0Ij57eyRyZXZpZXctPmJhbGFuY2V9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRyZXZpZXctPmJhbGFuY2UpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9yICgkaSA9IDE7ICRpIDwgJHJldmlldy0+YmFsYW5jZTsgJGkrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IoJHJldmlldy0+YmFsYW5jZTskcmV2aWV3LT5iYWxhbmNlPD01OyRyZXZpZXctPmJhbGFuY2UrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZ3JleS1zdGFyIj48aSBjbGFzcz0iZmFzIGZhLXN0YXIiPjwvaT48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRyZXZpZXctPmZvY3VzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+Rm9jdXM8L2g0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPnt7JHJldmlldy0+Zm9jdXNfY29tbWVudH19PC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyaWdodC1ib3giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJhdGluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtdGV4dCI+e3skcmV2aWV3LT5mb2N1c319CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJHJldmlldy0+Zm9jdXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9yICgkaSA9IDE7ICRpIDwgJHJldmlldy0+Zm9jdXM7ICRpKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kZm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZm9yKCRyZXZpZXctPmZvY3VzOyRyZXZpZXctPmZvY3VzPD01OyRyZXZpZXctPmZvY3VzKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImdyZXktc3RhciI+PGkgY2xhc3M9ImZhcyBmYS1zdGFyIj48L2k+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkcmV2aWV3LT5hcnRpc3R5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1saXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxlZnQtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQ+QXJ0aXN0eTwvaDQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3skcmV2aWV3LT5hcnRpc3R5X2NvbW1lbnR9fTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icmlnaHQtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyYXRpbmciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZWZ0LXRleHQiPnt7JHJldmlldy0+YXJ0aXN0eX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJHJldmlldy0+YXJ0aXN0eSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBmb3IgKCRpID0gMTsgJGkgPCAkcmV2aWV3LT5hcnRpc3R5OyAkaSsrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGZvcigkcmV2aWV3LT5hcnRpc3R5OyRyZXZpZXctPmFydGlzdHk8PTU7JHJldmlldy0+YXJ0aXN0eSsrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJncmV5LXN0YXIiPjxpIGNsYXNzPSJmYXMgZmEtc3RhciI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRmb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVuZGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+V2UgYXJlIHN0aWxsIHJldmlld2luZyB5b3VyIHZpZGVvIFBsZWFzZSB3YWl0LjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgQGVuZGZvcmVhY2gKQGVuZGlmCkBlbmRzZWN0aW9uIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";