1665722087
waR3U4bTeM%3Acc6d3de0465ea6271541f95e2fdb56cf-e5a03018dfb4215daf1ba8192951d64a
s:13008:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImU1YTAzMDE4ZGZiNDIxNWRhZjFiYTgxOTI5NTFkNjRhIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTY6InNlYXJjaC5ibGFkZS5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czozNToicmVzb3VyY2VzL3ZpZXdzLTE1L3NlYXJjaC5ibGFkZS5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjg5NDc6IkBleHRlbmRzKCdsYXlvdXRzLmFwcCcpCkBzZWN0aW9uKCdjc3MnKQogICAgPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2Fzc2V0cy9qcy9zd2VldGFsZXJ0L3N3ZWV0LWFsZXJ0LmNzcyI+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICAgIC52aWRlb1dyYXBwZXIgewogICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiA1Ni4yNSU7IC8qIDE2OjkgKi8KICAgICAgICAgICAgcGFkZGluZy10b3A6IDI1cHg7CiAgICAgICAgICAgIGhlaWdodDogMDsKICAgICAgICB9CgogICAgICAgIC52aWRlb1dyYXBwZXIgaWZyYW1lIHsKICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICAgICB0b3A6IDA7CiAgICAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgfQoKICAgICAgICAuY29sb3ItZ3JheSB7CiAgICAgICAgICAgIGNvbG9yOiAjODE4MTkwICFpbXBvcnRhbnQ7CiAgICAgICAgfQogICAgPC9zdHlsZT4KQGVuZHNlY3Rpb24KCkBzZWN0aW9uKCdjb250ZW50JykKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2LXRhYnMgbmF2LWFuaW1hdGVkLWJvcmRlci1mcm9tLXJpZ2h0Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsge3sgJHNob3cgPT0gJ215cmV2aWV3cycgPyAnJyA6ICdhY3RpdmUnIH19IgogICAgICAgICAgICAgICAgICAgaHJlZj0ie3sgJHNob3cgPT0gJ215cmV2aWV3cycgPyB1cmwoJy9teXJldmlld3MnKSA6ICdqYXZhc2NyaXB0OnZvaWQoMCk7J319Ij4KICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtY2VudGVyIGYtdy00MDAiPk5ldyBzdWJtaXNzaW9uczwvaDE+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIHt7ICRzaG93ICE9ICdteXJldmlld3MnID8gJycgOiAnYWN0aXZlJyB9fSIKICAgICAgICAgICAgICAgICAgIGhyZWY9Int7ICRzaG93ICE9ICdteXJldmlld3MnID8gdXJsKCcvbXlyZXZpZXdzP3Nob3c9bXlyZXZpZXdzJykgOiAnamF2YXNjcmlwdDp2b2lkKDApOyd9fSI+CiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWNlbnRlciBmLXctNDAwIj5NeSByZXZpZXdzPC9oMT4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICA8L3VsPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLXQtMjAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgICAgICAgQGlmKCFjb3VudCgkdmlkZW9zKSAmJiAkc2VhcmNoX3RleHQpCiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LWNlbnRlciBmLXctNDAwIG0tdC0yMCI+U29ycnksIG5vIHJlc3VsdHMgd2VyZSBmb3VuZC48L2gyPgogICAgICAgICAgICAgICAgQGVsc2VpZighY291bnQoJHZpZGVvcykpCiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJ0ZXh0LWNlbnRlciBmLXctNDAwIG0tdC0yMCI+TGlzdCBpcyBlbXB0eS48L2gyPgogICAgICAgICAgICAgICAgQGVuZGlmCgogICAgICAgICAgICAgICAgQGZvcmVhY2goJHZpZGVvcyBhcyAkdmlkZW8pCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IG0tYi0yMCBwLXQtMTUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IiBpZD0idmlkZW9fX3t7ICR2aWRlby0+aWQgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtbWQtMTIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InVwcGVyY2FzZSBmLXMtMjgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0ie3sgdXJsKCcvcHJvZmlsZS8nLiR2aWRlby0+dXNlci0+aWQpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkdmlkZW8tPnVzZXItPmZpcnN0X25hbWUgLiAiICIgLiAkdmlkZW8tPnVzZXItPmxhc3RfbmFtZSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy0wIGNvbC1tZC0yIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVwcGVyY2FzZSBmLXMtMTYgY29sb3ItZ3JheSI+VmlkZW8gbmFtZTo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7ICR2aWRlby0+bmFtZSB9fTwvc3Bhbj4gPGJyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idXBwZXJjYXNlIGYtcy0xNiBjb2xvci1ncmF5Ij5MZXZlbDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7ICR2aWRlby0+cGVyZm9ybWFuY2VfbGV2ZWwtPm5hbWUgfX08L3NwYW4+IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3stLTxzcGFuIGNsYXNzPSJ1cHBlcmNhc2UgZi1zLTE2IGNvbG9yLWdyYXkiPkdlbnJlczo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7IGltcGxvZGUoJywgJywgJHZpZGVvLT5hY3Rpdml0eV9nZW5yZXMtPmxpc3RzKCduYW1lJyktPmFsbCgpKSB9fTwvc3Bhbj4gPGJyPi0tfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVwcGVyY2FzZSBmLXMtMTYgY29sb3ItZ3JheSI+TG9jYXRpb246PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyAkdmlkZW8tPnVzZXItPmxvY2F0aW9uIH19PC9zcGFuPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1cHBlcmNhc2UgZi1zLTE2IGNvbG9yLWdyYXkiPkRhdGUgc3VibWl0dGVkOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgJHZpZGVvLT5jcmVhdGVkX2F0IH19PC9zcGFuPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1cHBlcmNhc2UgZi1zLTE2IGNvbG9yLWdyYXkiPlZpZGVvIGxlbmd0aDo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJsZW5ndGgte3sgJHZpZGVvLT51cmwgfX0iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PC9zcGFuPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1cHBlcmNhc2UgZi1zLTE2IGNvbG9yLWdyYXkiPlJldmlldyBwYWNrYWdlOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAaWYoJHZpZGVvLT5xdWVzdGlvbnMtPmNvdW50KCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgREVUQUlMRUQgUEFDS0FHRQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTVU1NQVJZIFBBQ0tBR0UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+IDxicj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyIGNsYXNzPSJtLWItNSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJ1cHBlcmNhc2UgZi1zLTE4IGNvbG9yLWRhbmdlciI+UHJvZmlsZSBzdW1tYXJ5PC9zcGFuPiA8YnI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPnshISBzdHJfbGltaXQoJHZpZGVvLT51c2VyLT5hYm91dCwgMzUwLCAiLi4uIikgISF9PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2aWRlbyB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIzMTAiIGNvbnRyb2xzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpZigkc2hvdyA9PSAnbXlyZXZpZXdzJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0ie3t1cmwoJy8nKSAuIGNvbmZpZygndmlkZW8uY29tcGxldGVkX3Jldmlld19wYXRoJykgLiAkdmlkZW8tPnJldmlldy0+cmV2aWV3X3VybH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2Ugc3JjPSJ7e3VybCgnLycpIC4gY29uZmlnKCd2aWRlby51c2VyX3ZpZGVvX3BhdGgnKSAuICR2aWRlby0+dXJsfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZW5kaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBIVE1MNSB2aWRlby4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmlkZW8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXhzLTAgY29sLW1kLTIiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMTIgY29sLW1kLTEwIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGlmKCRzaG93ICE9ICdteXJldmlld3MnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNoZWNrLXN0cmlwZSBidG4gYnRuLXdhcm5pbmctODAwIGJ0bi1mbGF0IG0tdC0xMCBjZW50ZXItYmxvY2sgdXBwZXJjYXNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2stdXJsPSJ7eyB1cmwoJy9yZXZpZXcvY3JlYXRlLycuJHZpZGVvLT5pZCkgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmV2aWV3IG5vdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNoZWNrLXN0cmlwZSBidG4gYnRuLXdhcm5pbmctODAwIGJ0bi1mbGF0IG0tdC0xMCBjZW50ZXItYmxvY2sgdXBwZXJjYXNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2stdXJsPSJ7eyB1cmwoJy9yZXZpZXcvc2hvdy1teS8nLiR2aWRlby0+aWQpIH19Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpZXcgcmV2aWV3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJjaGVjay1zdHJpcGUgYnRuIGJ0bi1kYW5nZXItODAwIGJ0bi1mbGF0IG0tdC0xMCBjZW50ZXItYmxvY2sgdXBwZXJjYXNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2stdXJsPSJ7eyB1cmwoJy9yZXZpZXcvY3JlYXRlLycuJHZpZGVvLT5pZCkgfX0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRWRpdCByZXZpZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBlbmRpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtMCBjb2wtbWQtMiI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxociBjbGFzcz0ibS1iLTUiPgogICAgICAgICAgICAgICAgQGVuZGZvcmVhY2gKICAgICAgICAgICAgICAgICAgICBAcGhwCiAgICAgICAgICAgICAgICAgICAgICAgICRzaG93ID0gKCBpc3NldCgkX0dFVFsnc2hvdyddKSApID8gJF9HRVRbJ3Nob3cnXSA6ICcnOwogICAgICAgICAgICAgICAgICAgIEBlbmRwaHAKICAgICAgICAgICAgICAgIEBpbmNsdWRlKCdwYWdpbmF0aW9uLmRlZmF1bHQnLCBbJ3BhZ2luYXRvcicgPT4gJHZpZGVvcy0+YXBwZW5kcyggWydzaG93JyA9PiAkc2hvdyAsJ3NlYXJjaCcgPT4gJHNlYXJjaF90ZXh0XSldKQoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KQGVuZHNlY3Rpb24KCkBzZWN0aW9uKCdqcycpCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvYXNzZXRzL2pzL3N3ZWV0YWxlcnQvc3dlZXQtYWxlcnQubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCiAgICAgICAgZnVuY3Rpb24gY2hlY2tTdHJpcGVFdmVudCgpIHsKCiAgICAgICAgICAgICQoJy5jaGVjay1zdHJpcGUnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgdmFyIHRoYXQgPSAkKHRoaXMpOwogICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhOwogICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCJfdG9rZW4iLCAie3sgY3NyZl90b2tlbigpIH19Iik7CiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoInVzZXJfaWQiLCAie3skdXNlci0+aWR9fSIpOwoKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiAiL2NoZWNrU3RyaXBlQ29ubmVjdCIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsCiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJy5jaGVjay1zdHJpcGUnKS5vZmYoJ2NsaWNrJyk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YS5zdHJpcGVfY29ubmVjdCAhPSAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhhdC5hdHRyKCdvbmNsaWNrLXVybCcpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dhbCgiRXJyb3IhIiwgIlBsZWFzZSBjb25uZWN0IHRvIHNob3djYXNlLWh1YiBzdHJpcGUgcGxhdGZvcm0gaW4geW91ciBwcm9maWxlIGFjY291bnQgc2V0dGluZ3MhIiwgImVycm9yIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tTdHJpcGVFdmVudCgpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgiT29wcyBzb21ldGhpbmcgaGFwcGVucy4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrU3RyaXBlRXZlbnQoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgfSkKICAgICAgICB9CiAgICAgICAgY2hlY2tTdHJpcGVFdmVudCgpOwoKICAgIDwvc2NyaXB0PgpAZW5kc2VjdGlvbgoiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW50ZXJmYWNlcyI7YTowOnt9czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQB0cmFpdHMiO2E6MDp7fX0=";